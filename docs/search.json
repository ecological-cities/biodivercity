[{"path":"https://ecological-cities.github.io/biodivercity/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to biodivercity","title":"Contributing to biodivercity","text":"outlines propose change biodivercity. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to biodivercity","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to biodivercity","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://ecological-cities.github.io/biodivercity/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to biodivercity","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"ecological-cities/biodivercity\", fork = TRUE). Install development dependences devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to biodivercity","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"biodivercity - Biodiversity indices for city landscapes Copyright (C) 2022  biodivercity authors and contributors  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. Copyright (C) 2022  biodivercity authors and contributors This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://ecological-cities.github.io/biodivercity/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with biodivercity","title":"Getting help with biodivercity","text":"Thanks using biodivercity! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with biodivercity","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with biodivercity","text":"Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with biodivercity","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"https://ecological-cities.github.io/biodivercity/articles/biodivercity.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Get started with biodivercity","text":"Multiple frameworks assess urban biodiversity proposed research practice. conceptualise biodiversity include genetic, phylogenetic landscape diversity, well human-centric dimensions food provision, climate regulation ecosystem functioning. frameworks offer comprehensive view ‘total biodiversity’, certain components may shortcomings terms (1) causal proximity (e.g. indirect effect landscape diversity forest area diversity species); (2) measurability -scale (e.g. genetic diversity, plant species diversity); (3) precision (e.g. estimating water thermal regulation vegetation). Components directly represent concept ‘biodiversity’ can also add complexity decision-making, risk contributing mistrust ignorance overall assessment. package biodivercity provides way directly assess habitat value urban landscapes chosen animal group (taxon). key features include: Provide step--step protocols random point sampling animal group within areas interest (model building validation). Examples birds, butterflies, odonates amphibians provided. Download process relevant landscape data building empirical models (e.g. spatial patterns land cover Sentinel-2 satellite imagery, urban density OpenStreetMap). Build predictive models local (alpha) community (beta) diversity animal group. Use models make pixel-based spatial predictions across landscape, specified spatial resolution. Validate model predictions new data. Derive total (gamma) diversity chosen animal group, based local community diversity. Summarise predicted pixel values within custom areas (e.g. within zones used city planning).","code":""},{"path":"https://ecological-cities.github.io/biodivercity/articles/biodivercity.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Get started with biodivercity","text":"Install development version biodivercity GitHub:","code":"devtools::install_github(\"ecological-cities/biodivercity\", ref = \"main\")"},{"path":"https://ecological-cities.github.io/biodivercity/articles/biodivercity.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Get started with biodivercity","text":"Load package:","code":"library(biodivercity)"},{"path":"https://ecological-cities.github.io/biodivercity/articles/biodivercity.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Get started with biodivercity","text":"Baker, D. J., Maclean, . M., Goodall, M., & Gaston, K. J. (2021). Species distribution modelling needed support ecological impact assessments. Journal Applied Ecology, 58(1), 21-26. Soto-Navarro, C. ., Harfoot, M., Hill, S. L. L., Campbell, J., Mora, F., Campos, C., … & Burgess, N. D. (2021). Towards multidimensional biodiversity index national application. Nature Sustainability, 1-10.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/articles/covid-19_missed-surveys.html","id":"assessing-missing-data-with-past-records","dir":"Articles","previous_headings":"","what":"Assessing missing data with past records","title":"Missing surveys from COVID-19 measures","text":"COVID-19 hit, fauna surveys scheduled within Circuit Breaker period (Punggol Queenstown Survey Round 2, Cycle 5) conducted. simulate effect loss observed species richness density less surveys, number surveys randomly removed total survey number conducted window previous survey year (Round 1, 2016/17). examine possible variation species richness/density, bootstrapped repetitions made respective number missed surveys taxon. .e. Aves (birds): 15 (PG) surveys excluded 100 bootstrapping scenarios results can visualised boxplot: Regenerate sample dataset. Boxplot . species (species richness) Punggol first Survey Round (2016/17), similar . missed surveys randomly excluded Cycle 5 (COVID-19 circuit breaker period Survey Round 2, 2019/20). blue cross denotes counts across full dataset, diamond symbol denotes mean counts across 100 bootstrapped repetitions scenarios excluded data.","code":"exclude_bird_pg <- 15 rep <- 100  set.seed(123)  boot <- exclude_simulator(bird, surveys,                           exclude_num = exclude_bird_pg,                            exclude_level = \"survey\",                           specify_points = NULL, specify_towns = NULL,                           specify_rounds = NULL, specify_cycles = 5,                            town_ignore = c(\"QT\",\"TP\", \"JW\", \"BS\", \"WL\"), # for PG                           round_ignore = \"2\",                            cycle_ignore = NULL,                           rep = rep) # sp richness sp_rich <- colSums(!is.na(boot[,-1])) # mean(sp_rich) / nrow(boot) # quantile(sp_rich) sp_rich <- sp_rich %>%   as_tibble() %>%   rename(n = \"value\") %>%   mutate(full = nrow(boot)) %>%   mutate(priority = \"Aves\") %>%   mutate(town = \"PG\")  # A function factory for getting integer y-axis values. integer_breaks <- function(n = 5, ...) {   fxn <- function(x) {   breaks <- floor(pretty(x, n, ...))   names(breaks) <- attr(breaks, \"labels\")   breaks   }   return(fxn)   }  # plot boxplot of expected species sp_rich %>%   mutate(priority = factor(priority, levels = c(\"Aves\"))) %>%    ggplot(aes(x = town, y = n)) +          facet_wrap( ~ priority, scales = \"free\") +          geom_point(aes(y = full), shape=4, size=3.0,                color = \"blue\", alpha = 0.2) +     geom_boxplot(width=0.2, color=\"black\", alpha=0.2) +     stat_summary(fun = mean, geom = \"point\", shape=5, size=2.0) + #mean value        scale_y_continuous(breaks = integer_breaks()) +     xlab(\"\") +     ylab(\"No. of species\") +      theme_bw() +     theme(panel.grid.major.x = element_blank(),           panel.grid.minor.y = element_blank())"},{"path":"https://ecological-cities.github.io/biodivercity/articles/more/animal-survey-summarise.html","id":"overview","dir":"Articles > More","previous_headings":"","what":"Overview","title":"Animal surveys: Raw data summaries","text":"project objectives : package facilitates existing analyses","code":""},{"path":[]},{"path":"https://ecological-cities.github.io/biodivercity/articles/more/animal-survey-summarise.html","id":"sampling-point-generation","dir":"Articles > More","previous_headings":"1. Pre-survey preparations","what":"Sampling point generation","title":"Animal surveys: Raw data summaries","text":"generate random sampling points collection new data, research area first randomly sampled specified point density. Land cover stratified two main classes natural vegetation urban land cover. two land cover types randomly sampled independently point density one point per 50 hectares land.","code":"data(area)  points <- random_pt_gen()"},{"path":"https://ecological-cities.github.io/biodivercity/articles/more/animal-survey-summarise.html","id":"data-collection-format","dir":"Articles > More","previous_headings":"1. Pre-survey preparations","what":"Data collection format","title":"Animal surveys: Raw data summaries","text":"Sample survey data format Sample survey info format","code":""},{"path":"https://ecological-cities.github.io/biodivercity/articles/more/animal-survey-summarise.html","id":"process-survey-data","dir":"Articles > More","previous_headings":"","what":"2. Process survey data","title":"Animal surveys: Raw data summaries","text":"Collected fauna survey data format detailed previous section can easily subset respect town, round /priority filter_obs function. example, specific set surveys (.e. butterfly surveys Tampines 2020-2021) can filtered follows: Checks performed remove uncertain fauna identifications prevent -counting. Next, surveys filtered remove surveys sampling points surveyed less three times. remaining surveys normalised randomly removing sampling points sampling zones achieve similar point densities across areas. Three surveys randomly selected per sampling point taxon, removal process repeated 30 times obtain bootstrapped results. normalised dataset used summarise species richness species accumulation curves across sampling areas: Mean species richness (. species) per sampling point survey, town taxon. error bars denote two standard deviations mean across iterations. Note scale y-axis varies plots. Species accumulation curves compare total, ‘gamma’, diversity total sampling area, accounting differences sampling effort. mean species richness (line) two standard deviations mean (shaded region) across iterations shown. Note scale y-axis varies taxa.","code":"data(fauna) data(surveys)  butterflies_tampines_round_2 <- filter_obs(observations = fauna, survey_ref = surveys,                    specify_taxon = \"Lepidoptera\",                    specify_area = \"TP\",                    specify_period = \"2\") # BY POINT normalised_perpt <-    foreach(i = seq_along(fauna_normalised),            .packages = \"tidyverse\") %dopar% {     #get unique data to input to loop later   unique <- surveys_normalised[[i]] %>%     distinct(town, round, priority)      results <- data.frame()      for(j in 1:nrow(unique)){        sptally_data <-        sptally_extractor(observations = fauna_normalised[[i]],                         survey_ref = surveys_normalised[[i]],                         specify_town = unique$town[j],                          specify_round = unique$round[j],                          specify_priority = unique$priority[j],                         level = \"point\")          # bind to plot_sac & overwrite     results <- results %>%       bind_rows(sptally_data)          rm(sptally_data)   }                results                      }  # summarise & stats normalised_perpt <- normalised_perpt %>%    map_dfr(~ bind_rows(.), .id = \"iteration\") %>% # unlist    mutate(iteration = as.numeric(iteration)) %>%         # add iteration-level summaries   group_by(iteration,             town, round, priority) %>%    summarise(mean = mean(n, na.rm = T) #,             #se = sd(n, na.rm = T)/sqrt(length(n))             ) %>%    mutate(type = \"Point\") %>%      # for plotting   mutate(town = factor(town, levels = c(\"PG\", \"QT\", \"TP\",\"JW\", \"BS\", \"WL\"))) %>%   mutate(priority = factor(priority, levels = c(\"Aves\", \"Lepidoptera\", \"Odonata\",\"Amphibia\"))) %>%   mutate(round = as.factor(round)) # loop across all bootstrapped iterations  plot_sac <-    foreach(i = seq_along(fauna),            .packages = \"tidyverse\") %dopar% {      unique <- surveys[[i]] %>%     distinct(town, round, priority)                results <- data.frame()      for(j in 1:nrow(unique)){          sac_data <- sac_extractor(observations = fauna[[i]],                                survey_ref = surveys[[i]],                               specify_town = unique$town[j],                                specify_round = unique$round[j],                                specify_priority = unique$priority[j])          # bind to plot_sac & overwrite     results <- results %>%       bind_rows(sac_data)          rm(sac_data)   }      results }  # unlist & calc mean across iterations plot_sac <- plot_sac %>%    map_dfr(~ bind_rows(.), .id = \"iteration\") %>%    mutate(iteration = as.numeric(iteration)) %>%    group_by(town, round, priority, sites) %>%    summarise(mean = mean(richness),             sd = sd(richness, na.rm = TRUE))"},{"path":"https://ecological-cities.github.io/biodivercity/articles/more/animal-survey-summarise.html","id":"process-landscape-data","dir":"Articles > More","previous_headings":"2. Process survey data","what":"3. Process landscape data","title":"Animal surveys: Raw data summaries","text":"Landscape information retrieved publicly available Sentinel-2 database using sen2r package. external package unrelated biodivercity, please also refer official repository updated instructions. model fauna species richness across six towns 2016 2019, spatio-temporal selections can set accordingly download available Sentinel-2 images sen2r() GUI interface. downloading raster files within specific index directories, mosaic individual images account data deficiencies cloud cover. classify resulting mosaics according respective indices. use Otsu’s thresholding (see article) define threshold values value threshold regarded presence landscape type measured index. classified mosaics, can isolate landscape metrics defined buffer distance around fauna sampling points. sample datasets data(points), data(NDVI) data(NDWI2) contains survey points classified mosaics NDVI NDWI2. Next, urban landscape elements retrieved freely-available OpenStreetMap (OSM) database. Sentinel-2 images, buildings represented building footprint opposed three-dimensional structures. can download number -ground levels proxy building height, especially residential buildings floor--floor height standardised (Building height data may also supplied government databases available (e.g. HDB Property Information data.gov.sg).). Building polygons road lines extracted set geographical boundary functions get_buildings_osm get_roads_osm. home2park, GitHub package, osmextract required dependencies functions package.","code":"# http://sen2r.ranghetti.info/articles/installation.html install.packages(\"sen2r\")  # install Sen2Cor software (atmospheric correction for Level-1C products) library(sen2r) check_sen2r_deps() # check dependencies install_sen2cor(force = TRUE) # install via command instead of GUI  out_dir  <- glue::glue(\"{dir_dataoutput}/spatial/satellite-images/sen2r/sen2r_\", {as.character(params$sen2r_date_range[1])}, \"-to-\", {as.character(params$sen2r_date_range[2])})  # run this after every successful download if there are still files in LTA not yet online, then subsequently check with provided safe_is_online() and sen2r(): out_paths <- sen2r(   param_list = params$sen2r_params,   timewindow = c(as.Date(params$sen2r_date_range[1]), as.Date(params$sen2r_date_range[2])),   path_l2a = params$sen2r_dir_rawdata, # level-2A SAFE products   path_l1c = params$sen2r_dir_rawdata, # level-1C SAFE products   path_out = out_dir,   path_indices = out_dir,   extent_as_mask = TRUE,   list_rgb = \"RGB432B\" # output RGB image   # max_mask = 15,   # list_indices = c(\"NDVI\", \"ARI\")   ) mosaic_sen2r(parent_dir = out_dir,               exclude = NULL,               rm_outlier = TRUE) classify_mosaic(x = \"out_dir/index/mosaic.tif\",                 otsu = TRUE,                 output = \"out_dir/classified/\") data(points) veg_classified <- data(NDVI) water_classified <- data(NDWI2)  circles <- lsm_perpoint(raster = veg_classified, points = points,                          buffer_sizes = c(50, 100, 126, 200, 400, 600, 800, 1000),                         class_names = c(\"veg\"),                         class_values = c(1),                         landscape_name = \"veg\",                         level = c(\"class\"))   circles2 <- lsm_perpoint(raster = water_classified, points = points,                          buffer_sizes = c(50, 100, 126, 200, 400, 600, 800, 1000),                         class_names = c(\"water\"),                         class_values = c(1),                         landscape_name = \"water\",                         level = c(\"class\"))   for(i in 1:length(circles)){ # append to circles2 info to circles   circles[[i]] <- circles[[i]] %>%     full_join(circles2[[i]] %>%                   mutate(across(.cols = starts_with(\"lsm_\"),                    ~ifelse(percentage_inside < 90, NA, .))) %>%                 dplyr::select(-percentage_inside),                by = c(\"point_id\", \"round\")) } osm_boundaries <- data(boundaries) %>%    # st_union() %>% # merge all subzones   st_as_sf() %>%   st_make_valid()  # get_roads_osm is not in home2park package. Need to load dependency libraries  foreach(i = seq_along(params$osm_download_dates),                     .packages = c(\"home2park\",                                  \"tidyverse\", \"sf\", \"osmextract\")) %dopar% {       # buildings                      get_buildings_osm(osm_boundaries,                      date = params$osm_download_dates[i],                     dir_raw = params$osm_dir_rawdata,                     filename = paste0(dir_dataoutput, \"/landscape/osm/buildings_osm-polygons_\", params$osm_download_dates[i], \".geojson\"))                  # roads   get_roads_osm(osm_boundaries,                  date = params$osm_download_dates[i],                 dir_raw = params$osm_dir_rawdata,                 filename = paste0(dir_dataoutput, \"/landscape/osm/roads_osm-lines_\", params$osm_download_dates[i], \".geojson\"))                                rm(i)                    }"},{"path":"https://ecological-cities.github.io/biodivercity/articles/more/animal-survey-summarise.html","id":"building-of-models","dir":"Articles > More","previous_headings":"2. Process survey data","what":"4. Building of models","title":"Animal surveys: Raw data summaries","text":"added.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/articles/more/animal-survey-summarise.html","id":"spatial-predictions","dir":"Articles > More","previous_headings":"2. Process survey data","what":"5. Spatial predictions","title":"Animal surveys: Raw data summaries","text":"geom_to_grid overlays grid target area species richness predictions desired. function wrapper st_make_grid function == \"centers\", package sf. output object class sfc comprise points landscape metrics extracted respective distance buffers. Grid dimensions variable can specified grid_dim. buffer_dist optional argument situations landscape data limited target area smaller. distance value argument correspond largest buffer present variables, include areas landscape data. Visualisation geom_to_grid function. heatmap_raster function combination multiple functions result final raster species richness predictions one taxon. breakdown function follows: Species richness predicted point provided geom argument objects specified mods, env_df landscape. second grid created using st_make_grid == \"polygons\" template final raster. grid template prediction values combined rasterize terra package. Note: Variables used landscape match variables env_df.","code":"# subset to regions where predictions can be made: >126m inwards from boundaries bound_grid <- geom_to_grid(geom = bound,                            buffer_dist = 126,                            grid_dim = c(50, 50)) # Minor edits to the env_df had to be made # bird_env <- birds %>%  #   dplyr::select(where(is.numeric) & !sprich) %>%  #   dplyr::select(!r50m_man_GnPR) # non-GnPR dataset  bird_hm <- heatmap_raster(env_df = bird_env,                           mods = birdmods,                           landscape = grid_landscape,                           geom = bound,                           buffer_dist = 126,                           grid_dim = c(50, 50),                           name = \"bird_hm\") # optional"},{"path":"https://ecological-cities.github.io/biodivercity/articles/more/animal-survey-summarise.html","id":"cross-validation","dir":"Articles > More","previous_headings":"2. Process survey data","what":"Cross-validation","title":"Animal surveys: Raw data summaries","text":"added.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/articles/more/animals-data-summaries.html","id":"overview","dir":"Articles > More","previous_headings":"","what":"Overview","title":"Animals: Data summaries","text":"project objectives : package facilitates existing analyses","code":""},{"path":[]},{"path":"https://ecological-cities.github.io/biodivercity/articles/more/animals-data-summaries.html","id":"sampling-point-generation","dir":"Articles > More","previous_headings":"1. Pre-survey preparations","what":"Sampling point generation","title":"Animals: Data summaries","text":"generate random sampling points collection new data, research area first randomly sampled specified point density. Land cover stratified two main classes natural vegetation urban land cover. two land cover types randomly sampled independently point density one point per 50 hectares land.","code":"data(area)  points <- random_pt_gen()"},{"path":"https://ecological-cities.github.io/biodivercity/articles/more/animals-data-summaries.html","id":"data-collection-format","dir":"Articles > More","previous_headings":"1. Pre-survey preparations","what":"Data collection format","title":"Animals: Data summaries","text":"Sample survey data format Sample survey info format","code":""},{"path":"https://ecological-cities.github.io/biodivercity/articles/more/animals-data-summaries.html","id":"process-survey-data","dir":"Articles > More","previous_headings":"","what":"2. Process survey data","title":"Animals: Data summaries","text":"Collected fauna survey data format detailed previous section can easily subset respect town, round /priority filter_obs function. example, specific set surveys (.e. butterfly surveys Tampines 2020-2021) can filtered follows: Checks performed remove uncertain fauna identifications prevent -counting. Next, surveys filtered remove surveys sampling points surveyed less three times. remaining surveys normalised randomly removing sampling points sampling zones achieve similar point densities across areas. Three surveys randomly selected per sampling point taxon, removal process repeated 30 times obtain bootstrapped results. normalised dataset used summarise species richness species accumulation curves across sampling areas: Mean species richness (. species) per sampling point survey, town taxon. error bars denote two standard deviations mean across iterations. Note scale y-axis varies plots. Species accumulation curves compare total, ‘gamma’, diversity total sampling area, accounting differences sampling effort. mean species richness (line) two standard deviations mean (shaded region) across iterations shown. Note scale y-axis varies taxa.","code":"data(fauna) data(surveys)  butterflies_tampines_round_2 <- filter_obs(observations = fauna, survey_ref = surveys,                    specify_taxon = \"Lepidoptera\",                    specify_area = \"TP\",                    specify_period = \"2\") # BY POINT normalised_perpt <-    foreach(i = seq_along(fauna_normalised),            .packages = \"tidyverse\") %dopar% {     #get unique data to input to loop later   unique <- surveys_normalised[[i]] %>%     distinct(town, round, priority)      results <- data.frame()      for(j in 1:nrow(unique)){        sptally_data <-        sptally_extractor(observations = fauna_normalised[[i]],                         survey_ref = surveys_normalised[[i]],                         specify_town = unique$town[j],                          specify_round = unique$round[j],                          specify_priority = unique$priority[j],                         level = \"point\")          # bind to plot_sac & overwrite     results <- results %>%       bind_rows(sptally_data)          rm(sptally_data)   }                results                      }  # summarise & stats normalised_perpt <- normalised_perpt %>%    map_dfr(~ bind_rows(.), .id = \"iteration\") %>% # unlist    mutate(iteration = as.numeric(iteration)) %>%         # add iteration-level summaries   group_by(iteration,             town, round, priority) %>%    summarise(mean = mean(n, na.rm = T) #,             #se = sd(n, na.rm = T)/sqrt(length(n))             ) %>%    mutate(type = \"Point\") %>%      # for plotting   mutate(town = factor(town, levels = c(\"PG\", \"QT\", \"TP\",\"JW\", \"BS\", \"WL\"))) %>%   mutate(priority = factor(priority, levels = c(\"Aves\", \"Lepidoptera\", \"Odonata\",\"Amphibia\"))) %>%   mutate(round = as.factor(round)) # loop across all bootstrapped iterations  plot_sac <-    foreach(i = seq_along(fauna),            .packages = \"tidyverse\") %dopar% {      unique <- surveys[[i]] %>%     distinct(town, round, priority)                results <- data.frame()      for(j in 1:nrow(unique)){          sac_data <- sac_extractor(observations = fauna[[i]],                                survey_ref = surveys[[i]],                               specify_town = unique$town[j],                                specify_round = unique$round[j],                                specify_priority = unique$priority[j])          # bind to plot_sac & overwrite     results <- results %>%       bind_rows(sac_data)          rm(sac_data)   }      results }  # unlist & calc mean across iterations plot_sac <- plot_sac %>%    map_dfr(~ bind_rows(.), .id = \"iteration\") %>%    mutate(iteration = as.numeric(iteration)) %>%    group_by(town, round, priority, sites) %>%    summarise(mean = mean(richness),             sd = sd(richness, na.rm = TRUE))"},{"path":"https://ecological-cities.github.io/biodivercity/articles/more/animals-data-summaries.html","id":"process-landscape-data","dir":"Articles > More","previous_headings":"2. Process survey data","what":"3. Process landscape data","title":"Animals: Data summaries","text":"Landscape information retrieved publicly available Sentinel-2 database using sen2r package. external package unrelated biodivercity, please also refer official repository updated instructions. model fauna species richness across six towns 2016 2019, spatio-temporal selections can set accordingly download available Sentinel-2 images sen2r() GUI interface. downloading raster files within specific index directories, mosaic individual images account data deficiencies cloud cover. classify resulting mosaics according respective indices. use Otsu’s thresholding (see article) define threshold values value threshold regarded presence landscape type measured index. classified mosaics, can isolate landscape metrics defined buffer distance around fauna sampling points. sample datasets data(points), data(NDVI) data(NDWI2) contains survey points classified mosaics NDVI NDWI2. Next, urban landscape elements retrieved freely-available OpenStreetMap (OSM) database. Sentinel-2 images, buildings represented building footprint opposed three-dimensional structures. can download number -ground levels proxy building height, especially residential buildings floor--floor height standardised (Building height data may also supplied government databases available (e.g. HDB Property Information data.gov.sg).). Building polygons road lines extracted set geographical boundary functions get_buildings_osm get_roads_osm. home2park, GitHub package, osmextract required dependencies functions package.","code":"# http://sen2r.ranghetti.info/articles/installation.html install.packages(\"sen2r\")  # install Sen2Cor software (atmospheric correction for Level-1C products) library(sen2r) check_sen2r_deps() # check dependencies install_sen2cor(force = TRUE) # install via command instead of GUI  out_dir  <- glue::glue(\"{dir_dataoutput}/spatial/satellite-images/sen2r/sen2r_\", {as.character(params$sen2r_date_range[1])}, \"-to-\", {as.character(params$sen2r_date_range[2])})  # run this after every successful download if there are still files in LTA not yet online, then subsequently check with provided safe_is_online() and sen2r(): out_paths <- sen2r(   param_list = params$sen2r_params,   timewindow = c(as.Date(params$sen2r_date_range[1]), as.Date(params$sen2r_date_range[2])),   path_l2a = params$sen2r_dir_rawdata, # level-2A SAFE products   path_l1c = params$sen2r_dir_rawdata, # level-1C SAFE products   path_out = out_dir,   path_indices = out_dir,   extent_as_mask = TRUE,   list_rgb = \"RGB432B\" # output RGB image   # max_mask = 15,   # list_indices = c(\"NDVI\", \"ARI\")   ) mosaic_sen2r(parent_dir = out_dir,               exclude = NULL,               rm_outlier = TRUE) classify_mosaic(x = \"out_dir/index/mosaic.tif\",                 otsu = TRUE,                 output = \"out_dir/classified/\") data(points) veg_classified <- data(NDVI) water_classified <- data(NDWI2)  circles <- lsm_perpoint(raster = veg_classified, points = points,                          buffer_sizes = c(50, 100, 126, 200, 400, 600, 800, 1000),                         class_names = c(\"veg\"),                         class_values = c(1),                         landscape_name = \"veg\",                         level = c(\"class\"))   circles2 <- lsm_perpoint(raster = water_classified, points = points,                          buffer_sizes = c(50, 100, 126, 200, 400, 600, 800, 1000),                         class_names = c(\"water\"),                         class_values = c(1),                         landscape_name = \"water\",                         level = c(\"class\"))   for(i in 1:length(circles)){ # append to circles2 info to circles   circles[[i]] <- circles[[i]] %>%     full_join(circles2[[i]] %>%                   mutate(across(.cols = starts_with(\"lsm_\"),                    ~ifelse(percentage_inside < 90, NA, .))) %>%                 dplyr::select(-percentage_inside),                by = c(\"point_id\", \"round\")) } osm_boundaries <- data(boundaries) %>%    # st_union() %>% # merge all subzones   st_as_sf() %>%   st_make_valid()  # get_roads_osm is not in home2park package. Need to load dependency libraries  foreach(i = seq_along(params$osm_download_dates),                     .packages = c(\"home2park\",                                  \"tidyverse\", \"sf\", \"osmextract\")) %dopar% {       # buildings                      get_buildings_osm(osm_boundaries,                      date = params$osm_download_dates[i],                     dir_raw = params$osm_dir_rawdata,                     filename = paste0(dir_dataoutput, \"/landscape/osm/buildings_osm-polygons_\", params$osm_download_dates[i], \".geojson\"))                  # roads   get_roads_osm(osm_boundaries,                  date = params$osm_download_dates[i],                 dir_raw = params$osm_dir_rawdata,                 filename = paste0(dir_dataoutput, \"/landscape/osm/roads_osm-lines_\", params$osm_download_dates[i], \".geojson\"))                                rm(i)                    }"},{"path":"https://ecological-cities.github.io/biodivercity/articles/more/animals-data-summaries.html","id":"building-of-models","dir":"Articles > More","previous_headings":"2. Process survey data","what":"4. Building of models","title":"Animals: Data summaries","text":"added.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/articles/more/animals-data-summaries.html","id":"spatial-predictions","dir":"Articles > More","previous_headings":"2. Process survey data","what":"5. Spatial predictions","title":"Animals: Data summaries","text":"geom_to_grid overlays grid target area species richness predictions desired. function wrapper st_make_grid function == \"centers\", package sf. output object class sfc comprise points landscape metrics extracted respective distance buffers. Grid dimensions variable can specified grid_dim. buffer_dist optional argument situations landscape data limited target area smaller. distance value argument correspond largest buffer present variables, include areas landscape data. Visualisation geom_to_grid function. heatmap_raster function combination multiple functions result final raster species richness predictions one taxon. breakdown function follows: Species richness predicted point provided geom argument objects specified mods, env_df landscape. second grid created using st_make_grid == \"polygons\" template final raster. grid template prediction values combined rasterize terra package. Note: Variables used landscape match variables env_df.","code":"# subset to regions where predictions can be made: >126m inwards from boundaries bound_grid <- geom_to_grid(geom = bound,                            buffer_dist = 126,                            grid_dim = c(50, 50)) # Minor edits to the env_df had to be made # bird_env <- birds %>%  #   dplyr::select(where(is.numeric) & !sprich) %>%  #   dplyr::select(!r50m_man_GnPR) # non-GnPR dataset  bird_hm <- heatmap_raster(env_df = bird_env,                           mods = birdmods,                           landscape = grid_landscape,                           geom = bound,                           buffer_dist = 126,                           grid_dim = c(50, 50),                           name = \"bird_hm\") # optional"},{"path":"https://ecological-cities.github.io/biodivercity/articles/more/animals-data-summaries.html","id":"cross-validation","dir":"Articles > More","previous_headings":"2. Process survey data","what":"Cross-validation","title":"Animals: Data summaries","text":"added.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/articles/more/summarise-animal-surveys.html","id":"overview","dir":"Articles > More","previous_headings":"","what":"Overview","title":"Summarise Animal Surveys","text":"project objectives : package facilitates existing analyses","code":""},{"path":[]},{"path":"https://ecological-cities.github.io/biodivercity/articles/more/summarise-animal-surveys.html","id":"sampling-point-generation","dir":"Articles > More","previous_headings":"1. Pre-survey preparations","what":"Sampling point generation","title":"Summarise Animal Surveys","text":"generate random sampling points collection new data, research area first randomly sampled specified point density. Land cover stratified two main classes natural vegetation urban land cover. two land cover types randomly sampled independently point density one point per 50 hectares land.","code":"data(area)  points <- random_pt_gen()"},{"path":"https://ecological-cities.github.io/biodivercity/articles/more/summarise-animal-surveys.html","id":"data-collection-format","dir":"Articles > More","previous_headings":"1. Pre-survey preparations","what":"Data collection format","title":"Summarise Animal Surveys","text":"Sample survey data format Sample survey info format","code":""},{"path":"https://ecological-cities.github.io/biodivercity/articles/more/summarise-animal-surveys.html","id":"process-survey-data","dir":"Articles > More","previous_headings":"","what":"2. Process survey data","title":"Summarise Animal Surveys","text":"Collected fauna survey data format detailed previous section can easily subset respect town, round /priority filter_obs function. example, specific set surveys (.e. butterfly surveys Tampines 2020-2021) can filtered follows: Checks performed remove uncertain fauna identifications prevent -counting. Next, surveys filtered remove surveys sampling points surveyed less three times. remaining surveys normalised randomly removing sampling points sampling zones achieve similar point densities across areas. Three surveys randomly selected per sampling point taxon, removal process repeated 30 times obtain bootstrapped results. normalised dataset used summarise species richness species accumulation curves across sampling areas: Mean species richness (. species) per sampling point survey, town taxon. error bars denote two standard deviations mean across iterations. Note scale y-axis varies plots. Species accumulation curves compare total, ‘gamma’, diversity total sampling area, accounting differences sampling effort. mean species richness (line) two standard deviations mean (shaded region) across iterations shown. Note scale y-axis varies taxa.","code":"data(fauna) data(surveys)  butterflies_tampines_round_2 <- filter_obs(observations = fauna, survey_ref = surveys,                    specify_taxon = \"Lepidoptera\",                    specify_area = \"TP\",                    specify_period = \"2\") # BY POINT normalised_perpt <-    foreach(i = seq_along(fauna_normalised),            .packages = \"tidyverse\") %dopar% {     #get unique data to input to loop later   unique <- surveys_normalised[[i]] %>%     distinct(town, round, priority)      results <- data.frame()      for(j in 1:nrow(unique)){        sptally_data <-        sptally_extractor(observations = fauna_normalised[[i]],                         survey_ref = surveys_normalised[[i]],                         specify_town = unique$town[j],                          specify_round = unique$round[j],                          specify_priority = unique$priority[j],                         level = \"point\")          # bind to plot_sac & overwrite     results <- results %>%       bind_rows(sptally_data)          rm(sptally_data)   }                results                      }  # summarise & stats normalised_perpt <- normalised_perpt %>%    map_dfr(~ bind_rows(.), .id = \"iteration\") %>% # unlist    mutate(iteration = as.numeric(iteration)) %>%         # add iteration-level summaries   group_by(iteration,             town, round, priority) %>%    summarise(mean = mean(n, na.rm = T) #,             #se = sd(n, na.rm = T)/sqrt(length(n))             ) %>%    mutate(type = \"Point\") %>%      # for plotting   mutate(town = factor(town, levels = c(\"PG\", \"QT\", \"TP\",\"JW\", \"BS\", \"WL\"))) %>%   mutate(priority = factor(priority, levels = c(\"Aves\", \"Lepidoptera\", \"Odonata\",\"Amphibia\"))) %>%   mutate(round = as.factor(round)) # loop across all bootstrapped iterations  plot_sac <-    foreach(i = seq_along(fauna),            .packages = \"tidyverse\") %dopar% {      unique <- surveys[[i]] %>%     distinct(town, round, priority)                results <- data.frame()      for(j in 1:nrow(unique)){          sac_data <- sac_extractor(observations = fauna[[i]],                                survey_ref = surveys[[i]],                               specify_town = unique$town[j],                                specify_round = unique$round[j],                                specify_priority = unique$priority[j])          # bind to plot_sac & overwrite     results <- results %>%       bind_rows(sac_data)          rm(sac_data)   }      results }  # unlist & calc mean across iterations plot_sac <- plot_sac %>%    map_dfr(~ bind_rows(.), .id = \"iteration\") %>%    mutate(iteration = as.numeric(iteration)) %>%    group_by(town, round, priority, sites) %>%    summarise(mean = mean(richness),             sd = sd(richness, na.rm = TRUE))"},{"path":"https://ecological-cities.github.io/biodivercity/articles/more/summarise-animal-surveys.html","id":"process-landscape-data","dir":"Articles > More","previous_headings":"2. Process survey data","what":"3. Process landscape data","title":"Summarise Animal Surveys","text":"Landscape information retrieved publicly available Sentinel-2 database using sen2r package. external package unrelated biodivercity, please also refer official repository updated instructions. model fauna species richness across six towns 2016 2019, spatio-temporal selections can set accordingly download available Sentinel-2 images sen2r() GUI interface. downloading raster files within specific index directories, mosaic individual images account data deficiencies cloud cover. classify resulting mosaics according respective indices. use Otsu’s thresholding (see article) define threshold values value threshold regarded presence landscape type measured index. classified mosaics, can isolate landscape metrics defined buffer distance around fauna sampling points. sample datasets data(points), data(NDVI) data(NDWI2) contains survey points classified mosaics NDVI NDWI2. Next, urban landscape elements retrieved freely-available OpenStreetMap (OSM) database. Sentinel-2 images, buildings represented building footprint opposed three-dimensional structures. can download number -ground levels proxy building height, especially residential buildings floor--floor height standardised (Building height data may also supplied government databases available (e.g. HDB Property Information data.gov.sg).). Building polygons road lines extracted set geographical boundary functions get_buildings_osm get_roads_osm. home2park, GitHub package, osmextract required dependencies functions package.","code":"# http://sen2r.ranghetti.info/articles/installation.html install.packages(\"sen2r\")  # install Sen2Cor software (atmospheric correction for Level-1C products) library(sen2r) check_sen2r_deps() # check dependencies install_sen2cor(force = TRUE) # install via command instead of GUI  out_dir  <- glue::glue(\"{dir_dataoutput}/spatial/satellite-images/sen2r/sen2r_\", {as.character(params$sen2r_date_range[1])}, \"-to-\", {as.character(params$sen2r_date_range[2])})  # run this after every successful download if there are still files in LTA not yet online, then subsequently check with provided safe_is_online() and sen2r(): out_paths <- sen2r(   param_list = params$sen2r_params,   timewindow = c(as.Date(params$sen2r_date_range[1]), as.Date(params$sen2r_date_range[2])),   path_l2a = params$sen2r_dir_rawdata, # level-2A SAFE products   path_l1c = params$sen2r_dir_rawdata, # level-1C SAFE products   path_out = out_dir,   path_indices = out_dir,   extent_as_mask = TRUE,   list_rgb = \"RGB432B\" # output RGB image   # max_mask = 15,   # list_indices = c(\"NDVI\", \"ARI\")   ) mosaic_sen2r(parent_dir = out_dir,               exclude = NULL,               rm_outlier = TRUE) classify_mosaic(x = \"out_dir/index/mosaic.tif\",                 otsu = TRUE,                 output = \"out_dir/classified/\") data(points) veg_classified <- data(NDVI) water_classified <- data(NDWI2)  circles <- lsm_perpoint(raster = veg_classified, points = points,                          buffer_sizes = c(50, 100, 126, 200, 400, 600, 800, 1000),                         class_names = c(\"veg\"),                         class_values = c(1),                         landscape_name = \"veg\",                         level = c(\"class\"))   circles2 <- lsm_perpoint(raster = water_classified, points = points,                          buffer_sizes = c(50, 100, 126, 200, 400, 600, 800, 1000),                         class_names = c(\"water\"),                         class_values = c(1),                         landscape_name = \"water\",                         level = c(\"class\"))   for(i in 1:length(circles)){ # append to circles2 info to circles   circles[[i]] <- circles[[i]] %>%     full_join(circles2[[i]] %>%                   mutate(across(.cols = starts_with(\"lsm_\"),                    ~ifelse(percentage_inside < 90, NA, .))) %>%                 dplyr::select(-percentage_inside),                by = c(\"point_id\", \"round\")) } osm_boundaries <- data(boundaries) %>%    # st_union() %>% # merge all subzones   st_as_sf() %>%   st_make_valid()  # get_roads_osm is not in home2park package. Need to load dependency libraries  foreach(i = seq_along(params$osm_download_dates),                     .packages = c(\"home2park\",                                  \"tidyverse\", \"sf\", \"osmextract\")) %dopar% {       # buildings                      get_buildings_osm(osm_boundaries,                      date = params$osm_download_dates[i],                     dir_raw = params$osm_dir_rawdata,                     filename = paste0(dir_dataoutput, \"/landscape/osm/buildings_osm-polygons_\", params$osm_download_dates[i], \".geojson\"))                  # roads   get_roads_osm(osm_boundaries,                  date = params$osm_download_dates[i],                 dir_raw = params$osm_dir_rawdata,                 filename = paste0(dir_dataoutput, \"/landscape/osm/roads_osm-lines_\", params$osm_download_dates[i], \".geojson\"))                                rm(i)                    }"},{"path":"https://ecological-cities.github.io/biodivercity/articles/more/summarise-animal-surveys.html","id":"building-of-models","dir":"Articles > More","previous_headings":"2. Process survey data","what":"4. Building of models","title":"Summarise Animal Surveys","text":"added.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/articles/more/summarise-animal-surveys.html","id":"spatial-predictions","dir":"Articles > More","previous_headings":"2. Process survey data","what":"5. Spatial predictions","title":"Summarise Animal Surveys","text":"geom_to_grid overlays grid target area species richness predictions desired. function wrapper st_make_grid function == \"centers\", package sf. output object class sfc comprise points landscape metrics extracted respective distance buffers. Grid dimensions variable can specified grid_dim. buffer_dist optional argument situations landscape data limited target area smaller. distance value argument correspond largest buffer present variables, include areas landscape data. Visualisation geom_to_grid function. heatmap_raster function combination multiple functions result final raster species richness predictions one taxon. breakdown function follows: Species richness predicted point provided geom argument objects specified mods, env_df landscape. second grid created using st_make_grid == \"polygons\" template final raster. grid template prediction values combined rasterize terra package. Note: Variables used landscape match variables env_df.","code":"# subset to regions where predictions can be made: >126m inwards from boundaries bound_grid <- geom_to_grid(geom = bound,                            buffer_dist = 126,                            grid_dim = c(50, 50)) # Minor edits to the env_df had to be made # bird_env <- birds %>%  #   dplyr::select(where(is.numeric) & !sprich) %>%  #   dplyr::select(!r50m_man_GnPR) # non-GnPR dataset  bird_hm <- heatmap_raster(env_df = bird_env,                           mods = birdmods,                           landscape = grid_landscape,                           geom = bound,                           buffer_dist = 126,                           grid_dim = c(50, 50),                           name = \"bird_hm\") # optional"},{"path":"https://ecological-cities.github.io/biodivercity/articles/more/summarise-animal-surveys.html","id":"cross-validation","dir":"Articles > More","previous_headings":"2. Process survey data","what":"Cross-validation","title":"Summarise Animal Surveys","text":"added.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Edwin Tan. Author, maintainer.            Package development, input geospatial analysis, data collection/curation, methodology Xiao Ping Song. Author.            Project/issue management data workflow, package development, input geospatial analysis, methodology Hong Jhun Sim. Author.            Input community diversity, methodology, data collection Justin Nai. Author.            Data curation species-level attributes, data collection, methodology Kwek Yan Chong. Author.            Conceptualisation, funding acquisition, methodology, supervision","code":""},{"path":"https://ecological-cities.github.io/biodivercity/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Tan, E. Y. W., Song, X. P., Sim, H. J., Nai, J., Chong, K. Y. (2022). biodivercity: R package assess diversity animal species urban areas. R Package version 0.0.1 (unreleased). https://github.com/ecological-cities/biodivercity.","code":"@Manual{,   title = {biodivercity: An R package to assess the diversity of animal species in urban areas},   author = {Edwin YW Tan and Xiao Ping Song and Hong Jhun Sim and Justin Nai and Kwek Yan Chong},   year = {2022},   url = {https://github.com/ecological-cities/biodivercity},   note = {R package version 0.0.1 (unreleased)}, }"},{"path":"https://ecological-cities.github.io/biodivercity/index.html","id":"biodiversity-indices-for-city-landscapes","dir":"","previous_headings":"","what":"Biodiversity indices for city landscapes","title":"Biodiversity indices for city landscapes","text":"biodivercity R package assessing diversity animal species urban areas. Refer package website demonstrations package may used.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Biodiversity indices for city landscapes","text":"Install development version biodivercity GitHub:","code":"# install.packages(\"devtools\") devtools::install_github(\"ecological-cities/biodivercity\", ref = \"main\")"},{"path":"https://ecological-cities.github.io/biodivercity/index.html","id":"setup","dir":"","previous_headings":"","what":"Setup","title":"Biodiversity indices for city landscapes","text":"Load package:","code":"library(biodivercity)"},{"path":"https://ecological-cities.github.io/biodivercity/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Biodiversity indices for city landscapes","text":"cite biodivercity acknowledge use, please cite following: Tan, E. Y. W., Song, X. P., Sim, H. J., Nai, J., Chong, K. Y. (2022). biodivercity: R package assess diversity animal species urban areas. R package version 0.0.1 (unreleased). https://github.com/ecological-cities/biodivercity. get BibTex entry, run citation(\"biodivercity\").","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/area.html","id":null,"dir":"Reference","previous_headings":"","what":"Survey area boundaries — area","title":"Survey area boundaries — area","text":"Desc","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/area.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Survey area boundaries — area","text":"","code":"data(area)"},{"path":"https://ecological-cities.github.io/biodivercity/reference/area.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Survey area boundaries — area","text":"object class 'list'.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/area.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Survey area boundaries — area","text":"TBC","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/area.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Survey area boundaries — area","text":"TBC","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/area.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Survey area boundaries — area","text":"","code":"data(area)"},{"path":"https://ecological-cities.github.io/biodivercity/reference/check_taxongrps.html","id":null,"dir":"Reference","previous_headings":"","what":"Check taxon group-level records for subsequent removal — check_taxongrps","title":"Check taxon group-level records for subsequent removal — check_taxongrps","text":"Tally list taxon groups species within group observed, either level individual towns points (survey round).","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/check_taxongrps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check taxon group-level records for subsequent removal — check_taxongrps","text":"","code":"check_taxongrps(   observations,   level,   species = \"species\",   genus = \"genus\",   family = \"family\",   town = \"town\",   round = \"round\",   point_id = \"point_id\" )"},{"path":"https://ecological-cities.github.io/biodivercity/reference/check_taxongrps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check taxon group-level records for subsequent removal — check_taxongrps","text":"observations Dataframe species observations. include columns species, genus, family, town, round, point_id. level Specify whether tally town point. species Column name species name recorded observations. May include group-level records (genus family). genus Column name genus name recorded observations. family Column name family name recorded observations. town Column name town specified observations. Defaults town. round Column name sampling round specified observations. Defaults round. point_id Column name unique identifier point observations. Defaults point_id.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/check_taxongrps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check taxon group-level records for subsequent removal — check_taxongrps","text":"Dataframe containing taxon group names species within group observed. Includes columns round town/point_id (depending argument level), well number (n) species particular taxon group.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/classify_mosaic.html","id":null,"dir":"Reference","previous_headings":"","what":"Binary classification of a spectral index mosaic image with a threshold value. — classify_mosaic","title":"Binary classification of a spectral index mosaic image with a threshold value. — classify_mosaic","text":"Binary classification spectral index mosaic image threshold value. threshold value specified, Otsu's threshold can calculated used classification.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/classify_mosaic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Binary classification of a spectral index mosaic image with a threshold value. — classify_mosaic","text":"","code":"classify_mosaic(x, threshold_value = NULL, otsu = FALSE, output)"},{"path":"https://ecological-cities.github.io/biodivercity/reference/classify_mosaic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Binary classification of a spectral index mosaic image with a threshold value. — classify_mosaic","text":"x Spectral index mosaic image (.tif) classified. threshold_value Numeric value determine absence presence elements according spectral index. otsu TRUE FALSE perform Otsu's thresholding. output Output filename.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/classify_mosaic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Binary classification of a spectral index mosaic image with a threshold value. — classify_mosaic","text":".tif raster classified_<index>.tif output folder.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/exclude_simulator.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate multiple scenarios with randomly excluded surveys — exclude_simulator","title":"Simulate multiple scenarios with randomly excluded surveys — exclude_simulator","text":"Randomly exclude either surveys sampling points (associated surveys) species community matrix. column community matrix represent unique species, row represents single unique survey (particular sampling point town, well survey round cycle).","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/exclude_simulator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate multiple scenarios with randomly excluded surveys — exclude_simulator","text":"","code":"exclude_simulator(   community,   survey_ref,   exclude_level = \"survey\",   exclude_num,   specify_towns = NULL,   specify_points = NULL,   specify_rounds = NULL,   specify_cycles = NULL,   town_ignore = NULL,   round_ignore = NULL,   cycle_ignore = NULL,   survey_id = \"survey_id\",   point_id = \"point_id\",   town = \"town\",   round = \"round\",   cycle = \"cycle\",   rep = 100 )"},{"path":"https://ecological-cities.github.io/biodivercity/reference/exclude_simulator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate multiple scenarios with randomly excluded surveys — exclude_simulator","text":"community Dataframe species community matrix (one survey per row). include columns survey_id, point_id, town, cycle. survey_ref Dataframe surveys conducted. Values column survey_id correspond community data. exclude_level Exclude randomly based one two levels: \"survey\" \"point\". exclude_num Number surveys exclude. Value single integer. specify_towns Specify town(s) randomly exclude surveys . Defaults NULL, excludes surveys randomly across towns. specify_points Specify point_id(s) sampling points randomly exclude surveys . Defaults NULL, excludes surveys randomly across points. specify_rounds Specify survey round exclude surveys . Defaults NULL, excludes surveys randomly across rounds. specify_cycles Specify survey cycle(s) exclude surveys . Defaults NULL, excludes surveys randomly across cycles. town_ignore Ignore specified town(s) community data analysis results. Defaults NULL, includes towns simulation. round_ignore Ignore specified round community data analysis results. Defaults NULL, includes rounds simulation. cycle_ignore Ignore specified cycless community data analysis results. Defaults NULL, includes cycles simulation. survey_id Column name unique identifier survey community survey_ref. Defaults survey_id. point_id Column name unique identifier sampling point survey_ref. Defaults survey_id. town Column name town specified survey_ref. Defaults town. round Column name survey round specified survey_ref. Defaults round. cycle Column name survey cycle specified survey_ref. Defaults cycle. rep Specify number repetitions (scenarios) randomly excluded survey data. Defaults 100.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/exclude_simulator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate multiple scenarios with randomly excluded surveys — exclude_simulator","text":"dataframe containing count points species full dataset, well repetition scenario randomly excluded data.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/fauna.html","id":null,"dir":"Reference","previous_headings":"","what":"Fauna observation data from point surveys across residential towns — fauna","title":"Fauna observation data from point surveys across residential towns — fauna","text":"Data fauna point surveys conducted six Singapore residential towns 2016 2021. Species occurrance abundance data collected four taxons: birds, butterflies, odonates amphibians.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/fauna.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fauna observation data from point surveys across residential towns — fauna","text":"","code":"data(fauna)"},{"path":"https://ecological-cities.github.io/biodivercity/reference/fauna.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Fauna observation data from point surveys across residential towns — fauna","text":"object class 'list'.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/fauna.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Fauna observation data from point surveys across residential towns — fauna","text":"TBC","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/fauna.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fauna observation data from point surveys across residential towns — fauna","text":"TBC","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/fauna.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fauna observation data from point surveys across residential towns — fauna","text":"","code":"data(fauna)"},{"path":"https://ecological-cities.github.io/biodivercity/reference/filter_obs.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter species observations based on specified criteria — filter_obs","title":"Filter species observations based on specified criteria — filter_obs","text":"Filters species observations biodiversity surveys based specified criteria.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/filter_obs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter species observations based on specified criteria — filter_obs","text":"","code":"filter_obs(   observations,   survey_ref,   specify_area = NULL,   specify_period = NULL,   specify_taxon = NULL,   survey_id = \"survey_id\",   point_id = \"point_id\",   area = \"area\",   period = \"period\",   taxon = \"taxon\" )"},{"path":"https://ecological-cities.github.io/biodivercity/reference/filter_obs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter species observations based on specified criteria — filter_obs","text":"observations Dataframe species observations. include columns survey_id, area, period, taxon. survey_ref Dataframe surveys conducted. Values column survey_id correspond observations. specify_area Specify area(s). Defaults NULL, includes areas. specify_period Specify survey period(s). Defaults NULL, includes periods. specify_taxon Specify taxon taxon/taxa. Defaults NULL, includes taxa. survey_id Column name unique identifier survey observations survey_ref. Defaults survey_id. point_id Column name unique identifier point observations survey_ref. Defaults point_id. area Column name area specified observations survey_ref. Defaults area. period Column name sampling period specified observations survey_ref. Defaults period. taxon Column name taxon interest specified observations survey_ref. Defaults taxon.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/filter_obs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter species observations based on specified criteria — filter_obs","text":"dataframe observations subset according specified criteria.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/get_buildings_osm.html","id":null,"dir":"Reference","previous_headings":"","what":"Get building polygons from OpenStreetMap — get_buildings_osm","title":"Get building polygons from OpenStreetMap — get_buildings_osm","text":"Download process OpenStreetMap (OSM) building polygons within specified geographical place, Geofabrik database. wrapper around functions package osmextract, processes downloaded files subsequent analyses. Refer package osmextract details options input arguments downloading data.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/get_buildings_osm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get building polygons from OpenStreetMap — get_buildings_osm","text":"","code":"get_buildings_osm(   place,   date = NULL,   dir_raw = osmextract::oe_download_directory(),   filename = NULL,   driver = \"GeoJSON\",   delete_dsn = TRUE,   append = NA,   ... )"},{"path":"https://ecological-cities.github.io/biodivercity/reference/get_buildings_osm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get building polygons from OpenStreetMap — get_buildings_osm","text":"place sf object (projected coordinate reference system). Geographical area match (.osm.pbf) file data archive. Argument passed osmextract::oe_match(). date Date OSM data snapshot download. Refer https://download.geofabrik.de specific dates available. Defaults NULL (download latest available data). dir_raw character. Directory download raw unprocessed OSM data. Passed argument download_directory osmextract::oe_read(). filename character (optional). File path export output data. driver character (optional). Name driver used export output data, passed sf::st_write(). Defaults 'GeoJSON'. delete_dsn logical (optional). Passed sf::st_write(). append defaults NA, raises error layer exists. Passed sf::st_write(). ... arguments passed osmextract::oe_read().","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/get_buildings_osm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get building polygons from OpenStreetMap — get_buildings_osm","text":"processed building polygons (sf object).","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/get_buildings_osm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get building polygons from OpenStreetMap — get_buildings_osm","text":"Data filtered key-value attributes, building: NULL. column levels derived building:levels; values set 1 extracted value empty NA, set NA ≤ 0 (.e. underground); values rounded nearest whole number. column area_m2 represents building footprint area, floorarea_m2 calculated multiplying area_m2 number levels.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/get_buildings_osm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get building polygons from OpenStreetMap — get_buildings_osm","text":"","code":"if (FALSE) { data(pop_sgp) pop_sgp <- sf::st_transform(pop_sgp, sf::st_crs(32648)) # transform to projected crs  # merge all census blocks for chosen year (2020) into single multi-polygon # function requires that polygons are merged city_boundaries <- pop_sgp %>%    dplyr::filter(year == 2020) %>%    sf::st_union() %>%    sf::st_as_sf() %>%    smoothr::fill_holes(threshold = units::set_units(1, 'km^2'))  %>% # clean up    smoothr::drop_crumbs(threshold = units::set_units(1, 'km^2'))  %>%    sf::st_make_valid()  # run function get_buildings_osm(place = city_boundaries,                   date = as.Date('2021-01-01'),                   filename = 'buildings_osm-polygons_2021-01-01.geojson') }"},{"path":"https://ecological-cities.github.io/biodivercity/reference/get_roads_osm.html","id":null,"dir":"Reference","previous_headings":"","what":"Get road lines from OpenStreetMap — get_roads_osm","title":"Get road lines from OpenStreetMap — get_roads_osm","text":"Download process OpenStreetMap (OSM) road lines within specified geographical place, Geofabrik database. wrapper around functions package osmextract, processes downloaded files subsequent analyses. Refer package osmextract details options input arguments downloading data.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/get_roads_osm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get road lines from OpenStreetMap — get_roads_osm","text":"","code":"get_roads_osm(   place,   date = NULL,   dir_raw = oe_download_directory(),   filename = NULL,   ... )"},{"path":"https://ecological-cities.github.io/biodivercity/reference/get_roads_osm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get road lines from OpenStreetMap — get_roads_osm","text":"place sf object (projected coordinate reference system). Geographical area match (.osm.pbf) file data archive. Argument passed osmextract::oe_match(). date Date OSM data snapshot download. Refer https://download.geofabrik.de specific dates available. Defaults NULL (download latest available data). dir_raw character. Directory download raw unprocessed OSM data. Passed argument download_directory osmextract::oe_read(). filename character (optional). File path export output data (GeoJSON format). ... arguments passed osmextract::oe_read().","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/get_roads_osm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get road lines from OpenStreetMap — get_roads_osm","text":"processed road lines (sf object).","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/get_roads_osm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get road lines from OpenStreetMap — get_roads_osm","text":"OSM lines filtered key-value attributes, highway: motorway, trunk, primary, secondary, tertiary, unclassified residential, respective *_link values.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/lsm_perpoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate landscape metrics at sampling points — lsm_perpoint","title":"Calculate landscape metrics at sampling points — lsm_perpoint","text":"Calculate landscape metrics sampling points","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/lsm_perpoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate landscape metrics at sampling points — lsm_perpoint","text":"","code":"lsm_perpoint(   raster,   points,   buffer_sizes,   class_names,   class_values,   landscape_name,   point_id = \"point_id\",   round = \"round\",   what = NULL,   level = NULL,   ... )"},{"path":"https://ecological-cities.github.io/biodivercity/reference/lsm_perpoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate landscape metrics at sampling points — lsm_perpoint","text":"raster Classified land cover raster object analysed. number layers correspond number survey rounds present points. points Sampling points (sf objects) calculation landscape metrics. buffer_sizes Radius circles sampling points (mapunits); landscape metrics calculated within buffer area. class_names Vector (character) land cover class names used identify corresponding integer values class_values. class_values Vector (integer) values interest within raster. include value 0. landscape_name Character string name landscape. Used label landscape-level metrics. point_id Column name sampling point id within points sf. round Column name survey round within points sf. column contain integers correspond number layers raster. Argument passed landscapemetrics::calculate_lsm(). Currently supports class- landscape-level metrics level Argument passed landscapemetrics::calculate_lsm(). Currently supports class- landscape-level metrics. ... Additional arguments (e.g. type=) passed landscapemetrics::calculate_lsm().","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/lsm_perpoint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate landscape metrics at sampling points — lsm_perpoint","text":"list containing landscape metrics across input buffer_sizes. element list contains results point_id round, particular buffer size.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/mosaic_sen2r.html","id":null,"dir":"Reference","previous_headings":"","what":"Create mosaics of Sentinel-2 images downloaded via the sen2r package — mosaic_sen2r","title":"Create mosaics of Sentinel-2 images downloaded via the sen2r package — mosaic_sen2r","text":"Create mosaics downloaded sen2r images parent directory, specified sen2r's path_out argument. images used detected parent directory running function. list spectral indices retrieved sen2r library('terra') used create mosaics.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/mosaic_sen2r.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create mosaics of Sentinel-2 images downloaded via the sen2r package — mosaic_sen2r","text":"","code":"mosaic_sen2r(parent_dir, exclude = NULL, rm_outlier = TRUE)"},{"path":"https://ecological-cities.github.io/biodivercity/reference/mosaic_sen2r.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create mosaics of Sentinel-2 images downloaded via the sen2r package — mosaic_sen2r","text":"parent_dir File path parent directory sen2r images, specified sen2r's path_out argument. exclude Character vector spectral indices excluded mosaic operation. 'CLD', 'SCL', 'RGB432B', 'BOA' excluded default. rm_outlier TRUE FALSE perform outlier removal. Threshold values specific spectral indices.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/mosaic_sen2r.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create mosaics of Sentinel-2 images downloaded via the sen2r package — mosaic_sen2r","text":".tif raster mosaic.tif within subdirectory included indices.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://ecological-cities.github.io/biodivercity/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/points.html","id":null,"dir":"Reference","previous_headings":"","what":"Survey point dataset — points","title":"Survey point dataset — points","text":"Desc","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Survey point dataset — points","text":"","code":"data(points)"},{"path":"https://ecological-cities.github.io/biodivercity/reference/points.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Survey point dataset — points","text":"object class 'list'.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/points.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Survey point dataset — points","text":"TBC","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/points.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Survey point dataset — points","text":"TBC","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/points.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Survey point dataset — points","text":"","code":"data(points)"},{"path":"https://ecological-cities.github.io/biodivercity/reference/random_pt_gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly generate sampling points within supplied area — random_pt_gen","title":"Randomly generate sampling points within supplied area — random_pt_gen","text":"Randomly generate fauna sampling points density one point per specified area supplied boundaries.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/random_pt_gen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly generate sampling points within supplied area — random_pt_gen","text":"","code":"random_pt_gen(   x,   area_per_pt,   pt_buffer,   excess_modifier = 1,   natveg = NULL,   retain = NULL,   retain_prop = NULL )"},{"path":"https://ecological-cities.github.io/biodivercity/reference/random_pt_gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly generate sampling points within supplied area — random_pt_gen","text":"x Shapefile (polygon multipolygon) site boundaries sampling. area_per_pt Area component point density square meters (e.g. one point every 50 hectares, area_per_pt = 500000) pt_buffer Buffer radius point surveys meters survey outside area interest. excess_modifier Numeric value multiplicative modifier excess points generated (.e. value 1.5 = 1.5 times expected number points generated). default value '1'. natveg Shapefile (polygon multipolygon) natural vegetation area separate point generation. retain Shapefile (point) previous round surveys retain new set survey points. retain_prop Value 0 1 proportion points retain previous round surveys.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/random_pt_gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomly generate sampling points within supplied area — random_pt_gen","text":"sf object sampling_points containing coordinates generated points.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/sac_extractor.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract species accumulation curves based on specified criteria — sac_extractor","title":"Extract species accumulation curves based on specified criteria — sac_extractor","text":"Wrapper function filter_obs() filters species observations biodiversity surveys, based specified criteria. Subsequently forms community matrix, removes taxon group-level (genus/family) species within group observed area (& period), using function check_taxongrps(). Finally, runs function specaccum() package vegan, extracts output data. Data biodiversity surveys species observations (respective abundances) must provided.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/sac_extractor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract species accumulation curves based on specified criteria — sac_extractor","text":"","code":"sac_extractor(   observations,   survey_ref,   specify_area,   specify_period,   specify_taxon,   survey_id = \"survey_id\",   area = \"area\",   period = \"period\",   taxon = \"taxon\",   species = \"species\",   genus = \"genus\",   family = \"family\",   abundance = \"abundance\" )"},{"path":"https://ecological-cities.github.io/biodivercity/reference/sac_extractor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract species accumulation curves based on specified criteria — sac_extractor","text":"observations Dataframe species observations. include columns survey_id, area, period, taxon, species abundance. survey_ref Dataframe surveys conducted. Values column survey_id correspond observations. specify_area Specify area. specify_period Specify survey period. specify_taxon Specify taxon group interest. survey_id Column name unique identifier survey observations survey_ref. Defaults survey_id. area Column name area specified observations survey_ref. Defaults area. period Column name sampling period specified observations survey_ref. Defaults period. taxon Column name taxon interest specified observations survey_ref. Defaults taxon. species Column name species specified observations. Defaults species. genus Column name genus specified observations. Defaults genus.  Used remove genus-level records species column, species within group observed within filtered dataset. family Column name family specified observations. Defaults family. Used remove family-level records species column, species within group observed within filtered dataset. abundance Column name species abundance specified observations. Defaults abundance.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/sac_extractor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract species accumulation curves based on specified criteria — sac_extractor","text":"dataframe columns sites, species richness sd (standard deviation) results, well information specified specify_area, specify_period specify_taxon.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/sptally_extractor.html","id":null,"dir":"Reference","previous_headings":"","what":"Tally number of species based on specified criteria — sptally_extractor","title":"Tally number of species based on specified criteria — sptally_extractor","text":"Wrapper function filter_obs() filters species observations biodiversity surveys, based specified criteria. Subsequently tallies number species per survey/sampling point (similar function specnumber() package vegan), extracts output data. tallied level sampling points (level = 'point'), removes taxon group-level (genus/family) species within group observed point (& period), using function check_taxongrps(). Data biodiversity surveys species observations (respective abundances) must provided.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/sptally_extractor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tally number of species based on specified criteria — sptally_extractor","text":"","code":"sptally_extractor(   observations,   survey_ref,   specify_area,   specify_period,   specify_taxon,   level,   survey_id = \"survey_id\",   area = \"area\",   period = \"period\",   taxon = \"taxon\",   point_id = \"point_id\",   species = \"species\",   genus = \"genus\",   family = \"family\",   abundance = \"abundance\" )"},{"path":"https://ecological-cities.github.io/biodivercity/reference/sptally_extractor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tally number of species based on specified criteria — sptally_extractor","text":"observations Dataframe species observations. include columns survey_id, area, period, taxon, species abundance. survey_ref Dataframe surveys conducted. Values column survey_id correspond observations. specify_area Specify area (character). specify_period Specify survey period (character). specify_taxon Specify taxon interest (character). level Specify whether tally 'survey' 'point' (character). survey_id Column name unique identifier survey observations survey_ref. Defaults survey_id. area Column name area specified observations survey_ref. Defaults area. period Column name sampling period specified observations survey_ref. Defaults period. taxon Column name taxon interest specified observations survey_ref. Defaults taxon. point_id Column name unique identifier sampling point specified observations survey_ref. Defaults point_id. species Column name species specified observations. Defaults species. genus Column name genus specified observations. Defaults genus.  Used remove genus-level records species column, species within group observed within filtered dataset. family Column name family specified observations. Defaults family. Used remove family-level records species column, species within group observed within filtered dataset. abundance Column name species abundance specified observations. Defaults abundance.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/sptally_extractor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tally number of species based on specified criteria — sptally_extractor","text":"dataframe containing tally species per survey/sampling point (depends level ='survey' 'point').","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/summarise_landscape_perpt.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise landscape variables per point based on supplied data — summarise_landscape_perpt","title":"Summarise landscape variables per point based on supplied data — summarise_landscape_perpt","text":"Summaries calculated supplied layers (layer_<layername>) appended points data additional columns. Ensure layers (projected) coordinate reference system similar points.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/summarise_landscape_perpt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise landscape variables per point based on supplied data — summarise_landscape_perpt","text":"","code":"summarise_landscape_perpt(   points,   uid_column = \"id\",   layer_trees = NULL,   radii_trees = 50,   layer_shrubs = NULL,   radii_shrubs = 50,   species = \"species\",   layer_turf = NULL,   radii_turf = 50,   layer_natveg = NULL,   radii_natveg = c(50, 126),   layer_water = NULL,   radii_water = 50,   layer_buildings = NULL,   radii_buildings = 50,   buildings_levels = \"levels\",   layer_roads = NULL,   radii_roads = c(50, 126),   roads_lanes = \"lanes\" )"},{"path":"https://ecological-cities.github.io/biodivercity/reference/summarise_landscape_perpt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise landscape variables per point based on supplied data — summarise_landscape_perpt","text":"points Sampling points (sf object) projected coordinate reference system. uid_column character. Specify unique identifier column name points. Defaults 'uid'. Column data type character. layer_trees Geo-location trees (sf points) summarised. Coordinate reference system similar points. radii_trees Numeric vector radii (units projected coordinate reference system, e.g., metres) summarise layer_trees. Default values model supplied (metres). layer_shrubs Vector shrubs (sf polygons) summarised. Coordinate reference system similar points. radii_shrubs Numeric vector radii (units projected coordinate reference system, e.g., metres) summarise layer_shrubs. Default values model supplied (metres). species character. Specify column name species names within layer_trees layer_shrubs (provided). Defaults 'species'. Column data type character. layer_turf Vector turf (sf polygons) summarised. Coordinate reference system similar points. radii_turf Numeric vector radii (units projected coordinate reference system, e.g., metres) summarise layer_turf. Default values model supplied (metres). layer_natveg Vector natural vegetation (sf polygons) summarised. Coordinate reference system similar points. radii_natveg Numeric vector radii (units projected coordinate reference system, e.g., metres) summarise layer_natveg. Default values model supplied (metres). layer_water Vector water (sf polygons) summarised. Coordinate reference system similar points. radii_water Numeric vector radii (units projected coordinate reference system, e.g., metres) summarise layer_water. Default values model supplied (metres). layer_buildings Vector buildings (sf polygons) summarised. Coordinate reference system similar points. radii_buildings Numeric vector radii (units projected coordinate reference system, e.g., metres) summarise layer_buildings. Default values model supplied (metres). buildings_levels character. Specify column name number levels within layer_buildings (provided). Defaults 'levels'. Column data numeric. layer_roads Vector roads (sf lines) summarised. Coordinate reference system similar points. radii_roads Numeric vector radii (units projected coordinate reference system, e.g., metres) summarise layer_roads. Default values model supplied (metres). roads_lanes character. Specify column name number lanes within layer_roads (provided). Defaults 'lanes'. Column data numeric.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/summarise_landscape_perpt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise landscape variables per point based on supplied data — summarise_landscape_perpt","text":"dataframe points appended columns summarising various landscape layers provided (respective radii).","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/surveys.html","id":null,"dir":"Reference","previous_headings":"","what":"Survey info data to accompany fauna observations — surveys","title":"Survey info data to accompany fauna observations — surveys","text":"Survey information data fauna point surveys conducted six Singapore residential towns 2016 2021. Time weather information surveys present observation data set recorded .","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/surveys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Survey info data to accompany fauna observations — surveys","text":"","code":"data(surveys)"},{"path":"https://ecological-cities.github.io/biodivercity/reference/surveys.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Survey info data to accompany fauna observations — surveys","text":"object class 'list'.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/surveys.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Survey info data to accompany fauna observations — surveys","text":"TBC","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/surveys.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Survey info data to accompany fauna observations — surveys","text":"TBC","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/surveys.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Survey info data to accompany fauna observations — surveys","text":"","code":"data(surveys)"},{"path":"https://ecological-cities.github.io/biodivercity/reference/threshold_otsu.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate pixel value threshold of an image via Otsu's method — threshold_otsu","title":"Calculate pixel value threshold of an image via Otsu's method — threshold_otsu","text":"Calculate Otsu's threshold value separates greyscale image two distinct classes. threshold value determined minimizing combined intra-class variance. library(terra) library(stars) used perform --memory operations.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/threshold_otsu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate pixel value threshold of an image via Otsu's method — threshold_otsu","text":"","code":"threshold_otsu(x = NULL, range = NULL, levels = 256, ...)"},{"path":"https://ecological-cities.github.io/biodivercity/reference/threshold_otsu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate pixel value threshold of an image via Otsu's method — threshold_otsu","text":"x filename imported using terra::rast(), SpatRaster object. range Numeric vector (length 2) specifying histogram range used thresholding. Defaults minimum maximum values imported raster. levels Number histogram bins used calculate threshold value, typically based bit depth image (e.g. 8-bit image 2^8 = 256 levels). Defaults 256. ... Optional arguments passed terra::rast() importing image.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/threshold_otsu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate pixel value threshold of an image via Otsu's method — threshold_otsu","text":"Otsu's threshold value image (single number), can subsequently used image classification (e.g. convert greyscale binary image).","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/threshold_otsu.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate pixel value threshold of an image via Otsu's method — threshold_otsu","text":"Otsu, N. (1979). threshold selection method gray-level histograms. IEEE transactions systems, man, cybernetics, 9(1), 62-66. Pau, G., Fuchs, F., Sklyar, O., Boutros, M., & Huber, W. (2010). EBImage—R package image processing applications cellular phenotypes. Bioinformatics, 26(7), 979-981.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers — tidyeval","title":"Tidy eval helpers — tidyeval","text":"sym() creates symbol string syms() creates list symbols character vector. enquo() enquos() delay execution one several function arguments. enquo() returns single quoted expression, like blueprint delayed computation. enquos() returns list quoted expressions. expr() quotes new expression locally. mostly useful build new expressions around arguments captured enquo() enquos(): expr(mean(!!enquo(arg), na.rm = TRUE)). as_name() transforms quoted variable name string. Supplying something else quoted variable name error. unlike as_label() also returns single string supports kind R object input, including quoted function calls vectors. purpose summarise object single label. label often suitable default name. know quoted expression contains (instance expressions captured enquo() variable name, call function, unquoted constant), use as_label(). know quoted simple variable name, like enforce , use as_name(). learn tidy eval use tools, visit https://tidyeval.tidyverse.org Metaprogramming section Advanced R.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/news/index.html","id":"biodivercity-development-version","dir":"Changelog","previous_headings":"","what":"biodivercity (development version)","title":"biodivercity (development version)","text":"Added NEWS.md file track changes package.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/news/index.html","id":"key-features-development-version","dir":"Changelog","previous_headings":"","what":"Key features","title":"biodivercity (development version)","text":"add..","code":""}]
