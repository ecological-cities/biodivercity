[{"path":"https://ecological-cities.github.io/biodivercity/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to biodivercity","title":"Contributing to biodivercity","text":"outlines propose change biodivercity. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to biodivercity","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to biodivercity","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://ecological-cities.github.io/biodivercity/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to biodivercity","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"ecological-cities/biodivercity\", fork = TRUE). Install development dependences devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to biodivercity","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://ecological-cities.github.io/biodivercity/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"biodivercity - Biodiversity indices for city landscapes Copyright (C) 2022  biodivercity authors and contributors  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. Copyright (C) 2022  biodivercity authors and contributors This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://ecological-cities.github.io/biodivercity/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with biodivercity","title":"Getting help with biodivercity","text":"Thanks using biodivercity! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with biodivercity","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with biodivercity","text":"Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with biodivercity","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"https://ecological-cities.github.io/biodivercity/articles/apply-models.html","id":"local-alpha-diversity","dir":"Articles","previous_headings":"","what":"1. Local (Alpha) diversity","title":"Apply Models","text":"First, load required packages: article, make spatial predictions across Punggol (PG) area Singapore, taken example dataset sampling_areas. Next, load model object extract landscape predictors within best models. example, largest radius variables within models 400 metres. make spatial predictions, target area broken many smaller points (pixels), landscape data summarised predictions made. First, use function generate_grid() generate grid target area. Figure: Visualisation function generate_grid(). pixel resolution grid can customised argument pixelsize_m, specify 100 metres example. optional argument innerbuffer_m limits spatial predictions smaller area within target landscape. useful, example, model requires broad-scale landscape data make predictions, available landscape data extend beyond target area. Hence, avoid inaccurate predictions result areas without landscape data, distance value argument correspond largest buffer radius present model variables. grid point, summarise predictors land cover OpenStreetMap data using functions calc_specific_lsm() calc_specific_osm(), respectively. predictor summarised within relevant distance buffer (radius) grid point, denoted prefix r<value>m. manually generated landscape data used present within best models, function calc_manual() can used summarise landscape component; see vignette(\"process-landscape\") full list landscape vectors may summarised. Finally, use function predict_heatmap() predict number bird species (species richness) across grid spatial points, based predictor variables summarised grid_points. model object(s) bestmodels (lme4::glmer() objects) recipe_birds (data pre-processing workflow recipes::recipe() object) used make predictions point. Ensure argument pixelsize_m similar value used generate_grid(). continuous raster may visualised heat map:","code":"library(\"biodivercity\") library(\"dplyr\") # to process/wrangle data library(\"tmap\") # for visualisation # load polygon of punggol boundaries data(sampling_areas) punggol <- sampling_areas %>%    filter(area == \"PG\")  # get landscape data ready filepath <- system.file(\"extdata\", \"osm_data.Rdata\", package = \"biodivercity\") load(filepath)  ndvi_mosaic <-    system.file(\"extdata\", \"ndvi_mosaic.tif\", package=\"biodivercity\") %>%    terra::rast() veg_classified <- classify_image_binary(ndvi_mosaic, threshold = \"otsu\")  # visualise  tmap_mode(\"view\") tm_basemap(c(\"CartoDB.Positron\")) +   tm_shape(punggol) + tm_borders() +   tm_shape(buildings) + tm_polygons(col = \"levels\") +   tm_shape(roads) + tm_lines(col = \"lanes\", palette = \"YlOrRd\")+   tm_shape(veg_classified) +     tm_raster(style = \"cat\",             palette = c(\"grey\", \"darkgreen\")) filepath <- system.file(\"extdata\", \"apply-models_alpha-diversity.Rdata\", package=\"biodivercity\") load(filepath)  # landscape predictors predictors <- colnames(coef(bestmodels_info)[,-1]) predictors ## [1] \"r200m_lsm_veg_gyrate_mn\"    \"r200m_osm_buildingVol_m3\"   ## [3] \"r200m_osm_laneDensity\"      \"r200m_lsm_veg_area_mn\"      ## [5] \"r200m_lsm_veg_ed\"           \"r400m_lsm_veg_ed\"           ## [7] \"r400m_osm_buildingFA_ratio\" \"r200m_lsm_veg_lpi\"          ## [9] \"r200m_osm_buildingFA_ratio\" # get the max radius among all predictor variables max_radius <- predictors %>%    stringr::str_extract(\"(?<=^r)\\\\d+\") %>%  # extract buffer radii   as.numeric() %>%    max(na.rm = TRUE) max_radius ## [1] 400 grid_points <- generate_grid(target_areas = punggol,                               pixelsize_m = 100,                              innerbuffer_m = max_radius) %>%   rownames_to_column(\"point_id\") # add unique identifier  grid_points # geometry column has been added ## Simple feature collection with 461 features and 2 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: 377114.5 ymin: 153973.6 xmax: 380414.5 ymax: 156673.6 ## Projected CRS: WGS 84 / UTM zone 48N ## First 10 features: ##    point_id area                  geometry ## 1         1   PG POINT (379114.5 153973.6) ## 2         2   PG POINT (379014.5 154073.6) ## 3         3   PG POINT (379114.5 154073.6) ## 4         4   PG POINT (379214.5 154073.6) ## 5         5   PG POINT (378914.5 154173.6) ## 6         6   PG POINT (379014.5 154173.6) ## 7         7   PG POINT (379114.5 154173.6) ## 8         8   PG POINT (379214.5 154173.6) ## 9         9   PG POINT (379314.5 154173.6) ## 10       10   PG POINT (378914.5 154273.6) # vegetation cover predictors_veg <- stringr::str_subset(predictors, \"lsm_veg_.*$\") results_veg <-    calc_specific_lsm(raster = veg_classified,                     predictors_lsm = predictors_veg,                     class_names = c(\"veg\"),                     class_values = c(1),                     points = grid_points)  # osm buildings predictors_buildings <- stringr::str_subset(predictors, \"osm_building.*$\") results_buildings <-       calc_specific_osm(vector = buildings,                         predictors_osm = predictors_buildings,                         building_levels = \"levels\",                         building_height = \"height\",                         points = grid_points)  # osm roads predictors_roads <- stringr::str_subset(predictors, \"osm_lane.*$\") results_roads <-       calc_specific_osm(vector = roads,                         predictors_osm = predictors_roads,                         road_lanes = \"lanes\",                         points = grid_points)  # combine results and overwrite 'grid_points' variable  grid_points <- results_veg %>%    full_join(results_buildings %>% st_set_geometry(NULL)) %>%    full_join(results_roads %>% st_set_geometry(NULL)) grid_points ## Simple feature collection with 461 features and 11 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: 377114.5 ymin: 153973.6 xmax: 380414.5 ymax: 156673.6 ## Projected CRS: WGS 84 / UTM zone 48N ## First 10 features: ##    point_id area r200m_lsm_veg_area_mn r200m_lsm_veg_ed r400m_lsm_veg_ed ## 1         1   PG             0.1783333         304.3825         287.8758 ## 2         2   PG             0.3790909         273.3068         320.5256 ## 3         3   PG             0.2118750         292.4303         310.9695 ## 4         4   PG             0.1394737         278.8845         295.8391 ## 5         5   PG             0.2653846         307.5697         329.2853 ## 6         6   PG             0.3911111         267.7291         331.4752 ## 7         7   PG             0.4800000         280.4781         321.9192 ## 8         8   PG             0.2733333         248.6056         308.9787 ## 9         9   PG             0.1822222         306.7729         293.2510 ## 10       10   PG             0.2193333         332.2709         335.4569 ##    r200m_lsm_veg_gyrate_mn r200m_lsm_veg_lpi r200m_osm_buildingVol_m3 ## 1                 18.12023         10.677291                        0 ## 2                 25.96049         18.964143                        0 ## 3                 18.32125         14.501992                        0 ## 4                 12.40779         13.386454                        0 ## 5                 18.90708         12.191235                        0 ## 6                 23.45344         18.884462                        0 ## 7                 25.94185         24.302789                        0 ## 8                 16.08908         18.406375                        0 ## 9                 15.67557         13.227092                        0 ## 10                19.89673          9.800797                        0 ##    r400m_osm_buildingFA_ratio r200m_osm_buildingFA_ratio r200m_osm_laneDensity ## 1                    1.682808                   1.623362            0.04645401 ## 2                    2.233960                   2.700053            0.02081570 ## 3                    1.946201                   2.615702            0.02345348 ## 4                    1.714228                   2.362860            0.03613221 ## 5                    2.438732                   3.239166            0.03077676 ## 6                    2.411402                   3.061500            0.02277422 ## 7                    2.194357                   3.041585            0.01304752 ## 8                    1.861286                   3.370845            0.01692167 ## 9                    1.695405                   2.670577            0.02997526 ## 10                   2.603705                   3.244310            0.03184894 ##                     geometry ## 1  POINT (379114.5 153973.6) ## 2  POINT (379014.5 154073.6) ## 3  POINT (379114.5 154073.6) ## 4  POINT (379214.5 154073.6) ## 5  POINT (378914.5 154173.6) ## 6  POINT (379014.5 154173.6) ## 7  POINT (379114.5 154173.6) ## 8  POINT (379214.5 154173.6) ## 9  POINT (379314.5 154173.6) ## 10 POINT (378914.5 154273.6) bird_heatmap <- predict_heatmap(models = bestmodels,                                  recipe_data = recipe_birds,                                 points_topredict = grid_points,                                  pixelsize_m = 100) tmap_options(max.raster = c(view = 1e8)) # increase max resolution to be visualised  tm_basemap(c(\"CartoDB.Positron\", \"OpenStreetMap\")) +   tm_shape(bird_heatmap, raster.downsample = FALSE) +   tm_raster(title = \"Number of bird species\",             style = \"pretty\",             n = 8,             palette = \"YlOrRd\",             alpha = 0.6)"},{"path":"https://ecological-cities.github.io/biodivercity/articles/apply-models.html","id":"community-beta-diversity","dir":"Articles","previous_headings":"","what":"2. Community (Beta) diversity","title":"Apply Models","text":"works…","code":""},{"path":"https://ecological-cities.github.io/biodivercity/articles/biodivercity.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Get started with biodivercity","text":"Many frameworks assess ‘biodiversity’ proposed research practice. offer holistic view, including parts ecosystem (e.g., climate, soil, air, water, landscape structure, genetic variation) may contribute ‘total biodiversity’ within given region. However, conceptualisations ‘biodiversity’ may include components low causal proximity (e.g. indirect effect landscape species diversity), may difficult measure wide spatial scales (e.g. genetic diversity, plant species diversity). decision-making, unnecessary complexity may also risk contributing mistrust ignorance overall assessment. biodivercity R package assessing diversity animal species urban areas. provides way directly assess habitat value urban landscapes, based empirical effect chosen animal groups (e.g., taxa birds, butterflies, odonates, amphibians, etc.). key features include: Step--step protocols random point sampling animal group within areas interest Generate data summaries animals surveyed, multiple levels granularity (e.g., areas, periods, animal groups, species) Download process landscape data within areas interest (e.g., satellite imagery, OpenStreetMap data) Convert vector data generated future design scenarios formats suitable model predictions Build validate predictive models assess Alpha (local), Beta (community) Gamma (total) diversity animal group Use models make pixel-based spatial predictions across new areas future Summarise predictions benchmark compare biodiversity ‘performance’ planning units across city  Figure: Broad overview data workflow chosen animal group","code":""},{"path":"https://ecological-cities.github.io/biodivercity/articles/biodivercity.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Get started with biodivercity","text":"Install development version biodivercity GitHub: Load package:","code":"devtools::install_github(\"ecological-cities/biodivercity\", ref = \"main\") library(biodivercity)"},{"path":"https://ecological-cities.github.io/biodivercity/articles/biodivercity.html","id":"data-sources","dir":"Articles","previous_headings":"","what":"Data sources","title":"Get started with biodivercity","text":"Development Biodiversity Index Residential Towns using Biodiversity Field Surveys, 2016–2022. Ministry National Development Research Fund (MNDRF) Grant. Awarded National University Singapore Singapore Housing & Development Board.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/articles/biodivercity.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Get started with biodivercity","text":"Baker, D. J., Maclean, . M., Goodall, M., & Gaston, K. J. (2021). Species distribution modelling needed support ecological impact assessments. Journal Applied Ecology, 58(1), 21-26. Soto-Navarro, C. ., Harfoot, M., Hill, S. L. L., Campbell, J., Mora, F., Campos, C., … & Burgess, N. D. (2021). Towards multidimensional biodiversity index national application. Nature Sustainability, 1-10.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/articles/build-models.html","id":"local-alpha-diversity","dir":"Articles","previous_headings":"","what":"1. Local (Alpha) diversity","title":"Build Models","text":"chosen animal group, local (Alpha) diversity represented number species recorded sampling point locations (.e., species density). response variable specified within GLMM number (count) species. First, load necessary packages: Load example datasets birds (animal group ‘Aves’) recorded sampling points across Singapore. birds dataframe containing number species aggregated across multiple surveys (.e., species richness; column ‘sprich’), landscape dataframe containing landscape predictors summarised within specified buffer radii. See data(animal_surveys) data(points_landscape) details animal landscape data, respectively. Pivot landscape_data wide format, prefix r<radius>m_ (representing radius size) appended column names predictors: fit model GLMM, function MuMIn::dredge() used. function includes customisation options; instance, subset argument allows user exclude certain combinations variables within fitted model (.e., apply constraints possible models may built). following example, allow landscape predictor summarised within multiple buffer radii present model. Next, fit global (maximal) model null model, order calculate difference Akaike Information Criterion (AIC) value within function MuMIn::dredge(). example data, ‘town’ specified random effect. argument ‘family’ specified \"poisson\", since response variable count data. See function lme4::glmer() details information arguments. Automated model selection performed using function MuMIn::dredge(). Models ranked based AICc value (AIC adjusted small sample sizes). Model constraints specified argument subset. avoid long runtime demonstration, also limit number predictor variables model four (argument m.lim). resulting object contains model selection table, row representing model fit. arranged ascending order, based AIC value (lower AIC value represents ‘better’ model). summary top models values ΔAIC < 2 can viewed: Summary best models ranked based automated model selection MuMIn::dredge() (ΔAIC < 2). can also visualise importance (based sum--weights) effect direction (based coefficient value) variable within top models:  Finally, can extract models recipes::recipe() objects future use:","code":"library(\"biodivercity\") library(\"tidyverse\") # to process/wrangle data library(\"sf\") # to process landscape data library(\"tmap\") # spatial visualisation  library(\"lme4\") # mixed-effects modelling library(\"MuMIn\") # model selection & averaging filepath <- system.file(\"extdata\", \"build-models_alpha-diversity.Rdata\", package=\"biodivercity\") load(filepath) landscape <- landscape %>%    pivot_longer(cols = c(starts_with(\"osm_\"), starts_with(\"lsm_\")),                names_to = 'metric') %>%    pivot_wider(id_cols = c(\"town\", \"point_id\"),               names_from = c(\"radius_m\", \"metric\"),                values_from = \"value\",               names_glue = \"r{radius_m}m_{metric}\")  # combine bird and landscape data, then then scale/center variables birds <- birds %>%    inner_join(landscape, by = c(\"town\", \"point_id\"))  birds_scaled <- birds %>%    mutate(across(.cols = where(is.numeric) & !sprich, scale))  head(birds_scaled) # view combined data ## # A tibble: 6 × 20 ##   town  priority point…¹ sprich r200m_…² r200m…³ r200m…⁴ r200m…⁵ r200m…⁶ r200m…⁷ ##   <chr> <chr>    <chr>    <int>    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> ## 1 PG    Aves     PGT15       14  0.00303  0.575    0.694  -0.497  -0.559   0.456 ## 2 PG    Aves     PGT14       21  0.852    0.344    1.72   -0.485  -0.496   0.621 ## 3 PG    Aves     PGT6        21  1.66     0.997    2.71   -0.511  -0.544   1.01  ## 4 QT    Aves     QTNa14…     34 -1.17    -0.0279  -0.740   3.54    3.40   -0.859 ## 5 QT    Aves     QTNb1a…     40 -1.35    -0.948   -0.799   1.60    1.31   -1.97  ## 6 PG    Aves     PGT7        18  1.33     0.801    2.52   -0.472  -0.490   0.440 ## # … with 10 more variables: r200m_lsm_veg_lpi <dbl[,1]>, ## #   r200m_lsm_veg_pland <dbl[,1]>, r400m_osm_buildingVol_m3 <dbl[,1]>, ## #   r400m_osm_laneDensity <dbl[,1]>, r400m_osm_buildingFA_ratio <dbl[,1]>, ## #   r400m_lsm_veg_area_mn <dbl[,1]>, r400m_lsm_veg_gyrate_mn <dbl[,1]>, ## #   r400m_lsm_veg_ed <dbl[,1]>, r400m_lsm_veg_lpi <dbl[,1]>, ## #   r400m_lsm_veg_pland <dbl[,1]>, and abbreviated variable names ¹​point_id, ## #   ²​r200m_osm_buildingVol_m3[,1], ³​r200m_osm_laneDensity[,1], … predictors <- grep(\"^r[0-9]+m_\",  colnames(birds_scaled), value = TRUE) # get predictor names  # get rows with same predictors but different radii var_comb <- combn(predictors, 2) %>% # unique combinations   t() %>%    as.data.frame() %>%  # separate radii & predictors   separate(V1, c(\"V1_radius\", \"V1_predictor\"),            sep = \"(?<=[0-9])m_(?=[A-Za-z]*)\", remove = FALSE) %>%    separate(V2, c(\"V2_radius\", \"V2_predictor\"),            sep = \"(?<=[0-9])m_(?=[A-Za-z]*)\", remove = FALSE) %>%   rowwise() %>%    mutate(similar = grepl(V1_predictor, V2_predictor)) %>%    filter(isTRUE(similar))  # create object to be supplied to function argument subset_vect <- paste(var_comb$V1, \"&\", var_comb$V2) subset_exp <- parse(text = paste0(\"!(\", paste(subset_vect, collapse = \") & !(\"), \")\")) # function argument requires an expression model_global <-    glmer(paste(\"sprich\", \"~\", paste(predictors, collapse = \" + \"),                \"+ (1|town) \"),         family = \"poisson\",         na.action = \"na.fail\",         control = lme4::glmerControl(optimizer = \"bobyqa\"),         data = birds_scaled)  model_null <-    glmer(sprich ~ 1 + (1|town), family = \"poisson\", data = birds_scaled) model_glm <- dredge(model_global,                     subset= subset_exp,                     m.lim=c(NA,4), # max of 4 variables                     rank=\"AICc\") bestmodels_info <- subset(model_glm,                           delta < 2,                           recalc.weights=FALSE)  knitr::kable(bestmodels_info, caption = glue::glue(\"**Summary of best models ranked based on automated model selection from `MuMIn::dredge()` (ΔAIC < 2).**\")) %>%   kableExtra::kable_styling(\"striped\") %>% kableExtra::scroll_box(width = \"100%\", height = \"300px\") # average the effect of each predictor effects <- data.frame(coef(bestmodels_info)[,-1]) %>%    summarise(across(everything(), ~ mean(.x, na.rm = TRUE))) %>%    pivot_longer(everything(), names_to = \"var\") %>%    mutate(effect = ifelse(value > 0, \"Positive\", \"Negative\"))  # get importance of each predictor importances <- data.frame(MuMIn::sw(bestmodels_info)) %>%    rename(imp = MuMIn..sw.bestmodels_info.) %>%    rownames_to_column(\"var\") %>%    left_join(effects, by = \"var\") %>% # join with effects   mutate(effect = ifelse(is.na(effect), \"Mixed (factor)\", effect)) %>%   mutate(effect = factor(effect, levels = c(\"Positive\", \"Negative\", \"Mixed (factor)\")))  # plot ggplot(data=importances, aes(x = imp, y = reorder(var, imp),                       fill = effect)) +    geom_bar(stat = \"identity\") +   labs(x = \"Sum of weights\", y = \"Variables\") +   scale_fill_manual(values = c(\"#4daf4a\", \"#e41a1c\", \"#377eb8\"),                     name = \"Effect\") # get list of best models bestmodels <- MuMIn::get.models(bestmodels_info, subset = TRUE)  # create recipes object only with predictors within best models predictors_best <- colnames(coef(bestmodels_info)[,-1])  birds <- birds %>% # original unscaled dataset   dplyr::select(sprich, town, all_of(predictors_best)) # remove unnecessary columns  recipe_birds <- recipes::recipe(birds) %>%    recipes::update_role(sprich, new_role = \"outcome\") %>%   recipes::update_role(town, new_role = \"id\") %>%   recipes::update_role_requirements(\"id\", bake = FALSE) %>%   recipes::step_normalize(all_of(predictors_best)) %>%    recipes::prep()"},{"path":"https://ecological-cities.github.io/biodivercity/articles/build-models.html","id":"community-beta-diversity","dir":"Articles","previous_headings":"","what":"2. Community (Beta) diversity","title":"Build Models","text":"Partial RDA models used model relationship animal communities landscape predictors considering also inherent spatial structure animal communities. Similarly, variable selection random forest performed landscape variables prior beta model building. following sections, example variables selected using randomForestSRC MultivariateRandomForest packages. first round variable selection, landscape predictors summarised Principal Component Analysis (PCA) axes spatial variation quantified using Principle Coordinates Neighbourhood Matrices (PCNM). First, load additional package vegan beta diversity model building: , bird species density landscape data sampling points across six areas (towns) Singapore analysed example. example dataset beta_model_data, animal landscape datasets processed previous two articles combined. variable selection output using random forest also loaded beta_model_variables inform principal component analysis (PCA) selected landscape variables later. Next, process fauna datasets acceptable formats analyses. presence/absence community matrix created observations summarise total species incidence. birds dataset used filter bird_com, coordinate information added PCNM analysis later. Using variables selected random forest, principal component analysis (PCA) performed summarise landscape predictors. PCA axes eigenvalues greater one retained. step selects PCA axes account variance original variables . Calculate PCNM vectors using Vegan::pcnm fit animal community matrix PCNM vectors using Vegan::rda. control type error testing significant predictors, significant PCNM vectors first selected using backwards, stepwise elimination method vectors significance level smaller chosen significance level 0.05 (Peres-Neto & Legendre, 2010). performed using Vegan::ordistep. Perform partial RDA performed selected PCA axes candidate explanatory variables significant PCNM vectors covariates. Perform Vegan::ordistep select significant PCA axes accounting effects covariables model PCA axes significance level smaller chosen significance level 0.05. final RDA model fitted significant PC axes PCNM vectors. predictive Beta-diversity model also requires information average probability species occurring across points. PCA axes, PCNM vectors, final RDA model probability species occurrence saved applied subsequent apply model section.","code":"library(\"vegan\") # #Before package release: # load(\"../inst/extdata/beta_model_data.Rdata\") # load(\"../inst/extdata/beta_model_variables.Rdata\") # load(\"../data/animal_observations.rda\") # load(\"../data/sampling_points.rda\")  # Afrer package release: filepath <- system.file(\"extdata\", \"beta_model_data.Rdata\", package=\"biodivercity\") #summarised landscape information per point load(filepath)  filepath <- system.file(\"extdata\", \"beta_model_variables.Rdata\", package=\"biodivercity\") #variables selected from random forest load(filepath)  data(\"animal_observations\") data(\"sampling_points\")  sampling_points <- sampling_points %>%    filter(period == 1) rmspp <- check_taxongrps(animal_observations, level = \"point\")   animal_observations <- animal_observations %>%   anti_join(rmspp, by = c(\"species\" = \"name\",\"point_id\", \"period\")) %>%    mutate(period = as.character(period)) bird_com <- animal_observations %>%    filter(taxon == \"Aves\") %>%   group_by(period, point_id, species) %>%   summarise(n = sum(abundance)) %>%   group_by(point_id, period) %>%   pivot_wider(names_from = species, values_from = n) %>%   replace(is.na(.),0) %>%   ungroup()  %>%   semi_join(beta_model_data, by = c(\"point_id\", \"period\" = \"round\")) %>% # filtering for the same period   as.data.frame(.) %>%    dplyr::select(-period, -point_id)  bird_com <- bird_com %>%    mutate(across(.cols = everything(), ~ case_when(. > 0 ~ 1,                                                   . == 0 ~ 0))) %>%    select(which(colMeans(.)>0))    rm(rmspp) beta_model_data <- beta_model_data %>%    select(!c(town, round, priority, sprich)) %>% #keep only point_id and landscape variables   arrange(point_id) %>% #sort alphabetically      #adding coordinate information   mutate(X = {(sampling_points$geometry[match(beta_model_data$point_id,sampling_points$point_id)] %>% sf::st_coordinates())[,2]},           .after = point_id) %>%    mutate(Y = {(sampling_points$geometry[match(beta_model_data$point_id,sampling_points$point_id)] %>% sf::st_coordinates())[,1]},          .after = X) pca_birds <- beta_model_data %>%    dplyr::select(any_of(beta_model_variables$var)) %>% #select impt variables from RF   prcomp(.,scale.=TRUE) #conduct pca  pca_selected_birds <- pca_birds$x[, which(pca_birds$sdev > 1)]  # biplot(pca_birds, choices=c(1,2)) plots.xy <- cbind(beta_model_data$X, beta_model_data$Y) raw_pcnm_birds <- pcnm(dist(plots.xy))  pcnm_scores_birds <-data.frame(scores(raw_pcnm_birds))  set.seed(123)  birds.pcnm.all <- rda(bird_com~., data = pcnm_scores_birds) birds.pcnm.sub <- ordistep(birds.pcnm.all, direction = \"backward\", pout = 0.075) ##  ## Start: bird_com ~ PCNM1 + PCNM2 + PCNM3 + PCNM4 + PCNM5 + PCNM6 + PCNM7 +      PCNM8 + PCNM9 + PCNM10 + PCNM11 + PCNM12 + PCNM13 + PCNM14 +      PCNM15 + PCNM16 + PCNM17 + PCNM18 + PCNM19 + PCNM20 + PCNM21 +      PCNM22 + PCNM23 + PCNM24 + PCNM25 + PCNM26 + PCNM27 + PCNM28 +      PCNM29  ##  ##          Df    AIC      F Pr(>F)    ## - PCNM22  1 250.76 0.5961  0.950    ## - PCNM29  1 250.86 0.6666  0.870    ## - PCNM9   1 251.02 0.7750  0.850    ## - PCNM28  1 250.94 0.7179  0.845    ## - PCNM15  1 250.94 0.7178  0.840    ## - PCNM16  1 250.92 0.7088  0.805    ## - PCNM17  1 251.07 0.8135  0.735    ## - PCNM1   1 251.17 0.8843  0.620    ## - PCNM19  1 251.23 0.9275  0.620    ## - PCNM25  1 251.20 0.9051  0.570    ## - PCNM7   1 251.25 0.9442  0.525    ## - PCNM8   1 251.31 0.9810  0.480    ## - PCNM14  1 251.32 0.9911  0.450    ## - PCNM18  1 251.44 1.0791  0.335    ## - PCNM6   1 251.44 1.0762  0.280    ## - PCNM12  1 251.47 1.0973  0.275    ## - PCNM4   1 251.53 1.1410  0.225    ## - PCNM13  1 251.59 1.1800  0.210    ## - PCNM2   1 251.57 1.1654  0.200    ## - PCNM27  1 251.72 1.2749  0.185    ## - PCNM26  1 251.80 1.3321  0.180    ## - PCNM23  1 251.71 1.2707  0.160    ## - PCNM21  1 251.82 1.3453  0.145    ## - PCNM20  1 251.97 1.4527  0.110    ## - PCNM10  1 251.93 1.4273  0.095 .  ## - PCNM5   1 251.88 1.3921  0.090 .  ## - PCNM11  1 252.66 1.9510  0.010 ** ## - PCNM24  1 252.87 2.0987  0.005 ** ## - PCNM3   1 253.00 2.1952  0.005 ** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Step: bird_com ~ PCNM1 + PCNM2 + PCNM3 + PCNM4 + PCNM5 + PCNM6 + PCNM7 +      PCNM8 + PCNM9 + PCNM10 + PCNM11 + PCNM12 + PCNM13 + PCNM14 +      PCNM15 + PCNM16 + PCNM17 + PCNM18 + PCNM19 + PCNM20 + PCNM21 +      PCNM23 + PCNM24 + PCNM25 + PCNM26 + PCNM27 + PCNM28 + PCNM29  ##  ##          Df    AIC      F Pr(>F)    ## - PCNM29  1 249.70 0.6704  0.900    ## - PCNM15  1 249.77 0.7219  0.870    ## - PCNM16  1 249.76 0.7128  0.845    ## - PCNM28  1 249.78 0.7220  0.830    ## - PCNM9   1 249.85 0.7794  0.830    ## - PCNM17  1 249.91 0.8181  0.685    ## - PCNM1   1 250.01 0.8894  0.575    ## - PCNM19  1 250.07 0.9328  0.575    ## - PCNM25  1 250.04 0.9103  0.535    ## - PCNM8   1 250.14 0.9866  0.535    ## - PCNM14  1 250.16 0.9968  0.485    ## - PCNM7   1 250.09 0.9496  0.450    ## - PCNM6   1 250.28 1.0824  0.345    ## - PCNM18  1 250.28 1.0853  0.330    ## - PCNM12  1 250.31 1.1036  0.305    ## - PCNM4   1 250.37 1.1475  0.265    ## - PCNM13  1 250.42 1.1867  0.240    ## - PCNM2   1 250.40 1.1720  0.210    ## - PCNM27  1 250.55 1.2822  0.170    ## - PCNM23  1 250.55 1.2779  0.145    ## - PCNM26  1 250.63 1.3397  0.145    ## - PCNM21  1 250.65 1.3530  0.095 .  ## - PCNM5   1 250.72 1.4001  0.095 .  ## - PCNM20  1 250.80 1.4610  0.080 .  ## - PCNM10  1 250.76 1.4355  0.075 .  ## - PCNM11  1 251.49 1.9621  0.015 *  ## - PCNM24  1 251.69 2.1107  0.005 ** ## - PCNM3   1 251.82 2.2077  0.005 ** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Step: bird_com ~ PCNM1 + PCNM2 + PCNM3 + PCNM4 + PCNM5 + PCNM6 + PCNM7 +      PCNM8 + PCNM9 + PCNM10 + PCNM11 + PCNM12 + PCNM13 + PCNM14 +      PCNM15 + PCNM16 + PCNM17 + PCNM18 + PCNM19 + PCNM20 + PCNM21 +      PCNM23 + PCNM24 + PCNM25 + PCNM26 + PCNM27 + PCNM28  ##  ##          Df    AIC      F Pr(>F)    ## - PCNM16  1 248.69 0.7161  0.850    ## - PCNM15  1 248.71 0.7253  0.835    ## - PCNM28  1 248.71 0.7254  0.805    ## - PCNM9   1 248.78 0.7830  0.775    ## - PCNM17  1 248.84 0.8219  0.695    ## - PCNM19  1 249.00 0.9371  0.575    ## - PCNM25  1 248.97 0.9145  0.560    ## - PCNM7   1 249.02 0.9540  0.545    ## - PCNM1   1 248.94 0.8934  0.525    ## - PCNM8   1 249.07 0.9912  0.490    ## - PCNM14  1 249.08 1.0013  0.425    ## - PCNM18  1 249.21 1.0903  0.340    ## - PCNM6   1 249.20 1.0873  0.310    ## - PCNM12  1 249.23 1.1087  0.295    ## - PCNM4   1 249.29 1.1528  0.220    ## - PCNM13  1 249.34 1.1922  0.220    ## - PCNM2   1 249.32 1.1774  0.205    ## - PCNM23  1 249.47 1.2838  0.165    ## - PCNM27  1 249.48 1.2881  0.155    ## - PCNM26  1 249.56 1.3458  0.120    ## - PCNM20  1 249.72 1.4678  0.115    ## - PCNM21  1 249.57 1.3592  0.105    ## - PCNM5   1 249.64 1.4065  0.085 .  ## - PCNM10  1 249.69 1.4421  0.070 .  ## - PCNM11  1 250.40 1.9712  0.005 ** ## - PCNM24  1 250.60 2.1204  0.005 ** ## - PCNM3   1 250.74 2.2179  0.005 ** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Step: bird_com ~ PCNM1 + PCNM2 + PCNM3 + PCNM4 + PCNM5 + PCNM6 + PCNM7 +      PCNM8 + PCNM9 + PCNM10 + PCNM11 + PCNM12 + PCNM13 + PCNM14 +      PCNM15 + PCNM17 + PCNM18 + PCNM19 + PCNM20 + PCNM21 + PCNM23 +      PCNM24 + PCNM25 + PCNM26 + PCNM27 + PCNM28  ##  ##          Df    AIC      F Pr(>F)    ## - PCNM28  1 247.69 0.7282  0.850    ## - PCNM15  1 247.69 0.7281  0.840    ## - PCNM9   1 247.76 0.7861  0.790    ## - PCNM17  1 247.82 0.8251  0.665    ## - PCNM1   1 247.91 0.8969  0.620    ## - PCNM19  1 247.97 0.9407  0.570    ## - PCNM25  1 247.94 0.9180  0.550    ## - PCNM7   1 248.00 0.9577  0.465    ## - PCNM8   1 248.05 0.9950  0.435    ## - PCNM14  1 248.06 1.0053  0.435    ## - PCNM6   1 248.18 1.0916  0.340    ## - PCNM12  1 248.21 1.1130  0.330    ## - PCNM18  1 248.18 1.0945  0.320    ## - PCNM23  1 248.44 1.2888  0.230    ## - PCNM4   1 248.26 1.1573  0.225    ## - PCNM2   1 248.30 1.1820  0.190    ## - PCNM13  1 248.32 1.1969  0.170    ## - PCNM27  1 248.45 1.2931  0.155    ## - PCNM21  1 248.54 1.3645  0.135    ## - PCNM26  1 248.53 1.3511  0.125    ## - PCNM20  1 248.69 1.4735  0.110    ## - PCNM5   1 248.61 1.4120  0.095 .  ## - PCNM10  1 248.66 1.4477  0.070 .  ## - PCNM11  1 249.37 1.9789  0.005 ** ## - PCNM24  1 249.57 2.1286  0.005 ** ## - PCNM3   1 249.70 2.2265  0.005 ** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Step: bird_com ~ PCNM1 + PCNM2 + PCNM3 + PCNM4 + PCNM5 + PCNM6 + PCNM7 +      PCNM8 + PCNM9 + PCNM10 + PCNM11 + PCNM12 + PCNM13 + PCNM14 +      PCNM15 + PCNM17 + PCNM18 + PCNM19 + PCNM20 + PCNM21 + PCNM23 +      PCNM24 + PCNM25 + PCNM26 + PCNM27  ##  ##          Df    AIC      F Pr(>F)    ## - PCNM15  1 246.67 0.7308  0.820    ## - PCNM9   1 246.75 0.7890  0.765    ## - PCNM17  1 246.80 0.8282  0.710    ## - PCNM1   1 246.89 0.9002  0.660    ## - PCNM7   1 246.98 0.9612  0.565    ## - PCNM19  1 246.95 0.9442  0.505    ## - PCNM25  1 246.92 0.9214  0.495    ## - PCNM8   1 247.03 0.9987  0.430    ## - PCNM14  1 247.04 1.0090  0.425    ## - PCNM6   1 247.16 1.0956  0.325    ## - PCNM12  1 247.18 1.1171  0.255    ## - PCNM2   1 247.28 1.1864  0.245    ## - PCNM18  1 247.16 1.0986  0.225    ## - PCNM4   1 247.24 1.1616  0.185    ## - PCNM26  1 247.50 1.3561  0.175    ## - PCNM13  1 247.29 1.2013  0.160    ## - PCNM27  1 247.42 1.2979  0.150    ## - PCNM23  1 247.42 1.2936  0.140    ## - PCNM21  1 247.52 1.3695  0.105    ## - PCNM5   1 247.58 1.4172  0.105    ## - PCNM20  1 247.66 1.4789  0.100 .  ## - PCNM10  1 247.63 1.4531  0.060 .  ## - PCNM11  1 248.33 1.9861  0.015 *  ## - PCNM24  1 248.53 2.1365  0.010 ** ## - PCNM3   1 248.66 2.2347  0.005 ** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Step: bird_com ~ PCNM1 + PCNM2 + PCNM3 + PCNM4 + PCNM5 + PCNM6 + PCNM7 +      PCNM8 + PCNM9 + PCNM10 + PCNM11 + PCNM12 + PCNM13 + PCNM14 +      PCNM17 + PCNM18 + PCNM19 + PCNM20 + PCNM21 + PCNM23 + PCNM24 +      PCNM25 + PCNM26 + PCNM27  ##  ##          Df    AIC      F Pr(>F)    ## - PCNM9   1 245.72 0.7918  0.835    ## - PCNM17  1 245.77 0.8311  0.680    ## - PCNM1   1 245.87 0.9035  0.600    ## - PCNM25  1 245.89 0.9247  0.580    ## - PCNM7   1 245.95 0.9647  0.505    ## - PCNM19  1 245.92 0.9476  0.465    ## - PCNM14  1 246.01 1.0126  0.465    ## - PCNM8   1 246.00 1.0023  0.425    ## - PCNM12  1 246.15 1.1211  0.295    ## - PCNM6   1 246.12 1.0995  0.265    ## - PCNM2   1 246.24 1.1907  0.265    ## - PCNM18  1 246.13 1.1025  0.260    ## - PCNM13  1 246.26 1.2056  0.230    ## - PCNM4   1 246.21 1.1658  0.200    ## - PCNM23  1 246.38 1.2982  0.170    ## - PCNM26  1 246.47 1.3610  0.155    ## - PCNM27  1 246.39 1.3026  0.125    ## - PCNM21  1 246.48 1.3745  0.125    ## - PCNM5   1 246.55 1.4223  0.075 .  ## - PCNM20  1 246.63 1.4842  0.060 .  ## - PCNM10  1 246.59 1.4583  0.050 *  ## - PCNM11  1 247.29 1.9933  0.015 *  ## - PCNM3   1 247.61 2.2428  0.015 *  ## - PCNM24  1 247.49 2.1442  0.005 ** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Step: bird_com ~ PCNM1 + PCNM2 + PCNM3 + PCNM4 + PCNM5 + PCNM6 + PCNM7 +      PCNM8 + PCNM10 + PCNM11 + PCNM12 + PCNM13 + PCNM14 + PCNM17 +      PCNM18 + PCNM19 + PCNM20 + PCNM21 + PCNM23 + PCNM24 + PCNM25 +      PCNM26 + PCNM27  ##  ##          Df    AIC      F Pr(>F)    ## - PCNM17  1 244.81 0.8334  0.680    ## - PCNM1   1 244.90 0.9060  0.570    ## - PCNM25  1 244.93 0.9273  0.570    ## - PCNM19  1 244.96 0.9502  0.540    ## - PCNM7   1 244.98 0.9673  0.535    ## - PCNM8   1 245.03 1.0050  0.445    ## - PCNM14  1 245.04 1.0154  0.440    ## - PCNM6   1 245.16 1.1026  0.325    ## - PCNM18  1 245.16 1.1056  0.305    ## - PCNM4   1 245.24 1.1690  0.250    ## - PCNM12  1 245.19 1.1242  0.245    ## - PCNM23  1 245.42 1.3018  0.230    ## - PCNM13  1 245.30 1.2089  0.200    ## - PCNM2   1 245.28 1.1939  0.190    ## - PCNM26  1 245.50 1.3647  0.150    ## - PCNM21  1 245.51 1.3782  0.125    ## - PCNM27  1 245.42 1.3061  0.105    ## - PCNM5   1 245.58 1.4262  0.090 .  ## - PCNM20  1 245.66 1.4883  0.090 .  ## - PCNM10  1 245.62 1.4623  0.055 .  ## - PCNM24  1 246.51 2.1501  0.015 *  ## - PCNM11  1 246.31 1.9988  0.005 ** ## - PCNM3   1 246.63 2.2490  0.005 ** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Step: bird_com ~ PCNM1 + PCNM2 + PCNM3 + PCNM4 + PCNM5 + PCNM6 + PCNM7 +      PCNM8 + PCNM10 + PCNM11 + PCNM12 + PCNM13 + PCNM14 + PCNM18 +      PCNM19 + PCNM20 + PCNM21 + PCNM23 + PCNM24 + PCNM25 + PCNM26 +      PCNM27  ##  ##          Df    AIC      F Pr(>F)    ## - PCNM1   1 243.98 0.9079  0.610    ## - PCNM25  1 244.01 0.9293  0.555    ## - PCNM19  1 244.04 0.9523  0.520    ## - PCNM7   1 244.06 0.9694  0.495    ## - PCNM8   1 244.11 1.0072  0.375    ## - PCNM14  1 244.12 1.0176  0.365    ## - PCNM6   1 244.23 1.1050  0.335    ## - PCNM12  1 244.26 1.1266  0.335    ## - PCNM18  1 244.24 1.1080  0.240    ## - PCNM13  1 244.37 1.2115  0.230    ## - PCNM4   1 244.32 1.1715  0.195    ## - PCNM2   1 244.35 1.1965  0.185    ## - PCNM23  1 244.49 1.3046  0.180    ## - PCNM26  1 244.57 1.3677  0.145    ## - PCNM20  1 244.73 1.4915  0.125    ## - PCNM27  1 244.49 1.3090  0.090 .  ## - PCNM21  1 244.59 1.3812  0.085 .  ## - PCNM5   1 244.65 1.4293  0.070 .  ## - PCNM10  1 244.69 1.4655  0.050 *  ## - PCNM11  1 245.38 2.0031  0.010 ** ## - PCNM24  1 245.57 2.1547  0.005 ** ## - PCNM3   1 245.69 2.2538  0.005 ** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Step: bird_com ~ PCNM2 + PCNM3 + PCNM4 + PCNM5 + PCNM6 + PCNM7 + PCNM8 +      PCNM10 + PCNM11 + PCNM12 + PCNM13 + PCNM14 + PCNM18 + PCNM19 +      PCNM20 + PCNM21 + PCNM23 + PCNM24 + PCNM25 + PCNM26 + PCNM27  ##  ##          Df    AIC      F Pr(>F)    ## - PCNM25  1 243.17 0.9304  0.575    ## - PCNM19  1 243.20 0.9534  0.530    ## - PCNM7   1 243.22 0.9706  0.525    ## - PCNM8   1 243.26 1.0084  0.450    ## - PCNM14  1 243.28 1.0188  0.380    ## - PCNM18  1 243.39 1.1093  0.335    ## - PCNM12  1 243.42 1.1280  0.255    ## - PCNM6   1 243.39 1.1063  0.245    ## - PCNM4   1 243.47 1.1729  0.220    ## - PCNM13  1 243.52 1.2130  0.220    ## - PCNM2   1 243.50 1.1979  0.205    ## - PCNM27  1 243.65 1.3105  0.165    ## - PCNM23  1 243.64 1.3062  0.145    ## - PCNM26  1 243.72 1.3693  0.140    ## - PCNM5   1 243.80 1.4310  0.115    ## - PCNM21  1 243.74 1.3829  0.110    ## - PCNM10  1 243.84 1.4672  0.100 .  ## - PCNM20  1 243.88 1.4933  0.095 .  ## - PCNM11  1 244.52 2.0055  0.015 *  ## - PCNM24  1 244.71 2.1573  0.005 ** ## - PCNM3   1 244.83 2.2565  0.005 ** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Step: bird_com ~ PCNM2 + PCNM3 + PCNM4 + PCNM5 + PCNM6 + PCNM7 + PCNM8 +      PCNM10 + PCNM11 + PCNM12 + PCNM13 + PCNM14 + PCNM18 + PCNM19 +      PCNM20 + PCNM21 + PCNM23 + PCNM24 + PCNM26 + PCNM27  ##  ##          Df    AIC      F Pr(>F)    ## - PCNM7   1 242.39 0.9714  0.505    ## - PCNM19  1 242.37 0.9542  0.500    ## - PCNM8   1 242.44 1.0093  0.450    ## - PCNM14  1 242.45 1.0197  0.410    ## - PCNM6   1 242.56 1.1072  0.335    ## - PCNM12  1 242.59 1.1290  0.300    ## - PCNM18  1 242.56 1.1103  0.280    ## - PCNM2   1 242.67 1.1990  0.240    ## - PCNM4   1 242.64 1.1739  0.195    ## - PCNM13  1 242.69 1.2140  0.195    ## - PCNM23  1 242.81 1.3073  0.160    ## - PCNM26  1 242.89 1.3705  0.145    ## - PCNM27  1 242.81 1.3117  0.135    ## - PCNM21  1 242.90 1.3841  0.105    ## - PCNM20  1 243.04 1.4946  0.100 .  ## - PCNM5   1 242.96 1.4322  0.080 .  ## - PCNM10  1 243.01 1.4685  0.040 *  ## - PCNM11  1 243.68 2.0072  0.010 ** ## - PCNM24  1 243.86 2.1592  0.005 ** ## - PCNM3   1 243.99 2.2585  0.005 ** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Step: bird_com ~ PCNM2 + PCNM3 + PCNM4 + PCNM5 + PCNM6 + PCNM8 + PCNM10 +      PCNM11 + PCNM12 + PCNM13 + PCNM14 + PCNM18 + PCNM19 + PCNM20 +      PCNM21 + PCNM23 + PCNM24 + PCNM26 + PCNM27  ##  ##          Df    AIC      F Pr(>F)    ## - PCNM19  1 241.57 0.9546  0.525    ## - PCNM14  1 241.66 1.0200  0.440    ## - PCNM8   1 241.64 1.0097  0.390    ## - PCNM6   1 241.76 1.1076  0.290    ## - PCNM18  1 241.77 1.1106  0.280    ## - PCNM12  1 241.79 1.1294  0.205    ## - PCNM4   1 241.85 1.1743  0.205    ## - PCNM2   1 241.88 1.1994  0.185    ## - PCNM26  1 242.09 1.3710  0.180    ## - PCNM13  1 241.90 1.2145  0.170    ## - PCNM27  1 242.01 1.3121  0.145    ## - PCNM21  1 242.10 1.3846  0.140    ## - PCNM23  1 242.01 1.3078  0.130    ## - PCNM20  1 242.24 1.4952  0.125    ## - PCNM5   1 242.16 1.4328  0.080 .  ## - PCNM10  1 242.21 1.4690  0.055 .  ## - PCNM11  1 242.87 2.0080  0.015 *  ## - PCNM24  1 243.05 2.1600  0.010 ** ## - PCNM3   1 243.17 2.2593  0.005 ** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Step: bird_com ~ PCNM2 + PCNM3 + PCNM4 + PCNM5 + PCNM6 + PCNM8 + PCNM10 +      PCNM11 + PCNM12 + PCNM13 + PCNM14 + PCNM18 + PCNM20 + PCNM21 +      PCNM23 + PCNM24 + PCNM26 + PCNM27  ##  ##          Df    AIC      F Pr(>F)    ## - PCNM8   1 240.81 1.0102  0.455    ## - PCNM14  1 240.83 1.0206  0.435    ## - PCNM18  1 240.94 1.1113  0.305    ## - PCNM12  1 240.96 1.1300  0.290    ## - PCNM6   1 240.93 1.1083  0.265    ## - PCNM2   1 241.04 1.2001  0.200    ## - PCNM4   1 241.01 1.1750  0.190    ## - PCNM13  1 241.06 1.2151  0.160    ## - PCNM26  1 241.25 1.3717  0.155    ## - PCNM27  1 241.18 1.3129  0.110    ## - PCNM23  1 241.18 1.3085  0.100 .  ## - PCNM21  1 241.27 1.3853  0.100 .  ## - PCNM5   1 241.33 1.4336  0.085 .  ## - PCNM20  1 241.41 1.4960  0.080 .  ## - PCNM10  1 241.37 1.4699  0.060 .  ## - PCNM11  1 242.03 2.0091  0.010 ** ## - PCNM24  1 242.21 2.1612  0.010 ** ## - PCNM3   1 242.33 2.2606  0.010 ** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Step: bird_com ~ PCNM2 + PCNM3 + PCNM4 + PCNM5 + PCNM6 + PCNM10 + PCNM11 +      PCNM12 + PCNM13 + PCNM14 + PCNM18 + PCNM20 + PCNM21 + PCNM23 +      PCNM24 + PCNM26 + PCNM27  ##  ##          Df    AIC      F Pr(>F)    ## - PCNM14  1 240.05 1.0205  0.420    ## - PCNM6   1 240.16 1.1081  0.295    ## - PCNM12  1 240.18 1.1299  0.240    ## - PCNM4   1 240.24 1.1749  0.220    ## - PCNM2   1 240.27 1.1999  0.215    ## - PCNM18  1 240.16 1.1111  0.195    ## - PCNM13  1 240.28 1.2150  0.170    ## - PCNM26  1 240.47 1.3716  0.160    ## - PCNM23  1 240.40 1.3083  0.145    ## - PCNM27  1 240.40 1.3127  0.145    ## - PCNM21  1 240.49 1.3852  0.140    ## - PCNM20  1 240.62 1.4958  0.075 .  ## - PCNM10  1 240.59 1.4697  0.070 .  ## - PCNM5   1 240.55 1.4334  0.060 .  ## - PCNM11  1 241.24 2.0088  0.010 ** ## - PCNM3   1 241.53 2.2603  0.010 ** ## - PCNM24  1 241.41 2.1609  0.005 ** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Step: bird_com ~ PCNM2 + PCNM3 + PCNM4 + PCNM5 + PCNM6 + PCNM10 + PCNM11 +      PCNM12 + PCNM13 + PCNM18 + PCNM20 + PCNM21 + PCNM23 + PCNM24 +      PCNM26 + PCNM27  ##  ##          Df    AIC      F Pr(>F)    ## - PCNM6   1 239.38 1.1078  0.325    ## - PCNM18  1 239.38 1.1109  0.310    ## - PCNM12  1 239.40 1.1296  0.285    ## - PCNM4   1 239.46 1.1746  0.210    ## - PCNM27  1 239.62 1.3124  0.180    ## - PCNM13  1 239.50 1.2147  0.170    ## - PCNM2   1 239.49 1.1996  0.160    ## - PCNM26  1 239.69 1.3712  0.135    ## - PCNM23  1 239.62 1.3080  0.105    ## - PCNM20  1 239.84 1.4954  0.105    ## - PCNM21  1 239.71 1.3848  0.095 .  ## - PCNM5   1 239.76 1.4330  0.065 .  ## - PCNM10  1 239.81 1.4693  0.050 *  ## - PCNM24  1 240.62 2.1604  0.010 ** ## - PCNM11  1 240.44 2.0083  0.005 ** ## - PCNM3   1 240.74 2.2597  0.005 ** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Step: bird_com ~ PCNM2 + PCNM3 + PCNM4 + PCNM5 + PCNM10 + PCNM11 +      PCNM12 + PCNM13 + PCNM18 + PCNM20 + PCNM21 + PCNM23 + PCNM24 +      PCNM26 + PCNM27  ##  ##          Df    AIC      F Pr(>F)    ## - PCNM12  1 238.71 1.1281  0.290    ## - PCNM18  1 238.69 1.1094  0.235    ## - PCNM2   1 238.79 1.1981  0.235    ## - PCNM4   1 238.76 1.1731  0.210    ## - PCNM13  1 238.81 1.2131  0.180    ## - PCNM27  1 238.93 1.3107  0.170    ## - PCNM23  1 238.92 1.3063  0.150    ## - PCNM21  1 239.01 1.3831  0.145    ## - PCNM26  1 238.99 1.3695  0.130    ## - PCNM5   1 239.07 1.4312  0.080 .  ## - PCNM20  1 239.14 1.4935  0.080 .  ## - PCNM10  1 239.11 1.4674  0.070 .  ## - PCNM11  1 239.74 2.0058  0.015 *  ## - PCNM24  1 239.91 2.1576  0.015 *  ## - PCNM3   1 240.03 2.2568  0.010 ** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Step: bird_com ~ PCNM2 + PCNM3 + PCNM4 + PCNM5 + PCNM10 + PCNM11 +      PCNM13 + PCNM18 + PCNM20 + PCNM21 + PCNM23 + PCNM24 + PCNM26 +      PCNM27  ##  ##          Df    AIC      F Pr(>F)    ## - PCNM18  1 238.01 1.1078  0.245    ## - PCNM13  1 238.13 1.2113  0.205    ## - PCNM4   1 238.08 1.1713  0.200    ## - PCNM2   1 238.11 1.1963  0.190    ## - PCNM27  1 238.24 1.3087  0.190    ## - PCNM23  1 238.23 1.3044  0.155    ## - PCNM21  1 238.32 1.3810  0.135    ## - PCNM26  1 238.31 1.3674  0.120    ## - PCNM20  1 238.45 1.4913  0.115    ## - PCNM10  1 238.42 1.4652  0.090 .  ## - PCNM5   1 238.38 1.4290  0.085 .  ## - PCNM24  1 239.21 2.1544  0.010 ** ## - PCNM3   1 239.33 2.2534  0.010 ** ## - PCNM11  1 239.04 2.0028  0.005 ** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Step: bird_com ~ PCNM2 + PCNM3 + PCNM4 + PCNM5 + PCNM10 + PCNM11 +      PCNM13 + PCNM20 + PCNM21 + PCNM23 + PCNM24 + PCNM26 + PCNM27  ##  ##          Df    AIC      F Pr(>F)    ## - PCNM4   1 237.36 1.1698  0.255    ## - PCNM2   1 237.39 1.1948  0.230    ## - PCNM13  1 237.40 1.2098  0.190    ## - PCNM27  1 237.51 1.3071  0.165    ## - PCNM23  1 237.51 1.3027  0.140    ## - PCNM21  1 237.60 1.3792  0.135    ## - PCNM26  1 237.58 1.3657  0.095 .  ## - PCNM20  1 237.72 1.4894  0.085 .  ## - PCNM10  1 237.69 1.4634  0.070 .  ## - PCNM5   1 237.65 1.4272  0.050 *  ## - PCNM11  1 238.31 2.0002  0.015 *  ## - PCNM24  1 238.48 2.1517  0.010 ** ## - PCNM3   1 238.59 2.2506  0.005 ** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Step: bird_com ~ PCNM2 + PCNM3 + PCNM5 + PCNM10 + PCNM11 + PCNM13 +      PCNM20 + PCNM21 + PCNM23 + PCNM24 + PCNM26 + PCNM27  ##  ##          Df    AIC      F Pr(>F)    ## - PCNM2   1 236.72 1.1925  0.255    ## - PCNM13  1 236.74 1.2074  0.175    ## - PCNM27  1 236.84 1.3046  0.135    ## - PCNM23  1 236.84 1.3002  0.125    ## - PCNM26  1 236.91 1.3630  0.120    ## - PCNM21  1 236.93 1.3766  0.100 .  ## - PCNM20  1 237.05 1.4865  0.075 .  ## - PCNM5   1 236.98 1.4245  0.065 .  ## - PCNM10  1 237.02 1.4605  0.045 *  ## - PCNM3   1 237.91 2.2462  0.015 *  ## - PCNM24  1 237.79 2.1475  0.010 ** ## - PCNM11  1 237.63 1.9963  0.005 ** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Step: bird_com ~ PCNM3 + PCNM5 + PCNM10 + PCNM11 + PCNM13 + PCNM20 +      PCNM21 + PCNM23 + PCNM24 + PCNM26 + PCNM27  ##  ##          Df    AIC      F Pr(>F)    ## - PCNM23  1 236.18 1.2974  0.175    ## - PCNM13  1 236.08 1.2048  0.170    ## - PCNM26  1 236.25 1.3601  0.150    ## - PCNM21  1 236.27 1.3735  0.130    ## - PCNM27  1 236.19 1.3017  0.120    ## - PCNM10  1 236.36 1.4574  0.090 .  ## - PCNM5   1 236.32 1.4214  0.085 .  ## - PCNM20  1 236.39 1.4833  0.085 .  ## - PCNM24  1 237.12 2.1428  0.010 ** ## - PCNM11  1 236.96 1.9920  0.005 ** ## - PCNM3   1 237.23 2.2413  0.005 ** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Step: bird_com ~ PCNM3 + PCNM5 + PCNM10 + PCNM11 + PCNM13 + PCNM20 +      PCNM21 + PCNM24 + PCNM26 + PCNM27  ##  ##          Df    AIC      F Pr(>F)    ## - PCNM13  1 235.52 1.2008  0.195    ## - PCNM26  1 235.69 1.3555  0.195    ## - PCNM27  1 235.63 1.2974  0.180    ## - PCNM21  1 235.71 1.3690  0.110    ## - PCNM20  1 235.83 1.4783  0.105    ## - PCNM10  1 235.80 1.4525  0.085 .  ## - PCNM5   1 235.76 1.4166  0.075 .  ## - PCNM11  1 236.39 1.9854  0.010 ** ## - PCNM3   1 236.66 2.2339  0.010 ** ## - PCNM24  1 236.55 2.1356  0.005 ** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Step: bird_com ~ PCNM3 + PCNM5 + PCNM10 + PCNM11 + PCNM20 + PCNM21 +      PCNM24 + PCNM26 + PCNM27  ##  ##          Df    AIC      F Pr(>F)    ## - PCNM27  1 234.95 1.2945  0.150    ## - PCNM26  1 235.01 1.3525  0.145    ## - PCNM21  1 235.03 1.3659  0.115    ## - PCNM20  1 235.15 1.4750  0.105    ## - PCNM5   1 235.08 1.4135  0.085 .  ## - PCNM10  1 235.12 1.4493  0.060 .  ## - PCNM3   1 235.97 2.2289  0.015 *  ## - PCNM11  1 235.70 1.9809  0.010 ** ## - PCNM24  1 235.86 2.1309  0.010 ** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Step: bird_com ~ PCNM3 + PCNM5 + PCNM10 + PCNM11 + PCNM20 + PCNM21 +      PCNM24 + PCNM26  ##  ##          Df    AIC      F Pr(>F)    ## - PCNM26  1 234.42 1.3482  0.200    ## - PCNM21  1 234.44 1.3615  0.120    ## - PCNM20  1 234.55 1.4703  0.080 .  ## - PCNM10  1 234.53 1.4446  0.065 .  ## - PCNM5   1 234.49 1.4089  0.045 *  ## - PCNM24  1 235.26 2.1240  0.015 *  ## - PCNM11  1 235.10 1.9745  0.010 ** ## - PCNM3   1 235.36 2.2217  0.005 ** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Step: bird_com ~ PCNM3 + PCNM5 + PCNM10 + PCNM11 + PCNM20 + PCNM21 +      PCNM24  ##  ##          Df    AIC      F Pr(>F)    ## - PCNM21  1 233.88 1.3564  0.140    ## - PCNM5   1 233.94 1.4036  0.085 .  ## - PCNM10  1 233.97 1.4391  0.065 .  ## - PCNM20  1 234.00 1.4647  0.055 .  ## - PCNM24  1 234.69 2.1160  0.010 ** ## - PCNM11  1 234.54 1.9671  0.005 ** ## - PCNM3   1 234.80 2.2133  0.005 ** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Step: bird_com ~ PCNM3 + PCNM5 + PCNM10 + PCNM11 + PCNM20 + PCNM24  ##  ##          Df    AIC      F Pr(>F)    ## - PCNM10  1 233.41 1.4337  0.115    ## - PCNM5   1 233.38 1.3982  0.095 .  ## - PCNM20  1 233.44 1.4591  0.095 .  ## - PCNM3   1 234.23 2.2049  0.015 *  ## - PCNM11  1 233.97 1.9596  0.005 ** ## - PCNM24  1 234.13 2.1079  0.005 ** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Step: bird_com ~ PCNM3 + PCNM5 + PCNM11 + PCNM20 + PCNM24  ##  ##          Df    AIC      F Pr(>F)    ## - PCNM20  1 232.95 1.4524  0.130    ## - PCNM5   1 232.88 1.3918  0.060 .  ## - PCNM24  1 233.62 2.0983  0.020 *  ## - PCNM11  1 233.47 1.9506  0.010 ** ## - PCNM3   1 233.72 2.1947  0.005 ** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Step: bird_com ~ PCNM3 + PCNM5 + PCNM11 + PCNM24  ##  ##          Df    AIC      F Pr(>F)    ## - PCNM5   1 232.40 1.3852  0.080 .  ## - PCNM11  1 232.97 1.9414  0.010 ** ## - PCNM24  1 233.12 2.0883  0.005 ** ## - PCNM3   1 233.22 2.1843  0.005 ** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 birds_selected <- cbind(pca_selected_birds, pcnm_scores_birds)  birds.rda.all <- update(birds.pcnm.sub,                          glue::glue(\"~. +\", {paste((colnames(pca_selected_birds)), collapse=\" +\")}), #add selected PCA                         data = birds_selected)  birds.rda.sub <- ordistep(birds.rda.all, direction = \"backward\") #assess p-value for dropping ##  ## Start: bird_com ~ PCNM3 + PCNM5 + PCNM11 + PCNM24 + PC1 + PC2 + PC3 +      PC4 + PC5 + PC6 + PC7 + PC8  ##  ##          Df    AIC      F Pr(>F)    ## - PCNM5   1 225.34 0.9216  0.590    ## - PCNM11  1 225.43 0.9965  0.405    ## - PCNM3   1 225.68 1.2213  0.185    ## - PC3     1 225.68 1.2196  0.155    ## - PC7     1 225.92 1.4302  0.095 .  ## - PCNM24  1 225.88 1.3960  0.090 .  ## - PC4     1 226.20 1.6807  0.035 *  ## - PC8     1 226.56 1.9976  0.020 *  ## - PC6     1 226.45 1.8997  0.015 *  ## - PC5     1 226.47 1.9190  0.015 *  ## - PC2     1 228.40 3.6539  0.005 ** ## - PC1     1 233.74 8.6180  0.005 ** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Step: bird_com ~ PCNM3 + PCNM11 + PCNM24 + PC1 + PC2 + PC3 + PC4 +      PC5 + PC6 + PC7 + PC8  ##  ##          Df    AIC      F Pr(>F)    ## - PCNM11  1 224.47 0.9973  0.410    ## - PC3     1 224.73 1.2311  0.175    ## - PCNM3   1 224.79 1.2808  0.125    ## - PCNM24  1 224.93 1.4083  0.090 .  ## - PC7     1 225.04 1.5076  0.080 .  ## - PC4     1 225.26 1.7026  0.030 *  ## - PC6     1 225.68 2.0825  0.010 ** ## - PC5     1 225.53 1.9410  0.005 ** ## - PC8     1 225.80 2.1849  0.005 ** ## - PC2     1 227.39 3.6351  0.005 ** ## - PC1     1 232.78 8.7036  0.005 ** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Step: bird_com ~ PCNM3 + PCNM24 + PC1 + PC2 + PC3 + PC4 + PC5 + PC6 +      PC7 + PC8  ##  ##          Df    AIC      F Pr(>F)    ## - PCNM3   1 223.91 1.2912  0.135    ## - PCNM24  1 224.04 1.4040  0.095 .  ## - PC7     1 224.23 1.5793  0.055 .  ## - PC3     1 224.06 1.4295  0.050 *  ## - PC4     1 224.37 1.7050  0.010 ** ## - PC6     1 224.75 2.0534  0.010 ** ## - PC8     1 224.91 2.1947  0.010 ** ## - PC5     1 224.71 2.0183  0.005 ** ## - PC2     1 226.48 3.6409  0.005 ** ## - PC1     1 232.58 9.4698  0.005 ** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Step: bird_com ~ PCNM24 + PC1 + PC2 + PC3 + PC4 + PC5 + PC6 + PC7 +      PC8  ##  ##          Df    AIC      F Pr(>F)    ## - PC3     1 223.53 1.4640  0.095 .  ## - PCNM24  1 223.46 1.4000  0.075 .  ## - PC7     1 223.70 1.6254  0.050 *  ## - PC4     1 223.74 1.6609  0.020 *  ## - PC5     1 224.10 1.9968  0.010 ** ## - PC8     1 224.38 2.2534  0.005 ** ## - PC6     1 224.73 2.5701  0.005 ** ## - PC2     1 226.25 3.9956  0.005 ** ## - PC1     1 231.94 9.4946  0.005 ** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 birds.rda.sub$call ## rda(formula = bird_com ~ PCNM24 + PC1 + PC2 + PC3 + PC4 + PC5 +  ##     PC6 + PC7 + PC8, data = birds_selected) birds.rda.fin <- rda(bird_com ~ PC1 + PC2 + PC4 + PC6 + PC7 + PC8 + Condition(PCNM1 + PCNM2 + PCNM3 + PCNM4 + PCNM5), data = birds_selected) # fitted_126 <- fitted(birds1.rda.fin, model = \"CCA\") p_hats_birds <- apply(bird_com, 2, mean) p_hats_birds ##        Acridotheres javanicus              Aegithina tiphia  ##                          1.00                          0.42  ##        Amaurornis phoenicurus            Aplonis panayensis  ##                          0.16                          0.95  ##                      Apodidae                Ardea purpurea  ##                          0.99                          0.09  ##                  Ardeola spp.                 Bubulcus ibis  ##                          0.02                          0.06  ##             Butorides striata            Cinnyris jugularis  ##                          0.06                          0.97  ##                 Columba livia            Copsychus saularis  ##                          0.82                          0.10  ##              Corvus splendens            Dicaeum cruentatum  ##                          0.83                          0.74  ##         Eudynamys scolopaceus              Geopelia striata  ##                          0.62                          0.45  ##            Halcyon smyrnensis               Haliastur indus  ##                          0.27                          0.11  ##        Hemiprocne longipennis               Hirundo rustica  ##                          0.10                          0.34  ##           Ixobrychus sinensis              Lanius cristatus  ##                          0.03                          0.13  ##           Lonchura punctulata            Loriculus galgulus  ##                          0.17                          0.52  ##            Muscicapa dauurica             Oriolus chinensis  ##                          0.56                          0.91  ##           Orthotomus sutorius          Psittacula alexandri  ##                          0.48                          0.52  ##            Psittacula krameri         Psittacula longicauda  ##                          0.31                          0.38  ##                 Psittaculidae           Pycnonotus goiavier  ##                          0.08                          0.87  ##            Rhipidura javanica        Streptopelia chinensis  ##                          0.11                          0.96  ##           Todiramphus chloris                Treron vernans  ##                          0.33                          0.73  ##        Yungipicus moluccensis         Zosterops palpebrosus  ##                          0.55                          0.79  ##               Apus nipalensis                 Ardea cinerea  ##                          0.02                          0.06  ##            Dinopium javanense        Haliaeetus leucogaster  ##                          0.25                          0.04  ##                 Lanius schach           Orthotomus ruficeps  ##                          0.23                          0.03  ##               Passer montanus          Pelargopsis capensis  ##                          0.61                          0.01  ##      Trichoglossus haematodus            Agropsar sturninus  ##                          0.09                          0.15  ## Gallus gallus (domestic type)                   Lanius spp.  ##                          0.08                          0.01  ##                Merops viridis       Micropternus brachyurus  ##                          0.13                          0.05  ##         Anthreptes malacensis              Hirundo tahitica  ##                          0.66                          0.58  ##         Phylloscopus borealis          Acridotheres tristis  ##                          0.28                          0.38  ##                      Ardeidae          Corvus macrorhynchos  ##                          0.04                          0.06  ##              Falco peregrinus                  Lalage nigra  ##                          0.02                          0.29  ##        Orthotomus atrogularis                Anthus rufulus  ##                          0.13                          0.17  ##           Dicrurus paradiseus              Egretta garzetta  ##                          0.05                          0.05  ##          Pernis ptilorhynchus                Ducula bicolor  ##                          0.14                          0.20  ##            Gerygone sulphurea            Dicrurus annectans  ##                          0.16                          0.01  ##            Merops philippinus              Ardea intermedia  ##                          0.31                          0.02  ##            Cisticola juncidis            Actitis hypoleucos  ##                          0.03                          0.01  ##               Lanius tigrinus             Motacilla cinerea  ##                          0.01                          0.01  ##              Elanus caeruleus            Pycnonotus jocosus  ##                          0.01                          0.10  ##       Chrysococcyx minutillus                  Hirundo spp.  ##                          0.02                          0.02  ##            Cacatua goffiniana         Eurystomus orientalis  ##                          0.12                          0.13  ##                Picus vittatus      Psilopogon haemacephalus  ##                          0.06                          0.07  ##            Chalcophaps indica       Chrysophlegma miniaceum  ##                          0.01                          0.05  ##           Cuculus micropterus            Nisaetus cirrhatus  ##                          0.01                          0.04  ##           Orthotomus sericeus         Pycnonotus aurigaster  ##                          0.04                          0.09  ##              Mixornis gularis                      Rallidae  ##                          0.07                          0.01  ##          Ficedula zanthopygia                Muscicapa spp.  ##                          0.01                          0.02  ##         Centropus bengalensis              Cecropis daurica  ##                          0.01                          0.02  ##           Ploceus philippinus             Aviceda leuphotes  ##                          0.03                          0.01  ##      Pericrocotus divaricatus           Psilopogon lineatus  ##                          0.02                          0.05  ##           Prinia flaviventris           Pycnonotus plumosus  ##                          0.03                          0.02  ##                 Lonchura spp.            Centropus sinensis  ##                          0.01                          0.01  ##             Gracula religiosa             Pandion haliaetus  ##                          0.03                          0.01  ##     Anthracoceros albirostris         Accipiter trivirgatus  ##                          0.02                          0.01  ##                   Corvus spp.        Gallus gallus (hybrid)  ##                          0.01                          0.01  ##            Aethopyga siparaja   Chrysococcyx xanthorhynchus  ##                          0.01                          0.02  ##         Hierococcyx nisicolor      Lonchura leucogastroides  ##                          0.01                          0.01  ##          Garrulax leucolophus         Pycnonotus zeylanicus  ##                          0.01                          0.02  ##          Terpsiphone paradisi                 Nectariniidae  ##                          0.01                          0.01  ##          Muscicapa ferruginea          Lonchura atricapilla  ##                          0.01                          0.01  ##                 Mycteria spp.  ##                          0.01 save(pca_birds,      raw_pcnm_birds,      birds.rda.fin,       p_hats_birds,      file = \"./your/working/directory/beta_model_birds.Rdata\")"},{"path":"https://ecological-cities.github.io/biodivercity/articles/build-models.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Build Models","text":"Arthur AD, Li J, Henry S & Cunningham SA (2010) Influence woody vegetation pollinator densities oilseed Brassica fields Australian temperate landscape. Basic Applied Ecology, 11(5): 406–414. Li J, Alvarez B, Siwabessy J, Tran M, Huang Z, Przeslawski R, Radke L, Howard F & Nichol S (2017) Application random forest generalised linear model hybrid methods geostatistical techniques count data: Predicting sponge species richness. Environmental Modelling Software, 97: 112–129.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/articles/more/animals-data-summaries.html","id":"summarise-data","dir":"Articles > More","previous_headings":"","what":"Summarise data","title":"Animals: Data Summaries","text":"Load example data. Refer help(animal_observations) help(animal_surveys) details datasets, well vignette(\"process-animal\") animal surveys may processed. Next, define unique combinations grouping variables interest. used summarise data. example, animal surveys can summarised six towns (column area), two survey periods (column period), well four animal groups (column taxon): (rows ) unique combinations, calculate species accumulation curve using function calculate_sac(). Species accumulation curves provide useful information much sampling effort required reasonably certain total number species (‘gamma’ diversity) within given sampling unit. example, allow number species different animal groups, areas survey periods compared amount sampling effort, .e., point along curves. output plot_sac contains data points along species accumulation curves, .e., estimated number species (column richness) increasing survey effort (column sites), well standard deviation (column sd) estimates:","code":"data(\"animal_observations\") data(\"animal_surveys\") unique <- animal_surveys %>%   distinct(area, period, taxon) %>%    arrange(area)  unique ## # A tibble: 40 × 3 ##    area  period taxon       ##    <chr>  <dbl> <chr>       ##  1 BS         1 Odonata     ##  2 BS         1 Lepidoptera ##  3 BS         1 Aves        ##  4 BS         1 Amphibia    ##  5 JW         1 Aves        ##  6 JW         1 Lepidoptera ##  7 JW         1 Odonata     ##  8 JW         1 Amphibia    ##  9 JW         2 Aves        ## 10 JW         2 Lepidoptera ## # … with 30 more rows plot_sac <- data.frame()  for(i in 1:nrow(unique)){ # calculate for each row of 'unique'      sac_data <- calculate_sac(observations = animal_observations,                              survey_ref = animal_surveys,                             specify_area = unique$area[i],                              specify_period = unique$period[i],                              specify_taxon = unique$taxon[i])      # append results to plot_sac (overwrite), and order each grouping factor   plot_sac <- plot_sac %>%     bind_rows(sac_data) %>%      mutate(area = factor(area, levels = c(\"PG\", \"QT\", \"TP\", \"JW\", \"BS\", \"WL\"))) %>%     mutate(taxon = factor(taxon, levels = c(\"Aves\", \"Lepidoptera\", \"Odonata\", \"Amphibia\")))  } head(plot_sac) ##   area period   taxon sites richness        sd ## 1   BS      1 Odonata     1 2.533333 0.6900281 ## 2   BS      1 Odonata     2 4.430508 1.1270489 ## 3   BS      1 Odonata     3 5.902016 1.4111596 ## 4   BS      1 Odonata     4 7.083565 1.6020460 ## 5   BS      1 Odonata     5 8.063188 1.7352009 ## 6   BS      1 Odonata     6 8.898539 1.8317823"},{"path":"https://ecological-cities.github.io/biodivercity/articles/more/animals-data-summaries.html","id":"make-comparisons","dir":"Articles > More","previous_headings":"","what":"Make comparisons","title":"Animals: Data Summaries","text":"animal group, can compare survey areas/periods based similar levels sampling effort. Thus, need extract estimates (column richness) similar value column sites. improve certainty comparisons, sampling effort used comparisons high possible (curves plateau); accordingly, choose highest available value sites present among grouping variables (area, period, taxon): resulting dataframe n_refer allows direct comparisons made different areas/periods, based estimated number species (column richness): Finally, species accumulation curves (plot_sac) comparisons based similar sampling efforts (n_refer) can visualised: Figure: Species accumulation curves showing number species area taxon, across two survey periods. average number species (solid lines) two standard deviations mean (shaded region) shown. Note scale y-axis varies animal groups.  Note curves yet reach clear plateau, despite high sampling effort. six towns (area), six surveys (cycles) conducted per sampling point (point_id), per survey period (duration one year). conducted four animal groups (column taxon): Birds (Aves), Butterflies (Lepidoptera), Odonates (Odonata) Amphibians (Amphibia).","code":"n_refer <- plot_sac %>%   group_by(area, period, taxon) %>%   summarise(n_max = max(sites)) %>% # highest value for 'sites' across grouping vars   group_by(area, period, taxon) %>%   summarise(sites = min(n_max)) %>% # lowest common denominator among the grouping vars (value for 'sites' present among all)   group_by(taxon) %>%   summarise(sites = min(sites)) %>% # analyse each taxon separately   inner_join(plot_sac) # join data of 'richness' for all grouping variables at corresponding value for 'sites' n_refer ## # A tibble: 40 × 6 ##    taxon sites area  period richness    sd ##    <fct> <int> <fct>  <dbl>    <dbl> <dbl> ##  1 Aves     84 BS         1     62    2.66 ##  2 Aves     84 JW         1     59.1  4.19 ##  3 Aves     84 JW         2     58.5  4.50 ##  4 Aves     84 PG         1     69.1  5.04 ##  5 Aves     84 PG         2     70.6  4.04 ##  6 Aves     84 QT         1     76.4  3.46 ##  7 Aves     84 QT         2     66.6  3.90 ##  8 Aves     84 TP         1     68.6  4.24 ##  9 Aves     84 TP         2     63.9  4.87 ## 10 Aves     84 WL         1     62.6  4.70 ## # … with 30 more rows plot_sac %>%      ggplot() +     facet_grid(taxon ~ area, scales = \"free_y\") +     geom_line(aes(x = sites, y = richness, color = factor(period))) +     geom_ribbon(aes(x = sites,                     ymin = (richness - 2 * sd),                     ymax = (richness + 2 * sd),                     fill = factor(period)),                 alpha = 0.2) +     geom_point(data = n_refer,                aes(x = sites, y = richness), shape = 4) +     geom_segment(data = n_refer,                  aes(x = sites, y = 0, xend = sites, yend = richness),                  linetype = \"dashed\") +     geom_segment(data = n_refer,                  aes(x = 0, y = richness, xend = sites, yend = richness),                   linetype = \"dashed\") +     ylab(\"Cumulative no. of species\") +      xlab(\"No. of surveys\") +     labs(color = \"Survey\\nPeriod\", fill = \"Survey\\nPeriod\") +     theme_bw() +      theme(panel.grid.major.x = element_blank(),           panel.grid.minor.x = element_blank())"},{"path":"https://ecological-cities.github.io/biodivercity/articles/more/animals-simulate-missing-surveys.html","id":"run-simulation","dir":"Articles > More","previous_headings":"","what":"Run simulation","title":"Animals: Simulate Missing Surveys","text":"Load process example datasets, run function exclude_simulator(). scenarios tabulation results simulated iteration (column). count sampling points species (row) shown. column full shows breakdown counts within original dataset. First rows object scenarios.","code":"data(\"animal_observations\") data(\"animal_surveys\")  # filter animal observations to taxon of interest birds <- filter_observations(observations = animal_observations,                              survey_ref = animal_surveys,                              specify_taxon = \"Aves\", # birds                              specify_area = \"PG\", # punggol                              specify_period = \"1\") # survey period 1  # convert animal observations to community matrix birds <- as.data.frame.matrix(xtabs(abundance ~ survey_id + species, data = birds)) birds <- cbind(survey_id = rownames(birds), birds) # convert rownames to col  set.seed(123) scenarios <-    exclude_simulator(birds, animal_surveys,                     exclude_num = 15, exclude_level = \"survey\", specify_cycles = 5)"},{"path":"https://ecological-cities.github.io/biodivercity/articles/more/animals-simulate-missing-surveys.html","id":"visualise-results","dir":"Articles > More","previous_headings":"","what":"Visualise results","title":"Animals: Simulate Missing Surveys","text":"100 bootstrapped scenarios may used analyses, visualised observe variation species richness within sampled area interest (Punggol): Figure: Number bird species Punggol, Singapore 15 surveys missed Survey Cycle 5 (March – April 2017). blue cross denotes count full dataset, diamond symbol denotes mean count across 100 scenarios survey data randomly excluded.  Visualisations can also performed level individual species. Species relatively less common likely missed sampling points: Figure: Number sampling points bird species observed Punggol, Singapore 15 surveys missed Survey Cycle 5 (March – April 2017). blue cross denotes count full dataset, diamond symbol denotes mean count across 100 scenarios survey data randomly excluded. Species arranged descending order counts.","code":"spp_richness <- colSums(!is.na(scenarios[,-1])) # calculate total no. of bird species per scenario spp_richness <- spp_richness %>%   as.data.frame() %>%   dplyr::rename(n = \".\") %>%   dplyr::mutate(full = nrow(scenarios)) %>%   dplyr::mutate(area = \"Punggol\")  spp_richness %>%   ggplot(aes(x = area, y = n)) +     geom_boxplot() +     geom_point(aes(y = full), shape=4, color = \"blue\") +     stat_summary(fun = mean, geom = \"point\", shape = 5) +      xlab(\"\") + ylab(\"No. of species\") +      theme_bw() # transform for plotting plot_bird_spp <- scenarios %>%   tidyr::pivot_longer(cols = num_range(\"iter\", 1:ncol(scenarios)),                       names_to = \"iteration\", values_to = \"n\") %>%   dplyr::mutate(taxon = \"Aves\")  # get order of species based on total count species_order <- plot_bird_spp %>%   dplyr::group_by(species) %>%   dplyr::summarise(order = mean(full))  plot_bird_spp %>%   dplyr::left_join(species_order) %>%    ggplot(aes(x = reorder(species, order), y = n)) +     geom_boxplot() +     geom_point(aes(y = full), shape = 4, color = \"blue\") +     stat_summary(fun = mean, geom = \"point\", shape = 5) +      xlab(\"\") + ylab(\"No. of sampling points\") +      theme_bw() +     coord_flip()"},{"path":"https://ecological-cities.github.io/biodivercity/articles/more/animals-species-analyses.html","id":"prepare-data","dir":"Articles > More","previous_headings":"","what":"Prepare data","title":"Animals: Species-level Analyses","text":"Load example data. Refer help(animal_observations) help(animal_surveys) details datasets. Show group-level (family/genus) observations species group observed sampling point, using function check_taxongrps(). entries later removed respective points, order prevent -counting number species. details vignette(\"process-animal\").","code":"data(\"animal_observations\") data(\"animal_surveys\") remove <- check_taxongrps(animal_observations, level = \"point\") remove ## # A tibble: 7,199 × 4 ## # Groups:   point_id, period [279] ##    point_id period name                 n ##    <chr>     <dbl> <chr>            <int> ##  1 BSa11a_P      1 Aegithina spp.       1 ##  2 BSa11a_P      1 Agriocnemis spp.     1 ##  3 BSa11a_P      1 Amaurornis spp.      1 ##  4 BSa11a_P      1 Ampittia spp.        1 ##  5 BSa11a_P      1 Aplonis spp.         1 ##  6 BSa11a_P      1 Appias spp.          1 ##  7 BSa11a_P      1 Bubulcus spp.        1 ##  8 BSa11a_P      1 Butorides spp.       1 ##  9 BSa11a_P      1 Cephrenes spp.       1 ## 10 BSa11a_P      1 Cinnyris spp.        1 ## # … with 7,189 more rows"},{"path":"https://ecological-cities.github.io/biodivercity/articles/more/animals-species-analyses.html","id":"most-abundant-species","dir":"Articles > More","previous_headings":"","what":"Most abundant species","title":"Animals: Species-level Analyses","text":"Summarise animal surveys based many individuals species present sampling point. Tally number individuals per species, within area, period taxon: results can visualised, example, bird species six areas (towns) Singapore, across two survey periods: Figure: abundant bird species within area (town), per survey round. ten species shown; species arranged descending order according cumulative counts.","code":"plot_fauna <- animal_observations %>%   group_by(species, area, period, taxon) %>%    summarise(count = sum(abundance)) %>%    mutate(area = factor(area, # re-arrange factors                        levels = c(\"PG\", \"QT\", \"TP\",\"JW\", \"BS\", \"WL\"))) plot_fauna ## # A tibble: 1,664 × 5 ## # Groups:   species, area, period [1,664] ##    species               area  period taxon   count ##    <chr>                 <fct>  <dbl> <chr>   <dbl> ##  1 Accipiter gularis     TP         2 Aves        1 ##  2 Accipiter spp.        JW         2 Aves        1 ##  3 Accipiter spp.        QT         2 Aves        1 ##  4 Accipiter spp.        TP         2 Aves        2 ##  5 Accipiter trivirgatus QT         1 Aves        1 ##  6 Accipitriformes       PG         2 Aves        1 ##  7 Accipitriformes       QT         2 Aves        1 ##  8 Accipitriformes       TP         1 Aves        1 ##  9 Acisoma panorpoides   BS         1 Odonata     1 ## 10 Acisoma panorpoides   JW         2 Odonata    11 ## # … with 1,654 more rows # get the (descending) order of species to be plot order  <- plot_fauna %>%    filter(taxon == \"Aves\") %>% # birds only   group_by(species) %>%   summarise(order = sum(count))  plot_fauna %>%   filter(taxon == \"Aves\") %>% # birds only   group_by(area, period) %>% # only plot top 10 species   slice_max(count, n = 10) %>%   left_join(order) %>% # get the order   ggplot(aes(y = count, x = reorder(species, count))) +     geom_col(width = 0.8, color = \"black\") +     facet_grid(~ area + period) +     ylab(\"Number of individuals\") +     xlab(\"\")+     theme_bw()+     theme(text = element_text(size=8.0),           axis.text.y = element_text(face = \"italic\"),           panel.grid.major.y = element_blank(),           panel.grid.minor.x = element_blank()) +     coord_flip() +     scale_y_continuous(expand = c(0,0), breaks = scales::breaks_pretty(n = 3))"},{"path":"https://ecological-cities.github.io/biodivercity/articles/more/animals-species-analyses.html","id":"most-common-species","dir":"Articles > More","previous_headings":"","what":"Most common species","title":"Animals: Species-level Analyses","text":"Summarise animal surveys based whether species present sampling points. Tally instances species observed within area, period, taxon point_id: Similarly, common bird species within six areas (towns) Singapore can visualised: Figure: common bird species within area (town), per survey round. ten species shown; species arranged descending order according cumulative number sampling points present .  interesting visualisations can also generated. example, hierarchical tree map may used show ten common bird species first survey period:","code":"plot_fauna <- animal_observations %>%   group_by(species, area, period, taxon, point_id) %>% # counts of unique species at each sampling pt, per survey area/period/taxon   summarise() %>%    anti_join(remove, by = c(\"species\" = \"name\",\"point_id\", \"period\")) %>% # exclude genus/family lvl records if all species within grp observed   group_by(species, area, period, taxon) %>% # no. of points that each species occurs (per area/period/taxon)   summarise(count = n()) %>%    mutate(area = factor(area, # re-arrange factors                        levels = c(\"PG\", \"QT\", \"TP\",\"JW\", \"BS\", \"WL\"))) # get the (descending) order of species to be plot order  <- plot_fauna %>%    filter(taxon == \"Aves\") %>% # birds only   group_by(species) %>%   summarise(order = sum(count))  plot_fauna %>%   filter(taxon == \"Aves\") %>% # birds only   group_by(area, period) %>% # only plot top 10 species    slice_max(count, n = 10) %>%   left_join(order) %>% # get order   ggplot(aes(y = count, x = reorder(species, order))) +     geom_col(width = 0.8, color = \"black\") +     facet_grid(~ area + period) +     ylab(\"Number of sampling points\") +     xlab(\"\")+     theme_bw()+     theme(text = element_text(size=8.0),           axis.text.y = element_text(face = \"italic\"),           panel.grid.major.y = element_blank(),           panel.grid.minor.x = element_blank()) +     coord_flip() +     scale_y_continuous(expand = c(0,0), breaks = scales::breaks_pretty(n = 4)) library(treemapify)  plot_fauna %>%   filter(taxon == \"Aves\" & period == 1) %>% # birds in period 1 only   group_by(area) %>% # only plot top 10 species   slice_max(count, n = 10) %>%    ggplot(aes(area = count, fill = area, subgroup = species)) +     geom_treemap() +     geom_treemap_subgroup_border(color = \"white\", size = 7) +     geom_treemap_subgroup_text(place = \"centre\",                                 size = 16,                                reflow = TRUE, # wrap text                                fontface = \"bold\") +   colorspace::scale_fill_discrete_qualitative(\"Harmonic\") +   labs(title=\"Urban birds of Singapore\",        caption=\"Most common spp. during surveys in 2016–2019\",        fill = NULL) +   theme(aspect.ratio = 5/4,         plot.title = element_text(hjust = 0.5, size = 30, face = \"bold\"),         plot.caption = element_text(size = 12, face = \"italic\"),         legend.position=\"bottom\",         legend.text = element_text(size = 12)) +   guides(fill = guide_legend(nrow = 1))"},{"path":"https://ecological-cities.github.io/biodivercity/articles/more/animals-species-analyses.html","id":"references","dir":"Articles > More","previous_headings":"","what":"References","title":"Animals: Species-level Analyses","text":"latest accepted taxonomic names local statuses example data based following sources: Birds: ebird Clements Checklist; Singapore Red Data Book (Davison et al. 2008) Butterflies: Field Guide Butterflies Singapore (Khew, 2010) Odonates: Dragonflies Singapore: updated checklist revision national conservation statuses (Ngiam & Cheong, 2016) Amphibians: Guide Amphibians & Reptiles Singapore (Lim & Lim, 2002)","code":""},{"path":[]},{"path":"https://ecological-cities.github.io/biodivercity/articles/more/animals-survey-protocols.html","id":"generate-new-sampling-points","dir":"Articles > More","previous_headings":"1. Pre-survey preparations","what":"Generate new sampling points","title":"Animals: Survey Protocols","text":"surveys can begin, survey points randomly generated within area interest. necessary, stratified random sampling can performed ensure sufficient representation sub-areas interest. Load example data sampling_areas (sf polygons) six residential towns (areas) Singapore, well patches forest cover sampling_forests within towns (sub-areas interest). Note forest cover multiple Survey Periods (see column name period) present sampling_forests. Refer help(sampling_areas) help(sampling_forests) details. Using area QT (Queenstown) example, sampling points can randomly generated. Subset example data area, focusing survey period 2. Next, within area interest, generate sampling points specified density buffer radius using function random_pt_gen(). case, specify one point per 50 hectares (500000 m2), radius 50 m point. radius value minimum distance generated points boundaries—ensures region animal surveys extend beyond boundaries Queenstown. excess sampling points can generated, case points unsuitable surveys (e.g. within areas inaccessible surveyors); instance, based specified parameters, 1.5 times required number points can generated. Finally, sub-areas interest (queenstown_forest) can also specified; sampling points stratified areas within outside queenstown_forest (.e. ‘Forest’ ‘Urban’ land cover types, respectively): output points sf object (POINT geometry) containing unique identifier, type (‘Normal’ ‘Sub-area’) geographical coordinates point: Visualise generated points within queenstown:","code":"data(sampling_areas) data(sampling_forests) head(sampling_areas) ## Simple feature collection with 6 features and 1 field ## Geometry type: POLYGON ## Dimension:     XY ## Bounding box:  xmin: 353618.5 ymin: 141963.4 xmax: 384748.9 ymax: 161017.8 ## Projected CRS: WGS 84 / UTM zone 48N ##   area                       geometry ## 1   BS POLYGON ((371976.9 150656, ... ## 2   JW POLYGON ((358502.3 149045, ... ## 3   PG POLYGON ((379073.3 156986.3... ## 4   QT POLYGON ((365379.3 145134.7... ## 5   TP POLYGON ((384558.6 150112.5... ## 6   WL POLYGON ((363419.4 160258.2... head(sampling_forests) ## Simple feature collection with 6 features and 2 fields ## Geometry type: POLYGON ## Dimension:     XY ## Bounding box:  xmin: 364789.6 ymin: 141985.4 xmax: 366695.6 ymax: 145712.4 ## Projected CRS: WGS 84 / UTM zone 48N ##   area period                       geometry ## 1   QT      1 POLYGON ((364789.6 145712.4... ## 2   QT      1 POLYGON ((365541.3 144630.1... ## 3   QT      1 POLYGON ((365538.2 144603.3... ## 4   QT      1 POLYGON ((365992 142465.8, ... ## 5   QT      1 POLYGON ((365472.9 143750.2... ## 6   QT      1 POLYGON ((365615.5 143720.4... queenstown <- sampling_areas[sampling_areas$area %in% \"QT\", ] queenstown_forest <- sampling_forests[sampling_forests$area == \"QT\" & sampling_forests$period == 2,] set.seed(123)  points <- random_pt_gen(boundaries = queenstown,                         area_per_pt = 500000,                         pt_radius = 50,                         excess_modifier = 1.5,                         sub_areas = queenstown_forest) ##  ##  Total number of points required: 13. ##  ##  Number of points required within 'normal' areas: 12. ##  Number of points required within 'sub-areas': 1. ##  ##  Number of points within 'normal' areas that were generated: 18 (n = 12, excess_modifier = 1.5). ##  Number of points within 'sub-areas' that were generated: 2 (n = 1, excess_modifier = 1.5). head(points) ## Simple feature collection with 6 features and 2 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: 364719 ymin: 142645.6 xmax: 367118.5 ymax: 143706.5 ## Projected CRS: WGS 84 / UTM zone 48N ##     type      id                         x ## 1 Normal normal1   POINT (366618 142645.6) ## 2 Normal normal2 POINT (366155.9 142805.7) ## 3 Normal normal3 POINT (365832.6 143706.5) ## 4 Normal normal4 POINT (367118.5 142757.4) ## 5 Normal normal5   POINT (364719 143528.1) ## 6 Normal normal6 POINT (366407.7 142761.1) ggplot(data = queenstown) +   geom_sf(fill = NA) +   theme_void() +   geom_sf(data = queenstown_forest, fill = \"darkgreen\") +   geom_sf(data = points, aes(col = type),           show.legend = \"point\")"},{"path":"https://ecological-cities.github.io/biodivercity/articles/more/animals-survey-protocols.html","id":"retain-sampling-points","dir":"Articles > More","previous_headings":"1. Pre-survey preparations","what":"Retain sampling points","title":"Animals: Survey Protocols","text":"surveys conducted across multiple periods (e.g. years), may need retain sampling points previous period, example, long-term monitoring location. case, new points can generated ensuring certain proportion points similar previous period. Note column type must also exist old dataset, value either Normal Sub-area. example, can choose retain points Queenstown Survey Period 1, assign variable queenstown_retain: wish retain half points, add queenstown_retain function argument ‘retain’, set argument ‘retain_prop’ 0.5: points retained, additional column ‘status’ indicates whether points generated ‘Old’ ‘New’.   Finally, surveyors can proceed assess sampling points surrounding areas (buffer radius, e.g., 50 m). Factors take note include (1) accessibility; (2) potential disturbance wild animals (e.g. nearby construction). ensure random sampling maintained, suitable points selected according order generated (column id).","code":"data(sampling_points) queenstown_retain <- sampling_points[sampling_points$area %in% \"QT\" & sampling_points$period %in% \"1\", ]  # create column 'type', which is based on the column 'landcover' in this example data queenstown_retain <- queenstown_retain %>%    mutate(type = ifelse(landcover == \"Urban\", \"Normal\", \"Sub-area\")) points <- random_pt_gen(boundaries = queenstown,                         area_per_pt = 500000,                         pt_radius = 50,                         excess_modifier = 1.5,                         sub_areas = queenstown_forest,                         retain = queenstown_retain,                         retain_prop = 0.5) ##  ##  Total number of points required: 13. ##  ##  Number of points required within 'normal' areas: 12. ##  Number of points required within 'sub-areas': 1. ##  ##  Number of points within 'normal' areas that were retained: 6 (n = 12, retain_prop = 0.5). ##  Number of points within 'sub-areas' that were retained: 1 (n = 1, retain_prop = 0.5). ##  Number of new points within 'normal' areas that were generated: 9 (n = 6, excess_modifier = 1.5). ##  Number of new points within 'sub-areas' that were generated: 1 (n = 0.5, excess_modifier = 1.5). head(points) ## Simple feature collection with 6 features and 3 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: 365267.7 ymin: 142299.4 xmax: 368232.5 ymax: 145167 ## Projected CRS: WGS 84 / UTM zone 48N ##        id status   type                  geometry ## 1 normal1    New Normal POINT (366281.2 142299.4) ## 2 normal2    New Normal POINT (368232.5 143131.8) ## 3 normal3    New Normal POINT (365983.4 143815.4) ## 4 normal4    New Normal   POINT (365267.7 145167) ## 5 normal5    New Normal POINT (365277.3 144234.9) ## 6 normal6    New Normal POINT (367253.4 143360.6) ggplot(data = queenstown) +   geom_sf(fill = NA) +   theme_void() +   geom_sf(data = queenstown_forest, fill = \"darkgreen\") +   geom_sf(data = points,           aes(col = type, shape = status))"},{"path":[]},{"path":"https://ecological-cities.github.io/biodivercity/articles/more/animals-survey-protocols.html","id":"data-format","dir":"Articles > More","previous_headings":"2. Animal surveys","what":"Data format","title":"Animals: Survey Protocols","text":"Animal survey data organised two separate tables, shown . Table: Example showing animal observations recorded surveys. row represents unique observation specified time, includes species name count (abundance) individuals. Refer help(animal_observations) information.  Table: Example showing information recorded animal survey. row represents unique 30-minute survey. Refer help(animal_surveys) information.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/articles/more/animals-survey-protocols.html","id":"data-collection","dir":"Articles > More","previous_headings":"2. Animal surveys","what":"Data collection","title":"Animals: Survey Protocols","text":"example datasets animal_observations animal_surveys, 30-minute surveys conducted within designated buffer radius specific animal (taxon) group. example, buffer radius Bird (Aves) surveys 50 m, Butterflies (Lepidoptera), Odonates (Odonata) Amphibians (Amphibia) 20 m sampling point location. survey time window also varies animal group, chosen based previous research. addition, Odonate Amphibian surveys conducted sampling points ephemeral water bodies performed within 24 hours rain event. rain event least light–moderate intensity, based real-time updates Meteorological Service Singapore. Table: Types animal surveys example data.  Surveyors move within buffer radius identify count number species. encounter recorded according individual species; information time, abundance distance center point also recorded. Refer help(animal_observations) information.  Figure: Example showing information recorded animal observations surveyor’s point--view.  Sampling points surveyed every two months (cycle adds six per survey period); sampling period thus stretched across year-long duration.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/articles/more/test-models.html","id":"prepare-data","dir":"Articles > More","previous_headings":"","what":"Prepare data","title":"Test Models","text":"Load models animal groups: Load new data animal surveys, used check accuracy models. example, focus birds (taxon ‘Aves’) example data animal_observations animal_surveys. Subset full data area/period/taxon interest, tally species richness (. species) birds using function tally_observations(): predict number bird species new animal surveys conducted, also need data landscape predictors summarised locations. biodivercity package includes examples sampling points, found dataset points_landscape. Join landscape data bird data using function inner_join(), transform data appropriate format. Note model object also includes random effect town, based sampling strategy used model’s input data. random effect (column) provided new data, predictions based ‘average’ value random effect (example, ‘average town’).","code":"filepath <- system.file(\"extdata\", \"models-manually-mapped.Rdata\", package = \"biodivercity\") load(filepath) data(\"animal_observations\") data(\"animal_surveys\")  birds_new <-  tally_observations(observations = animal_observations,                                   survey_ref = animal_surveys,                                  specify_area = c(\"PG\", \"QT\", \"TP\", \"JW\", \"BS\", \"WL\"),                                  specify_period = c(\"1\", \"2\"),                                  specify_taxon = \"Aves\", # birds                                  level = \"point\")  # at sampling points data(points_landscape)    birds_new <- birds_new %>%    dplyr::inner_join(points_landscape, by = c(\"point_id\", \"area\", \"period\"))  birds_new <- birds_new %>%    tidyr::pivot_wider(names_from = \"radius_m\", # pivot to wide format (add radius info to the column names)                      values_from = !matches(\"^area$\") &                         !matches(\"^period$\") &                         !matches(\"^taxon$\") &                         !matches(\"^point_id$\") &                         !matches(\"^n$\") &                         !matches(\"^radius_m$\"),                      names_glue = \"r{radius_m}m_{.value}\") %>%    dplyr::select(where(~!all(is.na(.x)))) %>% # remove columns where all values are NA   tidyr::drop_na() %>%  # remove any remaining NAs   dplyr::rename(town = area) # in this example, new data also from specific towns used to fit the models (random effect)"},{"path":"https://ecological-cities.github.io/biodivercity/articles/more/test-models.html","id":"bootstrapping-validation","dir":"Articles > More","previous_headings":"","what":"Bootstrapping validation","title":"Test Models","text":"Run function validate_newdata() obtain accuracy prediction based new data: Perform bootstrapped sampling output bird_xv, order obtain bootstrapped statistics accuracy metrics (100 scenarios). helper function booter() used:","code":"bird_xv <- validate_newdata(models = models_birds,                             recipe_data = recipe_birds,                             newdata = birds_new,                             response_var = \"n\") set.seed(123)  # combine animal groups as list  XV_dfs <- lapply(list(Birds = bird_xv), # only one animal group in this example                  function(x) booter(x, n =100)) # 100 repetitions"},{"path":"https://ecological-cities.github.io/biodivercity/articles/more/test-models.html","id":"visualise-accuracy","dir":"Articles > More","previous_headings":"","what":"Visualise accuracy","title":"Test Models","text":"Finally, can visualise accuracy model birds using package ggplot2. can done original scale response variable (counts): Figure: accuracy predictions taxon based new data supplied. Grey points denote mean errors, error bars denote 95% confidence interval across 100 bootstrapped samples.  values can also normalised, especially useful comparing multiple animal groups (example, birds shown): Figure: (scaled) accuracy predictions taxon based new data supplied. Grey points denote mean errors, error bars denote 95% confidence interval across 100 bootstrapped samples.","code":"# if multiple animal groups present, combine lists into single df for plotting XV_dfs <- XV_dfs %>%    bind_rows(.id = \"priority\")     # get lower/upper bounds for confidence interval and the root mean squared error (RMSE) XV_summaries <- XV_dfs %>%    dplyr::group_by(priority) %>%    dplyr::summarise(error_lwr = quantile(error_mean, 0.025, na.rm = TRUE),                    error_upr = quantile(error_mean, 0.975, na.rm = TRUE),                    error_normalised_lwr = quantile(error_normalised_mean, 0.025, na.rm = TRUE),                    error_normalised_upr = quantile(error_normalised_mean, 0.975, na.rm = TRUE),                    rmse_mean = mean(rmse, na.rm = TRUE))   # plot XV_dfs %>%     ggplot() +     geom_hline(yintercept = 0, linetype = 2) +     geom_jitter(aes(x = priority, y = error_mean),                 position = position_jitter(0.05),                 color = \"gray\", size = 0.1) +    geom_errorbar(data = XV_summaries,                  aes(x = priority, ymin = error_lwr, ymax = error_upr),                  width = 0.1) +    geom_text(data = XV_summaries,              aes(x = priority, y = max(error_upr) + 2.0,                   label = paste(\"RMSE =\\n\", round(rmse_mean, 2))),               size = 3.5) +     scale_y_continuous(expand = c(0, 2)) +     xlab(\"Animal group\") +     ylab(\"Mean prediction error (no. of species)\") +     theme_bw() +     theme(panel.grid.major.x = element_blank()) XV_dfs %>%     ggplot() +     geom_hline(yintercept = 0, linetype = 2) +     geom_jitter(aes(x = priority, y = error_normalised_mean),                 position = position_jitter(0.05),                 color = \"gray\", size = 0.1) +    geom_errorbar(data = XV_summaries,                   aes(x = priority, ymin = error_normalised_lwr, ymax = error_normalised_upr),                  width = 0.1) +     xlab(\"Animal group\") +     ylab(\"Mean prediction error (scaled)\") +     theme_bw() +     theme(panel.grid.major.x = element_blank())"},{"path":"https://ecological-cities.github.io/biodivercity/articles/process-animal.html","id":"data-format","dir":"Articles","previous_headings":"","what":"Data format","title":"Process Animal Data","text":"Data animal surveys organised two separate tables: (1) record animal observations survey; (2) reference information survey. existence (2) ensures surveys zero animal observations accounted . details data collected can found vignette(\"animals-survey-protocols\"). example data can loaded running following code: Table: Example showing animal observations recorded surveys. row represents unique observation specified time, includes species name count (abundance) individuals. Refer help(animal_observations) information.  Table: Example showing information recorded animal survey. row represents unique 30-minute survey. Refer help(animal_surveys) information.  necessary, convenience function filter_observations() may used filter animal survey data based specified grouping variables (e.g. area, period, taxon). example, observations bird (Aves) surveys Tampines (TP) conducted 2020-2021 (survey period 2) can filtered follows: Note column survey_id converted factor variable, includes levels present observation data (.e., butterflies observed surveys).","code":"data(animal_observations) data(animal_surveys) observations_subset <- filter_observations(observations = animal_observations,                                             survey_ref = animal_surveys,                                            specify_taxon = \"Aves\",                                            specify_area = \"TP\",                                            specify_period = \"2\")  observations_subset ## # A tibble: 4,180 × 13 ##    survey_id      point_id area  period cycle resampled start_time          ##    <fct>          <fct>    <chr>  <dbl> <dbl> <lgl>     <dttm>              ##  1 2 TPa3b 1 Aves TPa3b    TP         2     1 FALSE     2020-07-01 06:55:00 ##  2 2 TPa3b 1 Aves TPa3b    TP         2     1 FALSE     2020-07-01 06:55:00 ##  3 2 TPa3b 1 Aves TPa3b    TP         2     1 FALSE     2020-07-01 06:55:00 ##  4 2 TPa3b 1 Aves TPa3b    TP         2     1 FALSE     2020-07-01 06:55:00 ##  5 2 TPa3b 1 Aves TPa3b    TP         2     1 FALSE     2020-07-01 06:55:00 ##  6 2 TPa3b 1 Aves TPa3b    TP         2     1 FALSE     2020-07-01 06:55:00 ##  7 2 TPa3b 1 Aves TPa3b    TP         2     1 FALSE     2020-07-01 06:55:00 ##  8 2 TPa3b 1 Aves TPa3b    TP         2     1 FALSE     2020-07-01 06:55:00 ##  9 2 TPa3b 1 Aves TPa3b    TP         2     1 FALSE     2020-07-01 06:55:00 ## 10 2 TPa3b 1 Aves TPa3b    TP         2     1 FALSE     2020-07-01 06:55:00 ## # … with 4,170 more rows, and 6 more variables: time <dttm>, taxon <chr>, ## #   species <chr>, family <chr>, genus <chr>, abundance <dbl>"},{"path":"https://ecological-cities.github.io/biodivercity/articles/process-animal.html","id":"data-checks","dir":"Articles","previous_headings":"","what":"Data checks","title":"Process Animal Data","text":"Checks can performed remove group-level observations, prevent -counting number species summarising data afterwards. instance, species name observed animal unknown, surveyors may recorded observations higher (group) level classification, family genus. However, species recorded group-level entry may also identified correctly (species-level) surveys point/area (e.g., another surveyor). number species tallied, may result double-count particular animal species. example, two species swallows observed across points example dataset–Hirundo tahitica Hirundo rustica. Hirundo spp. entered (species column) species identified confidence: inflate tallied number species per point/area, since Hirundo spp. unique entry species column. example, example dataset, total three swallow species reported within Tampines (TP) area, rather two known present city Singapore: One way avoid double-counting remove group-level entries species particular classification group observed, specified granularity interest (point area). function check_taxongrps() identifies group-level entries, well total number species within grouping level (referring columns genus family). example, example dataset swallows within Tampines (TP) area, can check number unique species within Hirundo spp. genus Hirundinidae family: entries can subsequently removed observations_swallows, recorded species column: verify entries removed, can re-tally filtered observations. number species reduced one:","code":"observations_swallows <- observations_subset %>%    filter(grepl(\"Hirundo\", species)) %>%    group_by(area, point_id, species, family, genus) %>%    summarise()  observations_swallows ## # A tibble: 42 × 5 ## # Groups:   area, point_id, species, family [42] ##    area  point_id species          family       genus        ##    <chr> <fct>    <chr>            <chr>        <chr>        ##  1 TP    TPa3b    Hirundo rustica  Hirundinidae Hirundo spp. ##  2 TP    TPa3b    Hirundo tahitica Hirundinidae Hirundo spp. ##  3 TP    TPa15a   Hirundo rustica  Hirundinidae Hirundo spp. ##  4 TP    TPa15a   Hirundo spp.     Hirundinidae Hirundo spp. ##  5 TP    TPa68a_P Hirundo rustica  Hirundinidae Hirundo spp. ##  6 TP    TPa68a_P Hirundo tahitica Hirundinidae Hirundo spp. ##  7 TP    TPa70_P  Hirundo rustica  Hirundinidae Hirundo spp. ##  8 TP    TPa70_P  Hirundo tahitica Hirundinidae Hirundo spp. ##  9 TP    TPa16a   Hirundo spp.     Hirundinidae Hirundo spp. ## 10 TP    TPa16a   Hirundo tahitica Hirundinidae Hirundo spp. ## # … with 32 more rows observations_swallows %>%    group_by(area, species) %>% # tally by area   summarise() %>%   summarise(n()) ## # A tibble: 1 × 2 ##   area  `n()` ##   <chr> <int> ## 1 TP        3 to_remove <- check_taxongrps(observations_swallows, level = \"area\") to_remove ## # A tibble: 2 × 3 ## # Groups:   area [1] ##   area  name             n ##   <chr> <chr>        <int> ## 1 TP    Hirundo spp.     2 ## 2 TP    Hirundinidae     3 filtered_observations <- observations_swallows %>%   anti_join(to_remove, by = c(\"species\" = \"name\"))  filtered_observations ## # A tibble: 32 × 5 ## # Groups:   area, point_id, species, family [32] ##    area  point_id species          family       genus        ##    <chr> <fct>    <chr>            <chr>        <chr>        ##  1 TP    TPa3b    Hirundo rustica  Hirundinidae Hirundo spp. ##  2 TP    TPa3b    Hirundo tahitica Hirundinidae Hirundo spp. ##  3 TP    TPa15a   Hirundo rustica  Hirundinidae Hirundo spp. ##  4 TP    TPa68a_P Hirundo rustica  Hirundinidae Hirundo spp. ##  5 TP    TPa68a_P Hirundo tahitica Hirundinidae Hirundo spp. ##  6 TP    TPa70_P  Hirundo rustica  Hirundinidae Hirundo spp. ##  7 TP    TPa70_P  Hirundo tahitica Hirundinidae Hirundo spp. ##  8 TP    TPa16a   Hirundo tahitica Hirundinidae Hirundo spp. ##  9 TP    TPa54    Hirundo tahitica Hirundinidae Hirundo spp. ## 10 TP    TPb13_E  Hirundo tahitica Hirundinidae Hirundo spp. ## # … with 22 more rows filtered_observations %>%    group_by(area, species) %>% # tally by area   summarise() %>%   summarise(n()) ## # A tibble: 1 × 2 ##   area  `n()` ##   <chr> <int> ## 1 TP        2"},{"path":"https://ecological-cities.github.io/biodivercity/articles/process-animal.html","id":"summarise-data","dir":"Articles","previous_headings":"","what":"Summarise data","title":"Process Animal Data","text":"build predictive models chosen animal group, animal observations need aggregated level sampling point. example, can tally number bird (animal group ‘Aves’) species per point using function tally_observations(). Note function avoids double-counting group-level records, acting wrapper function check_taxongrps() (see previous section).","code":"animals_perpoint <-    tally_observations(observations = animal_observations,                       survey_ref = animal_surveys,                      level = \"point\",                      specify_taxon = \"Aves\")  head(animals_perpoint) ## # A tibble: 6 × 5 ##   area  period taxon point_id     n ##   <chr>  <dbl> <chr> <chr>    <int> ## 1 BS         1 Aves  BSa11a_P    38 ## 2 BS         1 Aves  BSa13_P     36 ## 3 BS         1 Aves  BSa14a      35 ## 4 BS         1 Aves  BSa1a       18 ## 5 BS         1 Aves  BSa2        16 ## 6 BS         1 Aves  BSa20a_E    31"},{"path":"https://ecological-cities.github.io/biodivercity/articles/process-landscape.html","id":"remotely-sensed-land-cover","dir":"Articles","previous_headings":"","what":"1. Remotely sensed land cover","title":"Process Landscape Data","text":"Land cover can useful predictor animal diversity. example, publicly-available data Sentinel-2 may downloaded using package sen2r. package includes data pre-processing steps cloud masking, atmospheric correction calculation spectral indices. Figure: screenshot sen2r graphical user interface accessible running sen2r::sen2r().  Data processing parameters can specified arguments within sen2r(), loaded JSON file. example , download data 1 Jan 30 Jun 2021, 15% cloud cover within sampling_areas. image, spectral indices NDVI NDWI2 processed; used map vegetation water cover, respectively. note need enter account credentials ESA Sentinel Hub. Detailed steps use servers (e.g. Google Cloud) can found package website. spectral index, can combine raster images captured within specified date range averaging pixel values across files, thus forming image mosaic. allows us avoid relying one image analysis, deal missing data (e.g. due high cloud cover) period interest. function mosaic_sen2r() creates mosaic averaging pixel values across multiple rasters. convenience function processes images based output folder structure sen2r(); ensure function argument parent_dir mosaic_sen2r() similar function argument path_out sen2r().  point, single image mosaic (continuous raster) spectral index, given area/period interest. continuous values rasters may used directly analyses, may instances want work discrete classes land cover. , can classify pixels one two classes (e.g. vegetated non-vegetated; water non-water), based adaptively derived threshold value. example, can use Otsu’s thresholding (Otsu, 1979), tends outperform techniques terms stability results processing speed, even presence > 2 peaks histogram pixel values (Bouhennache et al., 2019). can implemented using function threshold_otsu(). example, let’s load NDVI raster Punggol area Singapore subsequent classification. NDVI measure healthy green vegetation, based tendency plants reflect NIR & absorb red light. ranges -1 (non-vegetated) 1 (densely vegetated). figure shows histogram NDVI values within Punggol, well adaptively derived threshold value (vertical line). Figure: Distribution NDVI values across Punggol area Singapore, based mosaic images collected 2019-07-01 2021-06-30. Pixel values right dashed line may classified ‘vegetated’, left ‘non-vegetated’.  function classify_image_binary() can used directly classify continuous raster (e.g., image mosaic). Note uses threshold_otsu() internally define threshold value. See map examine original NDVI classified rasters within Punggol area Singapore (toggle map layers view one separately).  ‘Landscape metrics’ can used represent composition spatial patterns land cover within area interest. classified raster, metrics can summarised specific point locations multiple buffer radii. Metrics can also calculated various ‘levels’, unit analysis — patch, class, landscape (order widening spatial scale). Refer package landscapemetrics information. Table: Examples landscape metrics corresponding level(s) may calculated (e.g., class, landscape). Details hyperlinked text.  wide variety landscape metrics can summarised point locations interest, using function calc_lsm(). following example summarises ‘class-level’ metrics vegetation cover (veg_classified), 200 400 metres away points. returns list, element corresponding particular buffer radius. Column names include prefix indicating values landscape metrics derived classified raster (lsm_). list object can converted dataframe, new column indicating radii landscape metrics summarised.","code":"library(sen2r) sen2r() # view GUI # create sub-directories dir.create(paste0(output_dir, \"/sen2r\")) # for processed output files dir.create(paste0(output_dir, \"/sen2r/raw\")) # for raw files  # execute workflow out_paths <- sen2r(   timewindow = as.Date(c(\"2021-01-01\", \"2021-06-30\")),   max_cloud_safe = 15, # max 15% cloud cover in raw tile   max_mask = 15, # max 15% cloud cover over sampling_areas   extent = geojsonsf::sf_geojson(sampling_areas) # needs geojson as input   clip_on_extent = TRUE,   list_indices = c(\"NDVI\", \"NDWI2\") # to map vegetation and water   list_rgb = \"RGB432B\", # output an RGB image as well   path_l2a = paste0(output_dir, \"/sen2r/raw\"),    path_l1c = paste0(output_dir, \"/sen2r/raw\"),   path_out = paste0(output_dir, \"/sen2r\"),   path_indices = paste0(output_dir, \"/sen2r\")) mosaic_sen2r(parent_dir = paste0(output_dir, \"/sen2r\")) ndvi_mosaic <-    system.file(\"extdata\", \"ndvi_mosaic.tif\", package=\"biodivercity\") %>%    terra::rast()  # get Otsu's threshold threshold <- threshold_otsu(ndvi_mosaic) threshold ## [1] 0.3945684 veg_classified <- classify_image_binary(ndvi_mosaic, threshold = \"otsu\")  tm_basemap(c(\"CartoDB.Positron\")) +   tm_shape(ndvi_mosaic) +     tm_raster(palette = c(\"Greens\")) +   tm_shape(veg_classified) +     tm_raster(style = \"cat\",             palette = c(\"grey\", \"darkgreen\")) +     tm_shape(points) + tm_dots() lsm_perpoint <-    calc_lsm(raster = veg_classified,            points = points,            buffer_sizes = c(200, 400), # in metres            level = c(\"class\"),            class_names = c(\"veg\"), # land cover class name            class_values = c(1)) # pixel value of class  lsm_perpoint ## $`200` ## # A tibble: 3 × 57 ##   point_id percentage_…¹ lsm_v…² lsm_v…³ lsm_v…⁴ lsm_v…⁵ lsm_v…⁶ lsm_v…⁷ lsm_v…⁸ ##   <chr>            <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> ## 1 1                 80.0    72.6    299.   0.169   0.505    2.87    229.    4.95 ## 2 2                 99.9    68.4    169.   0.183   0.309    3.47    175.    6.33 ## 3 3                100.     74.7    157.   0.264   0.415    3.17    154.   12.2  ## # … with 48 more variables: lsm_veg_cai_sd <dbl>, lsm_veg_circle_cv <dbl>, ## #   lsm_veg_circle_mn <dbl>, lsm_veg_circle_sd <dbl>, lsm_veg_clumpy <dbl>, ## #   lsm_veg_cohesion <dbl>, lsm_veg_contig_cv <dbl>, lsm_veg_contig_mn <dbl>, ## #   lsm_veg_contig_sd <dbl>, lsm_veg_core_cv <dbl>, lsm_veg_core_mn <dbl>, ## #   lsm_veg_core_sd <dbl>, lsm_veg_cpland <dbl>, lsm_veg_dcad <dbl>, ## #   lsm_veg_dcore_cv <dbl>, lsm_veg_dcore_mn <dbl>, lsm_veg_dcore_sd <dbl>, ## #   lsm_veg_division <dbl>, lsm_veg_ed <dbl>, lsm_veg_enn_cv <dbl>, … ##  ## $`400` ## # A tibble: 3 × 57 ##   point_id percentage_…¹ lsm_v…² lsm_v…³ lsm_v…⁴ lsm_v…⁵ lsm_v…⁶ lsm_v…⁷ lsm_v…⁸ ##   <chr>            <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> ## 1 1                 66.7    74.8    363.   0.302    1.10    11.5    191.    6.34 ## 2 2                 99.1    77.0    318.   0.339    1.08    17.6    209.    6.95 ## 3 3                 97.0    78.0    379.   0.301    1.14    15.1    183.    7.35 ## # … with 48 more variables: lsm_veg_cai_sd <dbl>, lsm_veg_circle_cv <dbl>, ## #   lsm_veg_circle_mn <dbl>, lsm_veg_circle_sd <dbl>, lsm_veg_clumpy <dbl>, ## #   lsm_veg_cohesion <dbl>, lsm_veg_contig_cv <dbl>, lsm_veg_contig_mn <dbl>, ## #   lsm_veg_contig_sd <dbl>, lsm_veg_core_cv <dbl>, lsm_veg_core_mn <dbl>, ## #   lsm_veg_core_sd <dbl>, lsm_veg_cpland <dbl>, lsm_veg_dcad <dbl>, ## #   lsm_veg_dcore_cv <dbl>, lsm_veg_dcore_mn <dbl>, lsm_veg_dcore_sd <dbl>, ## #   lsm_veg_division <dbl>, lsm_veg_ed <dbl>, lsm_veg_enn_cv <dbl>, … lsm_perpoint %>%    bind_rows(.id = \"radius\") ## # A tibble: 6 × 58 ##   radius point…¹ perce…² lsm_v…³ lsm_v…⁴ lsm_v…⁵ lsm_v…⁶ lsm_v…⁷ lsm_v…⁸ lsm_v…⁹ ##   <chr>  <chr>     <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> ## 1 200    1          80.0    72.6    299.   0.169   0.505    2.87    229.    4.95 ## 2 200    2          99.9    68.4    169.   0.183   0.309    3.47    175.    6.33 ## 3 200    3         100.     74.7    157.   0.264   0.415    3.17    154.   12.2  ## 4 400    1          66.7    74.8    363.   0.302   1.10    11.5     191.    6.34 ## 5 400    2          99.1    77.0    318.   0.339   1.08    17.6     209.    6.95 ## 6 400    3          97.0    78.0    379.   0.301   1.14    15.1     183.    7.35 ## # … with 48 more variables: lsm_veg_cai_sd <dbl>, lsm_veg_circle_cv <dbl>, ## #   lsm_veg_circle_mn <dbl>, lsm_veg_circle_sd <dbl>, lsm_veg_clumpy <dbl>, ## #   lsm_veg_cohesion <dbl>, lsm_veg_contig_cv <dbl>, lsm_veg_contig_mn <dbl>, ## #   lsm_veg_contig_sd <dbl>, lsm_veg_core_cv <dbl>, lsm_veg_core_mn <dbl>, ## #   lsm_veg_core_sd <dbl>, lsm_veg_cpland <dbl>, lsm_veg_dcad <dbl>, ## #   lsm_veg_dcore_cv <dbl>, lsm_veg_dcore_mn <dbl>, lsm_veg_dcore_sd <dbl>, ## #   lsm_veg_division <dbl>, lsm_veg_ed <dbl>, lsm_veg_enn_cv <dbl>, …"},{"path":"https://ecological-cities.github.io/biodivercity/articles/process-landscape.html","id":"openstreetmap-landscape-elements","dir":"Articles","previous_headings":"","what":"2. OpenStreetMap landscape elements","title":"Process Landscape Data","text":"Landscape elements can retrieved open-source maps OpenStreetMap (OSM). instance, built elements building polygons road lines can extracted sampling_areas using functions get_buildings_osm() get_roads_osm(), respectively. date argument, specified, must snapshot date present within Geofabrik database. , latest data downloaded. example, download urban elements date 1 Jan 2021 view interactive map:  function calc_osm() can used summarise following metrics buildings roads, multiple buffer radii. Building footprint area (buildingArea_m2) Building gross floor area (buildingGFA_m2) - Column . levels must present Average number levels (buildingAvgLvl) - Column . levels must present Building Volume (buildingVol_m3) - Column height must present Floor area ratio (buildingFA_ratio) - Column . levels must present Total lane length (lanelength) - Column . lanes must present Lane density (laneDensity) - Column . lanes must present  example, can calculate building metrics 200 400 metres away points. returns list, element corresponding particular buffer radius. Column names include prefix indicating values OpenStreetMap (osm_). list object can converted dataframe, new column indicating radii building metrics summarised.","code":"dir.create(paste0(output_dir, \"/osm\")) # create sub-directory for raw data (avoid re-downloading each time)  buildings <- get_buildings_osm(place = sampling_areas,                                date = as.Date(\"2021-01-01\"),                                dir_raw = paste0(output_dir, \"/osm\"))  roads <- get_roads_osm(sampling_areas,                        date = as.Date(\"2021-01-01\"),                        dir_raw = paste0(output_dir, \"/osm\"))  # alternatively, load example dataset from package filepath <- system.file(\"extdata\", \"osm_data.Rdata\", package = \"biodivercity\") load(filepath)  # plot tm_basemap(c(\"CartoDB.Positron\")) +   tm_shape(sampling_areas) + tm_borders() +   tm_shape(buildings) + tm_polygons(col = \"levels\") +   tm_shape(roads) + tm_lines(col = \"lanes\", palette = \"YlOrRd\")+   tm_shape(points) + tm_dots() osm_perpoint <-    calc_osm(vector = buildings,             points = points,            name = \"buildings\",            buffer_sizes = c(200, 400),            building_levels = \"levels\")   osm_perpoint ## $`200` ## Simple feature collection with 3 features and 6 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: 377261.2 ymin: 154093.9 xmax: 378843.9 ymax: 155606.9 ## Projected CRS: WGS 84 / UTM zone 48N ##   point_id osm_buildingVol_m3 osm_buildingArea_m2 osm_buildingGFA_m2 ## 1        1                 NA            30093.71           170253.0 ## 2        2                 NA            35088.81           422504.9 ## 3        3                 NA            15261.99           151769.7 ##   osm_buildingAvgLvl osm_buildingFA_ratio                         x ## 1           5.657429             1.354830 POINT (378568.6 154093.9) ## 2          12.041015             3.362187 POINT (378843.9 154203.7) ## 3           9.944292             1.207745 POINT (377261.2 155606.9) ##  ## $`400` ## Simple feature collection with 3 features and 6 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: 377261.2 ymin: 154093.9 xmax: 378843.9 ymax: 155606.9 ## Projected CRS: WGS 84 / UTM zone 48N ##   point_id osm_buildingVol_m3 osm_buildingArea_m2 osm_buildingGFA_m2 ## 1        1                 NA            91711.48           879935.0 ## 2        2                 NA           133723.31          1241646.8 ## 3        3                 NA            74207.59           523879.4 ##   osm_buildingAvgLvl osm_buildingFA_ratio                         x ## 1           9.594600             1.750575 POINT (378568.6 154093.9) ## 2           9.285193             2.470178 POINT (378843.9 154203.7) ## 3           7.059647             1.042225 POINT (377261.2 155606.9) do.call(rbind, # alternative way to convert list to dataframe        mapply(transform, osm_perpoint,                radius = names(osm_perpoint), # new column               SIMPLIFY = FALSE)) ## Simple feature collection with 6 features and 7 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: 377261.2 ymin: 154093.9 xmax: 378843.9 ymax: 155606.9 ## Projected CRS: WGS 84 / UTM zone 48N ##       point_id osm_buildingVol_m3 osm_buildingArea_m2 osm_buildingGFA_m2 ## 200.1        1                 NA            30093.71           170253.0 ## 200.2        2                 NA            35088.81           422504.9 ## 200.3        3                 NA            15261.99           151769.7 ## 400.1        1                 NA            91711.48           879935.0 ## 400.2        2                 NA           133723.31          1241646.8 ## 400.3        3                 NA            74207.59           523879.4 ##       osm_buildingAvgLvl osm_buildingFA_ratio radius                         x ## 200.1           5.657429             1.354830    200 POINT (378568.6 154093.9) ## 200.2          12.041015             3.362187    200 POINT (378843.9 154203.7) ## 200.3           9.944292             1.207745    200 POINT (377261.2 155606.9) ## 400.1           9.594600             1.750575    400 POINT (378568.6 154093.9) ## 400.2           9.285193             2.470178    400 POINT (378843.9 154203.7) ## 400.3           7.059647             1.042225    400 POINT (377261.2 155606.9)"},{"path":"https://ecological-cities.github.io/biodivercity/articles/process-landscape.html","id":"manually-generated-landscape-elements","dir":"Articles","previous_headings":"","what":"3. Manually generated landscape elements","title":"Process Landscape Data","text":"may cases intend summarise data generated manually, instance, -site mapping artificial design scenarios (see vignette(\"use-cases\")). Load example data landscape vectors (points, polygons, lines) within Punggol (PG) area Singapore (Chong et al., 2014, 2019), visualised interactive map . Note water bodies mapped within target area. function calc_manual() provided interested users, calculate following landscape predictors multiple buffer radii. Column names include prefix indicating values manually generated (man_). Building footprint area (buildingArea_m2) Building gross floor area (buildingGFA_m2) - Column . levels must present Average number levels (buildingAvgLvl) - Column . levels must present Floor area ratio (buildingFA_ratio) - Column . levels must present Total lane length (lanelength) - Column . lanes must present Lane density (laneDensity) - Column . lanes must present Count trees (tree_count) Species richness trees (tree_sprich) - Column species name must present Percentage landscape area shrubs (shrub_pland) Species richness shrubs (shrub_sprich) - Column species name must present Percentage landscape area turf (turf_pland) Percentage landscape area natural vegetation (natveg_pland) Percentage landscape area water (water_pland)  example, can summarise species count trees 50 metres away points. returns list, element corresponding particular buffer radius. list object can converted dataframe, new column indicating radii metrics summarised.","code":"filepath <- system.file(\"extdata\", \"landscape-vectors_mapped.Rdata\", package = \"biodivercity\") # load example data load(filepath) manual_perpoint <-   calc_manual(vector = trees, name = \"trees\",               points = points, buffer_sizes = 50,               plant_species = \"species\")  manual_perpoint ## $`50` ## Simple feature collection with 3 features and 3 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: 377261.2 ymin: 154093.9 xmax: 378843.9 ymax: 155606.9 ## Projected CRS: WGS 84 / UTM zone 48N ##   point_id man_tree_sprich man_tree_count                         x ## 1        1               1              2 POINT (378568.6 154093.9) ## 2        2              20            100 POINT (378843.9 154203.7) ## 3        3               0              0 POINT (377261.2 155606.9) manual_perpoint %>%    bind_rows(.id = \"radius\") ## Simple feature collection with 3 features and 4 fields ## Geometry type: POINT ## Dimension:     XY ## Bounding box:  xmin: 377261.2 ymin: 154093.9 xmax: 378843.9 ymax: 155606.9 ## Projected CRS: WGS 84 / UTM zone 48N ##   radius point_id man_tree_sprich man_tree_count                         x ## 1     50        1               1              2 POINT (378568.6 154093.9) ## 2     50        2              20            100 POINT (378843.9 154203.7) ## 3     50        3               0              0 POINT (377261.2 155606.9)"},{"path":"https://ecological-cities.github.io/biodivercity/articles/process-landscape.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Process Landscape Data","text":"Chong KY, Teo S, Kurukulasuriya B, Chung YF, Giam X & Tan HTW (2019) effects landscape scale greenery traffic relationships urban birds butterflies. Urban Ecosystems, 22(5): 917–926. Chong KY, Teo S, Kurukulasuriya B, Chung YF, Rajathurai S & Tan HTW (2014) green good: Different effects natural cultivated components urban vegetation bird butterfly diversity. Biological Conservation, 171: 299–309.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/articles/use-cases.html","id":"citywide-monitoring","dir":"Articles","previous_headings":"","what":"1. Citywide monitoring","title":"Model Use Cases","text":"Models built using remotely sensed data can used predict diversity animal group across time geographical space. example, satellite imagery processed input predictors can used monitor biodiversity past present. interactive map shows example local (Alpha) diversity predicted birds across subzones Singapore year 2020, pixel resolution 500 m x 500 m. Depending level detail required, pixel resolution can adjusted accordingly.  Pixel values within zones used city planning can summarised, allow comparisons made planning units. resulting distribution summarised values can subsequently used compare ‘performance’ planning unit relative others city, set benchmark/target desired level ‘performance’ (Figure 1). example, subzones Singapore benchmarked mean distribution, shown : Figure 1: Histogram showing distribution values mean number bird species per pixel within 332 subzones Singapore. Subzones assigned arbitrary score 0-4 based standard deviations mean (.e., performance ‘average’ subzone).  spatial predictions made multiple snapshots time, benchmarking based whether average pixel value particular planning unit increases decreases two time periods. example, ‘net loss’ biodiversity set target, negative score assigned average pixel value reduced, positive score assigned average pixel value increases. Finally, worth noting full customisation pixel size boundaries within summarise pixel values can done. provides flexibility according level analysis (e.g., geographical scale) required user. summarising pixel values within zones used city planning, animal diversity may assessed alongside indices also summarised level planning units, thus providing comprehensive view components related biodiversity beyond.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/articles/use-cases.html","id":"biodiversity-in-the-future","dir":"Articles","previous_headings":"","what":"2. Biodiversity in the future","title":"Model Use Cases","text":"monitoring changes biodiversity, also need assess future urban developments, instance, see proposed designs can effectively mitigate loss biodiversity. since landscapes exist, snapshots remotely sensed data can used. therefore important carefully consider data compatibility different use cases building using predictive models. Urban design planning involves consideration multiple design scenarios. Manually generated landscape elements (e.g., vector data vegetation water) may produced prospective designs, format types data must compatible used predictive models. instance, selecting landscape predictors build models, land cover classification discrete rasters compatible manually generated data, compared continuous rasters feasibly calculated (e.g., spectral indices NDVI). Vegetation generated design scenarios can rasterized discrete land cover-types (Figure 2), used replace remotely sensed data within regions interest (Figure 3). amendments landscape data can made across site slated urban development, used make spatial predictions particular design scenario. Figure 2: Example showing manually generated vector data vegetation can converted classified raster vegetation types used predictive models.  Figure 3: Example showing classified raster remotely sensed vegetation can amended manually generated vector data (rasterised).  data conversions may allow similar predictors (hence models) used different use cases, noted potential mismatches different data sources may result inaccurate predictions. Reducing mismatch remotely sensed manually generated data important gap addressed. instance, level detail design scenarios may include exact locations planted trees, estimated canopy projection areas may vary greatly reality planting. Furthermore, remotely sensed data represents top-view landscape, effect multi-tiered planting accounted within landscape predictors. Collaboration researchers practitioners needed ensure model workflows align data formats outputs used design practice, suitable methods used ensure artificially generated datasets compatible accurate reality implementation.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/articles/use-cases.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Model Use Cases","text":"Government Singapore (2020). Master Plan 2019 Subzone Boundary (Sea). data.gov.sg Released terms Singapore Open Data Licence version 1.0.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Edwin Tan. Author, maintainer.            Package development, input geospatial analysis, data collection/curation, methodology Xiao Ping Song. Author.            Project/issue management data workflow, package development, input geospatial analysis, methodology Hong Jhun Sim. Author.            Input community diversity, methodology, data collection Justin Nai. Author.            Data curation species-level attributes, data collection, methodology Kwek Yan Chong. Author.            Conceptualisation, funding acquisition, methodology, supervision","code":""},{"path":"https://ecological-cities.github.io/biodivercity/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Tan, E. Y. W., Song, X. P., Sim, H. J., Nai, J., Chong, K. Y. (2022). biodivercity: R package assess diversity animal species urban areas. R Package version 0.0.1 (unreleased). https://github.com/ecological-cities/biodivercity.","code":"@Manual{,   title = {biodivercity: An R package to assess the diversity of animal species in urban areas},   author = {Edwin YW Tan and Xiao Ping Song and Hong Jhun Sim and Justin Nai and Kwek Yan Chong},   year = {2022},   url = {https://github.com/ecological-cities/biodivercity},   note = {R package version 0.0.1 (unreleased)}, }"},{"path":[]},{"path":"https://ecological-cities.github.io/biodivercity/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Biodiversity indices for city landscapes","text":"Many frameworks assess ‘biodiversity’ proposed research practice. offer holistic view, including parts ecosystem (e.g., climate, soil, air, water, landscape structure, genetic variation) may contribute ‘total biodiversity’ within given region. However, conceptualisations ‘biodiversity’ may include components low causal proximity (e.g., indirect effect landscape species diversity), may difficult measure wide spatial scales (e.g., genetic diversity, plant species diversity). decision-making, unnecessary complexity may also risk contributing mistrust ignorance overall assessment. biodivercity R package assessing diversity animal species urban areas. provides way directly assess habitat value urban landscapes, based empirical effect chosen animal groups (e.g., taxa birds, butterflies, odonates, amphibians, etc.). key features include: Step--step protocols random point sampling animal group within areas interest Generate data summaries animals surveyed, multiple levels granularity (e.g., areas, periods, animal groups, species) Download process landscape data within areas interest (e.g., satellite imagery, OpenStreetMap data) Convert vector data generated future design scenarios formats suitable model predictions Build validate predictive models assess local (Alpha), community (Beta) total (Gamma) diversity animal group Use models make pixel-based spatial predictions across new areas future Summarise predictions benchmark compare biodiversity ‘performance’ planning units across city","code":""},{"path":"https://ecological-cities.github.io/biodivercity/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Biodiversity indices for city landscapes","text":"cite biodivercity acknowledge use, please cite following: Tan, E. Y. W., Song, X. P., Sim, H. J., Nai, J., Chong, K. Y. (2022). biodivercity: R package assess diversity animal species urban areas. R package version 0.0.1 (unreleased). https://github.com/ecological-cities/biodivercity. get BibTex entry, run citation(\"biodivercity\").","code":""},{"path":"https://ecological-cities.github.io/biodivercity/index.html","id":"data-sources","dir":"","previous_headings":"","what":"Data sources","title":"Biodiversity indices for city landscapes","text":"Development Biodiversity Index Residential Towns using Biodiversity Field Surveys, 2016–2022. Ministry National Development Research Fund (MNDRF) Grant. Awarded National University Singapore Singapore Housing & Development Board.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Biodiversity indices for city landscapes","text":"Baker, D. J., Maclean, . M., Goodall, M., & Gaston, K. J. (2021). Species distribution modelling needed support ecological impact assessments. Journal Applied Ecology, 58(1), 21-26. Soto-Navarro, C. ., Harfoot, M., Hill, S. L. L., Campbell, J., Mora, F., Campos, C., … & Burgess, N. D. (2021). Towards multidimensional biodiversity index national application. Nature Sustainability, 1-10.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/animal_observations.html","id":null,"dir":"Reference","previous_headings":"","what":"Animal observation records from point surveys — animal_observations","title":"Animal observation records from point surveys — animal_observations","text":"Time-based point observations species abundance sampling points within six towns (areas) Singapore: Punggol (PG), Queenstown (QT), Tampines (TP), Jurong West (JW), Bishan (BS) Woodlands (WL).","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/animal_observations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Animal observation records from point surveys — animal_observations","text":"","code":"data(animal_observations)"},{"path":"https://ecological-cities.github.io/biodivercity/reference/animal_observations.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Animal observation records from point surveys — animal_observations","text":"Dataframe","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/animal_observations.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Animal observation records from point surveys — animal_observations","text":"Development Biodiversity Index Residential Towns using Biodiversity Field Surveys, 2016–2022. Ministry National Development Research Fund (MNDRF) Grant. Awarded National University Singapore Singapore Housing & Development Board.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/animal_observations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Animal observation records from point surveys — animal_observations","text":"sampling points (point_id) randomly generated within town (area). Four types animal surveys conducted sampling points, corresponding four animal groups (column taxon): Birds (Aves), Butterflies (Lepidoptera), Odonates (Odonata) Amphibians (Amphibia). addition name species abundance (number observed) particular time point, names family genus also made available. sampling period stretched across year-long duration, sampling points surveyed every two months (cycle adds 6 per period). points sampled second period (column resampled TRUE). start_time represents start time 30-minute survey. surveys took place years 2016 2022.","code":""},{"path":[]},{"path":"https://ecological-cities.github.io/biodivercity/reference/animal_observations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Animal observation records from point surveys — animal_observations","text":"","code":"head(animal_observations) #> # A tibble: 6 × 13 #>   survey_id             point_id  area  period cycle resam…¹ start_time          #>   <chr>                 <chr>     <chr>  <dbl> <dbl> <lgl>   <dttm>              #> 1 1 QTNa14a_P 1 Odonata QTNa14a_P QT         1     1 NA      2016-08-04 14:00:00 #> 2 1 QTNa14a_P 1 Odonata QTNa14a_P QT         1     1 NA      2016-08-04 14:00:00 #> 3 1 QTNa14a_P 1 Odonata QTNa14a_P QT         1     1 NA      2016-08-04 14:00:00 #> 4 1 QTNa14a_P 1 Odonata QTNa14a_P QT         1     1 NA      2016-08-04 14:00:00 #> 5 1 QTNa14a_P 1 Odonata QTNa14a_P QT         1     1 NA      2016-08-04 14:00:00 #> 6 1 QTNb1a_P 1 Odonata  QTNb1a_P  QT         1     1 NA      2016-08-04 14:44:00 #> # … with 6 more variables: time <dttm>, taxon <chr>, species <chr>, #> #   family <chr>, genus <chr>, abundance <dbl>, and abbreviated variable name #> #   ¹​resampled"},{"path":"https://ecological-cities.github.io/biodivercity/reference/animal_surveys.html","id":null,"dir":"Reference","previous_headings":"","what":"Animal surveys conducted at sampling points — animal_surveys","title":"Animal surveys conducted at sampling points — animal_surveys","text":"Details animal survey conducted sampling points within six towns (areas) Singapore: Punggol (PG), Queenstown (QT), Tampines (TP), Jurong West (JW), Bishan (BS) Woodlands (WL).","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/animal_surveys.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Animal surveys conducted at sampling points — animal_surveys","text":"","code":"data(animal_surveys)"},{"path":"https://ecological-cities.github.io/biodivercity/reference/animal_surveys.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Animal surveys conducted at sampling points — animal_surveys","text":"Dataframe","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/animal_surveys.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Animal surveys conducted at sampling points — animal_surveys","text":"Development Biodiversity Index Residential Towns using Biodiversity Field Surveys, 2016–2022. Ministry National Development Research Fund (MNDRF) Grant. Awarded National University Singapore Singapore Housing & Development Board.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/animal_surveys.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Animal surveys conducted at sampling points — animal_surveys","text":"sampling points (point_id) randomly generated within town (area). Four types animal surveys conducted sampling points, corresponding four animal groups (column taxon): Birds (Aves), Butterflies (Lepidoptera), Odonates (Odonata) Amphibians (Amphibia). sampling period stretched across year-long duration, sampling points surveyed every two months (cycle adds 6 per period). points sampled second period (column resampled TRUE). surveys took place years 2016 2022.","code":""},{"path":[]},{"path":"https://ecological-cities.github.io/biodivercity/reference/animal_surveys.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Animal surveys conducted at sampling points — animal_surveys","text":"","code":"head(animal_surveys) #> # A tibble: 6 × 9 #>   survey_id   point…¹ area  period cycle taxon resam…² start_time          notes #>   <chr>       <chr>   <chr>  <dbl> <dbl> <chr> <lgl>   <dttm>              <chr> #> 1 1 QTNa14a_… QTNa14… QT         1     1 Odon… NA      2016-08-04 14:00:00 NA    #> 2 1 QTNb1a_P… QTNb1a… QT         1     1 Odon… NA      2016-08-04 14:44:00 NA    #> 3 1 QTNa14a_… QTNa14… QT         1     1 Amph… NA      2016-08-04 19:55:00 NA    #> 4 1 QTNb1a_P… QTNb1a… QT         1     1 Amph… NA      2016-08-04 20:40:00 NA    #> 5 1 PGT15 1 … PGT15   PG         1     1 Aves  NA      2016-08-08 07:00:00 NA    #> 6 1 PGT14 1 … PGT14   PG         1     1 Aves  NA      2016-08-08 07:33:00 NA    #> # … with abbreviated variable names ¹​point_id, ²​resampled"},{"path":"https://ecological-cities.github.io/biodivercity/reference/booter.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to generate bootstrapped statistics of accuracy metrics — booter","title":"Helper function to generate bootstrapped statistics of accuracy metrics — booter","text":"Helper function generate bootstrapped statistics accuracy metrics","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/booter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to generate bootstrapped statistics of accuracy metrics — booter","text":"","code":"booter(df_predictions, n)"},{"path":"https://ecological-cities.github.io/biodivercity/reference/booter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to generate bootstrapped statistics of accuracy metrics — booter","text":"df_predictions Dataframe predictions function validate_newdata() (output MuMIn::get.models()). n Number repetitions","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/calc_lsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate landscape metrics at point locations — calc_lsm","title":"Calculate landscape metrics at point locations — calc_lsm","text":"Calculate landscape metrics classified raster, specific point locations buffer radii.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/calc_lsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate landscape metrics at point locations — calc_lsm","text":"","code":"calc_lsm(   raster,   points,   buffer_sizes,   class_names = NULL,   class_values = NULL,   landscape_name = NULL,   point_id = \"point_id\",   period = \"period\",   what = NULL,   level = NULL,   ... )"},{"path":"https://ecological-cities.github.io/biodivercity/reference/calc_lsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate landscape metrics at point locations — calc_lsm","text":"raster SpatRaster object (terra::rast()). Classified land cover raster object analysed. number layers correspond number survey periods present points. points Points locations (sf object) calculate metrics. buffer_sizes Radius circle (mapunits) point location; metrics calculated within buffer area. class_names Vector (character) land cover class names used identify corresponding integer values class_values. class_values Vector (integer) values interest within raster. include value 0. landscape_name Character string name landscape. Used label landscape-level metrics. point_id Column name sampling point id within points sf. period Column name survey period within points sf. column contain integers correspond number layers raster. Argument passed landscapemetrics::calculate_lsm(). Currently supports class- landscape-level metrics level Argument passed landscapemetrics::calculate_lsm(). Currently supports class- landscape-level metrics. ... Additional arguments (e.g. type=) passed landscapemetrics::calculate_lsm().","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/calc_lsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate landscape metrics at point locations — calc_lsm","text":"list containing features/metrics calculated points, appended new columns. element list corresponds particular buffer size.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/calc_manual.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate metrics based on manually generated data at point locations — calc_manual","title":"Calculate metrics based on manually generated data at point locations — calc_manual","text":"Calculate metrics manually generated vector data, specific point locations buffer radii. Currently supports vector data buildings (polygons), roads (lines), trees (points), shrubs (polygons), turf (polygons), natural vegetation (polygons), water (polygons).","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/calc_manual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate metrics based on manually generated data at point locations — calc_manual","text":"","code":"calc_manual(   vector,   name = NULL,   points,   buffer_sizes,   plant_species = \"species\",   building_levels = \"levels\",   road_lanes = \"lanes\" )"},{"path":"https://ecological-cities.github.io/biodivercity/reference/calc_manual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate metrics based on manually generated data at point locations — calc_manual","text":"vector sf dataframe containing geometric features (points, polygons lines) summarised. Coordinate reference system similar points. name Specify either \"buildings\", \"roads\", \"trees\", \"shrubs', \"turf\", \"natveg\", \"water\". Used represent type data vector, processed differently. points Point locations (sf object) calculate metrics. buffer_sizes Radius circle (mapunits) point location; metrics calculated within buffer area. plant_species Column name vector plant species names, input vector vegetation (.e., argument name= \"trees\" \"shrubs\"). Defaults \"species\". Column data type character. building_levels Column name vector number building levels, name=\"buildings\". Defaults \"levels\". Column data numeric. road_lanes Column name vector number lanes per road line, name=\"roads\". Defaults \"lanes\". Column data numeric.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/calc_manual.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate metrics based on manually generated data at point locations — calc_manual","text":"list containing features/metrics calculated points, appended new columns. element list corresponds particular buffer size.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/calc_osm.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate metrics based on OpenStreetMap data at point locations — calc_osm","title":"Calculate metrics based on OpenStreetMap data at point locations — calc_osm","text":"Calculate metrics OpenStreetMap (OSM) vector data, specific point locations buffer radii. Currently supports vector data buildings (polygons) roads (lines).","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/calc_osm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate metrics based on OpenStreetMap data at point locations — calc_osm","text":"","code":"calc_osm(   vector,   name = NULL,   points,   buffer_sizes,   building_ndsm = NULL,   building_height = \"height\",   building_levels = \"levels\",   road_lanes = \"lanes\" )"},{"path":"https://ecological-cities.github.io/biodivercity/reference/calc_osm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate metrics based on OpenStreetMap data at point locations — calc_osm","text":"vector sf dataframe either buildings (polygons) roads (lines). name Specify either \"buildings\" \"roads\". points Point locations (sf object) calculate metrics. buffer_sizes Radius circle (mapunits) point location; metrics calculated within buffer area. building_ndsm SpatRaster object (terra::rast()) (optional). continuous raster normalised Digital Surface Model, used calculate building heights. absent (NULL) variable named predictors_osm, column building_height used instead. Defaults NULL. building_height Column name vector building height. Defaults \"height\". building_levels Column name vector number building levels. Defaults \"levels\". Column data numeric. road_lanes Column name vector number lanes per road line. Defaults \"lanes\". Column data numeric.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/calc_osm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate metrics based on OpenStreetMap data at point locations — calc_osm","text":"list containing features/metrics calculated points,  appended new columns. element list corresponds particular buffer size.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/calc_specific_lsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate specific landscape metrics at point locations — calc_specific_lsm","title":"Calculate specific landscape metrics at point locations — calc_specific_lsm","text":"Calculate specific landscape metrics point locations, classified raster object. Calls function calc_lsm() internally. character vector predictor names include specified buffer radii within summarise metric. Refer landscapemetrics::list_lsm() full list metric names abbreviations.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/calc_specific_lsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate specific landscape metrics at point locations — calc_specific_lsm","text":"","code":"calc_specific_lsm(   raster,   class_names,   class_values,   predictors_lsm,   points,   na_threshold = 90,   point_id = \"point_id\",   ... )"},{"path":"https://ecological-cities.github.io/biodivercity/reference/calc_specific_lsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate specific landscape metrics at point locations — calc_specific_lsm","text":"raster classified SpatRaster object (terra::rast()). Pixels integer values. class_names Vector (character) land cover class names used identify corresponding integer values class_values. class_values Vector (integer) values interest within classified rasters raster. include value 0. predictors_lsm Vector (character) predictor variables calculated raster(s). naming format r<radius point buffer metres>m_lsm_<class>_<metric> (e.g. r50m_lsm_veg_pland). Refer landscapemetrics::list_lsm() full list metrics. points Points locations (sf object) calculate metrics. na_threshold Value calculated predictor NA percentage raster data within respective point buffer areas less value (0 100). point_id Column name sampling point id within points sf. Defaults \"point_id\". ... Arguments passed calc_lsm()","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/calc_specific_lsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate specific landscape metrics at point locations — calc_specific_lsm","text":"points object including new columns variables specified predictors_osm.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/calc_specific_osm.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate specific metrics from OpenStreetMap data at point locations — calc_specific_osm","title":"Calculate specific metrics from OpenStreetMap data at point locations — calc_specific_osm","text":"Calculate specific metrics OpenStreetMap (OSM) vector data point locations. character vector predictor names include specified buffer radii within summarise metric. Currently supports vector data buildings (polygons) roads (lines).","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/calc_specific_osm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate specific metrics from OpenStreetMap data at point locations — calc_specific_osm","text":"","code":"calc_specific_osm(   vector,   building_ndsm = NULL,   building_height = \"height\",   building_levels = \"levels\",   road_lanes = \"lanes\",   predictors_osm,   points,   point_id = \"point_id\" )"},{"path":"https://ecological-cities.github.io/biodivercity/reference/calc_specific_osm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate specific metrics from OpenStreetMap data at point locations — calc_specific_osm","text":"vector sf dataframe either buildings (polygons) roads (lines). building_ndsm SpatRaster object (terra::rast()) (optional). continuous raster normalised Digital Surface Model, used calculate building heights. absent (NULL) variable named predictors_osm, column building_height used instead. Defaults NULL. building_height Column name vector building height. Defaults \"height\". building_levels Column name vector number building levels. Defaults \"levels\". road_lanes Column name vector number lanes per road line. predictors_osm Vector (character) predictor variables calculated vector file(s). naming format <radius metres>_osm_<metric> (e.g. r50m_osm_buildingFA_ratio). points Points locations (sf object) calculate metrics. point_id Column name sampling point id within points sf. Defaults \"point_id\".","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/calc_specific_osm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate specific metrics from OpenStreetMap data at point locations — calc_specific_osm","text":"points object including new columns variables specified predictors_osm.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/calculate_sac.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract species accumulation curves based on specified criteria — calculate_sac","title":"Extract species accumulation curves based on specified criteria — calculate_sac","text":"Wrapper function filter_observations() filters species observations biodiversity surveys, based specified criteria. Subsequently forms community matrix, removes taxon group-level (genus/family) species within group observed area (& period), using function check_taxongrps(). Finally, runs function specaccum() package vegan, extracts output data. Data biodiversity surveys species observations (respective abundances) must provided.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/calculate_sac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract species accumulation curves based on specified criteria — calculate_sac","text":"","code":"calculate_sac(   observations,   survey_ref,   specify_area,   specify_period,   specify_taxon,   survey_id = \"survey_id\",   area = \"area\",   period = \"period\",   taxon = \"taxon\",   species = \"species\",   genus = \"genus\",   family = \"family\",   abundance = \"abundance\" )"},{"path":"https://ecological-cities.github.io/biodivercity/reference/calculate_sac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract species accumulation curves based on specified criteria — calculate_sac","text":"observations Dataframe species observations. include columns survey_id, area, period, taxon, species abundance. survey_ref Dataframe surveys conducted. Values column survey_id correspond observations. specify_area Specify area. specify_period Specify survey period. specify_taxon Specify taxon group interest. survey_id Column name unique identifier survey observations survey_ref. Defaults survey_id. area Column name area specified observations survey_ref. Defaults area. period Column name sampling period specified observations survey_ref. Defaults period. taxon Column name taxon interest specified observations survey_ref. Defaults taxon. species Column name species specified observations. Defaults species. genus Column name genus specified observations. Defaults genus.  Used remove genus-level records species column, species within group observed within filtered dataset. family Column name family specified observations. Defaults family. Used remove family-level records species column, species within group observed within filtered dataset. abundance Column name species abundance specified observations. Defaults abundance.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/calculate_sac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract species accumulation curves based on specified criteria — calculate_sac","text":"dataframe columns sites, species richness sd (standard deviation) results, well information specified specify_area, specify_period specify_taxon.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/check_taxongrps.html","id":null,"dir":"Reference","previous_headings":"","what":"Check taxon-group-level records in survey data — check_taxongrps","title":"Check taxon-group-level records in survey data — check_taxongrps","text":"Show taxon groups species within group observed, tally number species within particular group. Includes option tally either different levels (area point; column specified user). Output dataframe can used subsequent data processing (e.g. filtered away input dataset observations).","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/check_taxongrps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check taxon-group-level records in survey data — check_taxongrps","text":"","code":"check_taxongrps(   observations,   level,   species = \"species\",   genus = \"genus\",   family = \"family\",   area = \"area\",   period = \"period\",   point_id = \"point_id\" )"},{"path":"https://ecological-cities.github.io/biodivercity/reference/check_taxongrps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check taxon-group-level records in survey data — check_taxongrps","text":"observations Dataframe species observations. include columns species, genus, family, area, period, point_id. level Specify whether tally area point. species Column name species name recorded observations. May include group-level records (genus family). genus Column name genus name recorded observations. family Column name family name recorded observations. area Column name area interest specified observations. Defaults area. period Column name sampling period specified observations. Defaults period. point_id Column name unique identifier point observations. Defaults point_id.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/check_taxongrps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check taxon-group-level records in survey data — check_taxongrps","text":"Dataframe containing taxon group names species within group observed. Includes columns period area/point_id (depending argument level), well number (n) species particular taxon group.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/check_taxongrps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check taxon-group-level records in survey data — check_taxongrps","text":"","code":"data(animal_observations) check_taxongrps(observations = animal_observations, level = \"area\") #> # A tibble: 1,119 × 4 #> # Groups:   area, period [10] #>    area  period name                  n #>    <chr>  <dbl> <chr>             <int> #>  1 BS         1 Acisoma spp.          1 #>  2 BS         1 Acraea spp.           1 #>  3 BS         1 Acridotheres spp.     2 #>  4 BS         1 Aegithina spp.        1 #>  5 BS         1 Agriocnemis spp.      1 #>  6 BS         1 Agrionoptera spp.     1 #>  7 BS         1 Agropsar spp.         1 #>  8 BS         1 Amaurornis spp.       1 #>  9 BS         1 Ampittia spp.         1 #> 10 BS         1 Anthreptes spp.       1 #> # … with 1,109 more rows"},{"path":"https://ecological-cities.github.io/biodivercity/reference/classify_image_binary.html","id":null,"dir":"Reference","previous_headings":"","what":"Binary classification of a single-band image based on a threshold value — classify_image_binary","title":"Binary classification of a single-band image based on a threshold value — classify_image_binary","text":"Classify single-band image spectral index greyscale raster derived satellite data. threshold value specified, Otsu's threshold can calculated used classification.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/classify_image_binary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Binary classification of a single-band image based on a threshold value — classify_image_binary","text":"","code":"classify_image_binary(   image,   threshold = \"otsu\",   range = NULL,   levels = 256,   file = NULL,   ... )"},{"path":"https://ecological-cities.github.io/biodivercity/reference/classify_image_binary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Binary classification of a single-band image based on a threshold value — classify_image_binary","text":"image Single band raster classified (SpatRaster object library(terra)), file path image imported (terra::rast() used). threshold Either numeric value manually-specified threshold, \"otsu\" calculate threshold via Otsu's method. Defaults \"otsu\". range Numeric vector (length 2) specifying histogram range used Otsu's thresholding (relevant threshold = \"otsu\"). Defaults minimum maximum values imported raster. levels Number histogram bins used calculate threshold value (relevant threshold = \"otsu\"). Typically based bit depth image (e.g. 8-bit image 2^8 = 256 levels). Defaults 256. file File path export output raster (optional). Defaults NULL. ... arguments may supplied terra::writeRaster().","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/classify_image_binary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Binary classification of a single-band image based on a threshold value — classify_image_binary","text":"classified raster (SpatRaster object).","code":""},{"path":[]},{"path":"https://ecological-cities.github.io/biodivercity/reference/classify_image_binary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Binary classification of a single-band image based on a threshold value — classify_image_binary","text":"","code":"if (FALSE) {   ndvi_mosaic <- system.file(\"extdata\", \"ndvi_mosaic.tif\",                               package=\"biodivercity\")   terra::plot(ndvi_mosaic) # examine continuous raster   ndvi_classified <- classify_image_binary(image = ndvi_mosaic)   terra::plot(ndvi) # examine classified raster }"},{"path":"https://ecological-cities.github.io/biodivercity/reference/exclude_simulator.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate multiple scenarios with animal surveys randomly excluded — exclude_simulator","title":"Simulate multiple scenarios with animal surveys randomly excluded — exclude_simulator","text":"Randomly exclude either animal surveys sampling points (associated surveys) species community matrix. column community matrix represent unique species, row represents single unique survey.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/exclude_simulator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate multiple scenarios with animal surveys randomly excluded — exclude_simulator","text":"","code":"exclude_simulator(   community_matrix,   survey_ref,   exclude_level = \"survey\",   exclude_num,   specify_areas = NULL,   specify_points = NULL,   specify_periods = NULL,   specify_cycles = NULL,   area_ignore = NULL,   period_ignore = NULL,   cycle_ignore = NULL,   survey_id = \"survey_id\",   point_id = \"point_id\",   area = \"area\",   period = \"period\",   cycle = \"cycle\",   rep = 100 )"},{"path":"https://ecological-cities.github.io/biodivercity/reference/exclude_simulator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate multiple scenarios with animal surveys randomly excluded — exclude_simulator","text":"community_matrix Dataframe species community matrix (one survey per row). column containing unique IDs animal surveys conducted (e.g. survey_id). survey_ref Dataframe containing information surveys conducted (e.g. survey_id, point_id, period, area, cycle). Values column survey_id correspond community_matrix. exclude_level Whether exclude based \"survey\" \"point\". Defaults \"survey\". exclude_num Number surveys/points exclude (remove) full dataset community_matrix. Value single integer. specify_areas Specify area(s) randomly exclude surveys (character string vector). Defaults NULL, excludes surveys randomly across areas. specify_points Specify point_id(s) sampling points randomly exclude surveys (character string vector). Defaults NULL, excludes surveys randomly across points. specify_periods Specify survey period(s) exclude surveys (character string vector). Defaults NULL, excludes surveys randomly across periods. specify_cycles Specify survey cycle(s) exclude surveys (character string vector). Defaults NULL, excludes surveys randomly across cycles. area_ignore Ignore specified area(s) simulation output (character string vector). Defaults NULL, includes areas simulation. period_ignore Ignore specified period simulation output (character string vector). Defaults NULL, includes periods simulation. cycle_ignore Ignore specified cycles(s) simulation output (character string vector). Defaults NULL, includes cycles simulation. survey_id Column name unique identifier survey community_matrix survey_ref. Defaults survey_id. point_id Column name unique identifier sampling point survey_ref. Defaults survey_id. area Column name area specified survey_ref. Defaults area. period Column name survey period specified survey_ref. Defaults period. cycle Column name survey cycle specified survey_ref. Defaults cycle. rep Specify number repetitions (scenarios) simulate. Defaults 100.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/exclude_simulator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate multiple scenarios with animal surveys randomly excluded — exclude_simulator","text":"dataframe containing results iteration (column). count sampling points species (row) shown. column fullshows breakdown counts within original dataset.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/exclude_simulator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate multiple scenarios with animal surveys randomly excluded — exclude_simulator","text":"","code":"data(animal_observations) data(animal_surveys)  # filter animal observations to taxon of interest birds <- filter_observations(observations = animal_observations,                             survey_ref = animal_surveys,                             specify_taxon = \"Aves\")  # convert animal observations to community matrix birds <- as.data.frame.matrix(xtabs(abundance ~ survey_id + species, data = birds)) birds <- cbind(survey_id = rownames(birds), birds) # convert rownames to col  # run function set.seed(123) exclude_simulator(birds, animal_surveys,                  exclude_num = 15, exclude_level = \"survey\", # exclude 15 surveys                  specify_cycles = 5, # exclude those in cycle 5 only                  period_ignore = \"2\", # remove all data from period 2                  rep = 10) # 10 scenarios only #> # A tibble: 138 × 12 #>    species     full iter1 iter2 iter3 iter4 iter5 iter6 iter7 iter8 iter9 iter10 #>    <chr>      <int> <int> <int> <int> <int> <int> <int> <int> <int> <int>  <int> #>  1 Accipiter…     1     1     1     1     1     1     1     1     1     1      1 #>  2 Accipitri…     1     1     1     1     1     1     1     1     1     1      1 #>  3 Acridothe…   157   157   157   157   157   157   157   157   157   157    157 #>  4 Acridothe…    52    51    51    52    52    52    52    52    52    52     51 #>  5 Acrocepha…     1     1     1     1     1     1     1     1     1     1      1 #>  6 Acrocepha…     1     1     1     1     1     1     1     1     1     1      1 #>  7 Actitis h…     4     4     4     4     4     4     4     4     4     4      4 #>  8 Aegithina…    68    67    67    68    68    67    67    66    67    67     67 #>  9 Aerodramu…     1     1     1     1     1     1     1     1     1     1      1 #> 10 Aerodramu…     1     1     1     1     1     1     1     1     1     1      1 #> # … with 128 more rows"},{"path":"https://ecological-cities.github.io/biodivercity/reference/filter_observations.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter animal observations based on specified criteria — filter_observations","title":"Filter animal observations based on specified criteria — filter_observations","text":"Helper function filter species observations animal surveys based specified criteria.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/filter_observations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter animal observations based on specified criteria — filter_observations","text":"","code":"filter_observations(   observations,   survey_ref,   specify_area = NULL,   specify_period = NULL,   specify_taxon = NULL,   survey_id = \"survey_id\",   point_id = \"point_id\",   area = \"area\",   period = \"period\",   taxon = \"taxon\" )"},{"path":"https://ecological-cities.github.io/biodivercity/reference/filter_observations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter animal observations based on specified criteria — filter_observations","text":"observations Dataframe animal species observations. include columns survey_id, area, period, taxon. survey_ref Dataframe surveys conducted. Values column survey_id correspond observations. specify_area Specify area(s) interest character string (can vector multiple areas). Defaults NULL, includes areas. specify_period Specify survey period(s) interest character string (can vector multiple periods). Defaults NULL, includes periods. specify_taxon Specify taxon (animal group) interest character string (can vector multiple taxa). Defaults NULL, includes taxa. survey_id Column name unique identifier survey observations survey_ref. Defaults \"survey_id\". point_id Column name unique identifier point observations survey_ref. Defaults \"point_id\". area Column name areas specified observations survey_ref. Defaults \"area\". period Column name sampling periods specified observations survey_ref. Defaults \"period\". taxon Column name taxa specified observations survey_ref. Defaults \"taxon\".","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/filter_observations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter animal observations based on specified criteria — filter_observations","text":"dataframe observations subset according specified criteria.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/filter_observations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter animal observations based on specified criteria — filter_observations","text":"","code":"data(animal_observations) data(animal_surveys)  # filter to birds in both periods 1 and 2 filter_observations(observations = animal_observations,                     survey_ref = animal_surveys,                     specify_taxon = \"Aves\",                     specify_period = c(\"1\",\"2\")) #> # A tibble: 28,571 × 13 #>    survey_id      point_id area  period cycle resampled start_time          #>    <fct>          <fct>    <chr>  <dbl> <dbl> <lgl>     <dttm>              #>  1 1 PGT15 1 Aves PGT15    PG         1     1 NA        2016-08-08 07:00:00 #>  2 1 PGT15 1 Aves PGT15    PG         1     1 NA        2016-08-08 07:00:00 #>  3 1 PGT15 1 Aves PGT15    PG         1     1 NA        2016-08-08 07:00:00 #>  4 1 PGT15 1 Aves PGT15    PG         1     1 NA        2016-08-08 07:00:00 #>  5 1 PGT15 1 Aves PGT15    PG         1     1 NA        2016-08-08 07:00:00 #>  6 1 PGT15 1 Aves PGT15    PG         1     1 NA        2016-08-08 07:00:00 #>  7 1 PGT15 1 Aves PGT15    PG         1     1 NA        2016-08-08 07:00:00 #>  8 1 PGT15 1 Aves PGT15    PG         1     1 NA        2016-08-08 07:00:00 #>  9 1 PGT15 1 Aves PGT15    PG         1     1 NA        2016-08-08 07:00:00 #> 10 1 PGT15 1 Aves PGT15    PG         1     1 NA        2016-08-08 07:00:00 #> # … with 28,561 more rows, and 6 more variables: time <dttm>, taxon <chr>, #> #   species <chr>, family <chr>, genus <chr>, abundance <dbl>"},{"path":"https://ecological-cities.github.io/biodivercity/reference/generate_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate regular grid of spatial points within target area of interest — generate_grid","title":"Generate regular grid of spatial points within target area of interest — generate_grid","text":"Generate regular grid spatial points specified pixel resolution (.e. density points), provided polygon(s) multipolygon(s). points used subsequent processing, example, summarise landscape variables model inputs, well generate spatial predictions across target area. function wrapper around sf::st_make_grid() function argument = \"centers\".","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/generate_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate regular grid of spatial points within target area of interest — generate_grid","text":"","code":"generate_grid(target_areas, innerbuffer_m, pixelsize_m)"},{"path":"https://ecological-cities.github.io/biodivercity/reference/generate_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate regular grid of spatial points within target area of interest — generate_grid","text":"target_areas sf object(s) type POLYGON MULTIPOLYGON. innerbuffer_m numeric value indicating minimum distance generated points boundaries target area. pixelsize_m numeric value output grid cell size (metres).","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/generate_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate regular grid of spatial points within target area of interest — generate_grid","text":"sf dataframe additional geometry (sfc) column type POINT.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/get_buildings_osm.html","id":null,"dir":"Reference","previous_headings":"","what":"Get building polygons from OpenStreetMap — get_buildings_osm","title":"Get building polygons from OpenStreetMap — get_buildings_osm","text":"Download process OpenStreetMap (OSM) building polygons within specified geographical place, Geofabrik database. wrapper around functions package osmextract, processes downloaded files subsequent analyses. Refer package osmextract details options input arguments downloading data.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/get_buildings_osm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get building polygons from OpenStreetMap — get_buildings_osm","text":"","code":"get_buildings_osm(   place,   date = NULL,   dir_raw = osmextract::oe_download_directory(),   filename = NULL,   driver = \"GeoJSON\",   delete_dsn = TRUE,   append = NA,   ... )"},{"path":"https://ecological-cities.github.io/biodivercity/reference/get_buildings_osm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get building polygons from OpenStreetMap — get_buildings_osm","text":"place sf object (projected coordinate reference system). Geographical area match (.osm.pbf) file data archive. Argument passed osmextract::oe_match(). date Date OSM data snapshot download. Refer https://download.geofabrik.de specific dates available. Defaults NULL (download latest available data). dir_raw character. Directory download raw unprocessed OSM data. Passed argument download_directory osmextract::oe_read(). filename character (optional). File path export output data. driver character (optional). Name driver used export output data, passed sf::st_write(). Defaults 'GeoJSON'. delete_dsn logical (optional). Passed sf::st_write(). append defaults NA, raises error layer exists. Passed sf::st_write(). ... arguments passed osmextract::oe_read().","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/get_buildings_osm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get building polygons from OpenStreetMap — get_buildings_osm","text":"processed building polygons (sf object).","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/get_buildings_osm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get building polygons from OpenStreetMap — get_buildings_osm","text":"Data filtered key-value attributes, building: NULL. column levels derived building:levels; values set 1 extracted value empty NA, set NA ≤ 0 (.e. underground); values rounded nearest whole number. column area_m2 represents building footprint area, floorarea_m2 calculated multiplying area_m2 number levels.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/get_buildings_osm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get building polygons from OpenStreetMap — get_buildings_osm","text":"","code":"if (FALSE) { data(pop_sgp) pop_sgp <- sf::st_transform(pop_sgp, sf::st_crs(32648)) # transform to projected crs  # merge all census blocks for chosen year (2020) into single multi-polygon # function requires that polygons are merged city_boundaries <- pop_sgp %>%    dplyr::filter(year == 2020) %>%    sf::st_union() %>%    sf::st_as_sf() %>%    smoothr::fill_holes(threshold = units::set_units(1, 'km^2'))  %>% # clean up    smoothr::drop_crumbs(threshold = units::set_units(1, 'km^2'))  %>%    sf::st_make_valid()  # run function get_buildings_osm(place = city_boundaries,                   date = as.Date('2021-01-01'),                   filename = 'buildings_osm-polygons_2021-01-01.geojson') }"},{"path":"https://ecological-cities.github.io/biodivercity/reference/get_roads_osm.html","id":null,"dir":"Reference","previous_headings":"","what":"Get road lines from OpenStreetMap — get_roads_osm","title":"Get road lines from OpenStreetMap — get_roads_osm","text":"Download process OpenStreetMap (OSM) road lines within specified geographical place, Geofabrik database. wrapper around functions package osmextract, processes downloaded files subsequent analyses. Refer package osmextract details options input arguments downloading data.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/get_roads_osm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get road lines from OpenStreetMap — get_roads_osm","text":"","code":"get_roads_osm(   place,   date = NULL,   dir_raw = osmextract::oe_download_directory(),   filename = NULL,   ... )"},{"path":"https://ecological-cities.github.io/biodivercity/reference/get_roads_osm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get road lines from OpenStreetMap — get_roads_osm","text":"place sf object (projected coordinate reference system). Geographical area match (.osm.pbf) file data archive. Argument passed osmextract::oe_match(). date Date OSM data snapshot download. Refer https://download.geofabrik.de specific dates available. Defaults NULL (download latest available data). dir_raw character. Directory download raw unprocessed OSM data. Passed argument download_directory osmextract::oe_read(). filename character (optional). File path export output data (GeoJSON format). ... arguments passed osmextract::oe_read().","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/get_roads_osm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get road lines from OpenStreetMap — get_roads_osm","text":"processed road lines (sf object).","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/get_roads_osm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get road lines from OpenStreetMap — get_roads_osm","text":"OSM lines filtered key-value attributes, highway: motorway, trunk, primary, secondary, tertiary, unclassified residential, respective *_link values.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/mosaic_sen2r.html","id":null,"dir":"Reference","previous_headings":"","what":"Create mosaics of Sentinel-2 images downloaded via the sen2r package — mosaic_sen2r","title":"Create mosaics of Sentinel-2 images downloaded via the sen2r package — mosaic_sen2r","text":"Create mosaics downloaded sen2r images parent directory, specified sen2r path_out argument. images used detected parent directory running function. list spectral indices retrieved sen2r library('terra') used create mosaics.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/mosaic_sen2r.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create mosaics of Sentinel-2 images downloaded via the sen2r package — mosaic_sen2r","text":"","code":"mosaic_sen2r(parent_dir, exclude = NULL, rm_outlier = TRUE)"},{"path":"https://ecological-cities.github.io/biodivercity/reference/mosaic_sen2r.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create mosaics of Sentinel-2 images downloaded via the sen2r package — mosaic_sen2r","text":"parent_dir File path parent directory sen2r images, specified sen2r path_out argument. exclude Character vector spectral indices excluded mosaic operation. 'CLD', 'SCL', 'RGB432B', 'BOA' excluded default. rm_outlier TRUE FALSE perform outlier removal. Threshold values specific spectral indices.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/mosaic_sen2r.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create mosaics of Sentinel-2 images downloaded via the sen2r package — mosaic_sen2r","text":".tif raster mosaic.tif within subdirectory included indices.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://ecological-cities.github.io/biodivercity/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/points_landscape.html","id":null,"dir":"Reference","previous_headings":"","what":"Sampling points with landscape data summarised at multiple buffer radii — points_landscape","title":"Sampling points with landscape data summarised at multiple buffer radii — points_landscape","text":"Examples landscape data summarised point locations animal surveys conducted. sampling points within six towns (areas) Singapore, two sampling periods. six towns Punggol (PG), Queenstown (QT), Tampines (TP), Jurong West (JW), Bishan (BS) Woodlands (WL).","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/points_landscape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampling points with landscape data summarised at multiple buffer radii — points_landscape","text":"","code":"data(points_landscape)"},{"path":"https://ecological-cities.github.io/biodivercity/reference/points_landscape.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sampling points with landscape data summarised at multiple buffer radii — points_landscape","text":"Dataframe containing landscape predictors (columns).","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/points_landscape.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sampling points with landscape data summarised at multiple buffer radii — points_landscape","text":"Development Biodiversity Index Residential Towns using Biodiversity Field Surveys, 2016–2022. Ministry National Development Research Fund (MNDRF) Grant. Awarded National University Singapore Singapore Housing & Development Board.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/points_landscape.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sampling points with landscape data summarised at multiple buffer radii — points_landscape","text":"Data 'wide format', .e. duplicate rows unique identifier points (column point_id), owing presence multiple buffer radii per point (column radius_m, metres). landscape predictors summarised buffer radii. Column names landscape predictors prefixed following: man_: manually mapped -site osm_: derived OpenStreetMap data lsm_: landscape metrics based land cover classes","code":""},{"path":[]},{"path":"https://ecological-cities.github.io/biodivercity/reference/points_landscape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sampling points with landscape data summarised at multiple buffer radii — points_landscape","text":"","code":"head(points_landscape) #>   point_id area period radius_m man_natveg_pland man_water_pland man_turf_pland #> 1 TPa40c_E   TP      2       50          0.00000         0.00000      74.487333 #> 2  TPb2a_P   TP      1       50         44.79356        39.61295      15.479083 #> 3    PGNa5   PG      1       50          0.00000         0.00000      12.792271 #> 4 PGNb4a_P   PG      2       50         65.02723        17.43035       3.106433 #> 5    PGE10   PG      2      126         11.45276              NA             NA #> 6 QTNa44_P   QT      2       50          0.00000        13.65447      39.275742 #>   man_shrub_pland man_shrub_sprich man_tree_count man_tree_sprich #> 1       2.0436409               26             23               9 #> 2       0.8510684               25             24              10 #> 3       6.3710769               19            147               7 #> 4       0.1736969                1             13               3 #> 5              NA               NA             NA              NA #> 6       0.3532717               25             14               5 #>   man_buildingAvgLvl man_buildingFA_ratio man_laneDensity #> 1           8.268138            0.7823429      0.01207494 #> 2           0.000000            0.0000000      0.00000000 #> 3           9.289540            4.4620846      0.01563074 #> 4           0.000000            0.0000000      0.00000000 #> 5                 NA                   NA              NA #> 6           1.000000            0.1035679      0.07505683"},{"path":"https://ecological-cities.github.io/biodivercity/reference/predict_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate continuous raster of spatial predictions — predict_heatmap","title":"Generate continuous raster of spatial predictions — predict_heatmap","text":"Generate continuous raster spatial predictions","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/predict_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate continuous raster of spatial predictions — predict_heatmap","text":"","code":"predict_heatmap(models, recipe_data, points_topredict, pixelsize_m)"},{"path":"https://ecological-cities.github.io/biodivercity/reference/predict_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate continuous raster of spatial predictions — predict_heatmap","text":"models Model objects specific animal (taxon) group used predictions (output MuMIn::get.models()). recipe_data recipe_data recipe object (recipes::recipe()) containing information transform new data appropriate format, prior making predictions (e.g. scale center variables). points_topredict sf dataframe geometry (sfc) column type POINT, well column names correspond landscape predictors within models. pixelsize_m numeric value output grid cell size (metres). Must pixel resolution regular grid spatial points points_topredict.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/predict_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate continuous raster of spatial predictions — predict_heatmap","text":"terra::rast() raster object continuous values representing spatial predictions made across regular grid (e.g. number animal species).","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/random_pt_gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly generate sampling points within a supplied area — random_pt_gen","title":"Randomly generate sampling points within a supplied area — random_pt_gen","text":"Randomly generate sampling points specified density buffer radius, within supplied polygons. excess sampling points can generated, case generated points unsuitable surveys (e.g. within inaccessible areas). necessary, stratified random sampling can performed ensure sufficient representation sub-areas interest. supplying sub_areas interest, sampling points stratified areas outside ('normal' areas) within 'sub-areas'.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/random_pt_gen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly generate sampling points within a supplied area — random_pt_gen","text":"","code":"random_pt_gen(   boundaries,   area_per_pt,   pt_radius,   excess_modifier = 1,   sub_areas = NULL,   retain = NULL,   retain_prop = NULL )"},{"path":"https://ecological-cities.github.io/biodivercity/reference/random_pt_gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly generate sampling points within a supplied area — random_pt_gen","text":"boundaries Shapefile (polygon multipolygon) site boundaries sampling. area_per_pt Area component point density square meters (e.g. one point every 50 hectares, area_per_pt = 500000). pt_radius Buffer radius survey points meters. Ensures generated points extend beyond boundaries area interest. excess_modifier Numeric value multiplicative modifier excess points generated (.e. value 1.5 = 1.5 times expected number points generated). default value '1'. sub_areas Shapefile (polygon multipolygon) sub-area interest, sampling points generated separately (stratified random sampling). retain Shapefile (point) previous round surveys retain new set survey points. column type must exist, value either Normal Sub-area. retain_prop Value 0 1 proportion points retain previous round surveys.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/random_pt_gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomly generate sampling points within a supplied area — random_pt_gen","text":"sf object sampling_points containing geographical coordinates generated points.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/sampling_areas.html","id":null,"dir":"Reference","previous_headings":"","what":"Areas of interest where sampling points were generated — sampling_areas","title":"Areas of interest where sampling points were generated — sampling_areas","text":"Six towns (areas) Singapore: Punggol (PG), Queenstown (QT), Tampines (TP), Jurong West (JW), Bishan (BS) Woodlands (WL).","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/sampling_areas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Areas of interest where sampling points were generated — sampling_areas","text":"","code":"data(sampling_areas)"},{"path":"https://ecological-cities.github.io/biodivercity/reference/sampling_areas.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Areas of interest where sampling points were generated — sampling_areas","text":"Tabular sf object. row geometry type POLYGON.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/sampling_areas.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Areas of interest where sampling points were generated — sampling_areas","text":"Development Biodiversity Index Residential Towns using Biodiversity Field Surveys, 2016–2022. Ministry National Development Research Fund (MNDRF) Grant. Awarded National University Singapore Singapore Housing & Development Board.","code":""},{"path":[]},{"path":"https://ecological-cities.github.io/biodivercity/reference/sampling_areas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Areas of interest where sampling points were generated — sampling_areas","text":"","code":"head(sampling_areas) #> Simple feature collection with 6 features and 1 field #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 353618.5 ymin: 141963.4 xmax: 384748.9 ymax: 161017.8 #> Projected CRS: WGS 84 / UTM zone 48N #>   area                       geometry #> 1   BS POLYGON ((371976.9 150656, ... #> 2   JW POLYGON ((358502.3 149045, ... #> 3   PG POLYGON ((379073.3 156986.3... #> 4   QT POLYGON ((365379.3 145134.7... #> 5   TP POLYGON ((384558.6 150112.5... #> 6   WL POLYGON ((363419.4 160258.2..."},{"path":"https://ecological-cities.github.io/biodivercity/reference/sampling_forests.html","id":null,"dir":"Reference","previous_headings":"","what":"Sub-areas of interest where sampling points were generated — sampling_forests","title":"Sub-areas of interest where sampling points were generated — sampling_forests","text":"Forest patches within six towns (areas) Singapore: Punggol (PG), Queenstown (QT), Tampines (TP), Jurong West (JW), Bishan (BS) Woodlands (WL).","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/sampling_forests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sub-areas of interest where sampling points were generated — sampling_forests","text":"","code":"data(sampling_forests)"},{"path":"https://ecological-cities.github.io/biodivercity/reference/sampling_forests.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sub-areas of interest where sampling points were generated — sampling_forests","text":"Tabular sf object. row geometry type POLYGON. sampling period (column), forests patches within area (town) surveyed.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/sampling_forests.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sub-areas of interest where sampling points were generated — sampling_forests","text":"Development Biodiversity Index Residential Towns using Biodiversity Field Surveys, 2016–2022. Ministry National Development Research Fund (MNDRF) Grant. Awarded National University Singapore Singapore Housing & Development Board.","code":""},{"path":[]},{"path":"https://ecological-cities.github.io/biodivercity/reference/sampling_forests.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sub-areas of interest where sampling points were generated — sampling_forests","text":"","code":"head(sampling_forests) #> Simple feature collection with 6 features and 2 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 364789.6 ymin: 141985.4 xmax: 366695.6 ymax: 145712.4 #> Projected CRS: WGS 84 / UTM zone 48N #>   area period                       geometry #> 1   QT      1 POLYGON ((364789.6 145712.4... #> 2   QT      1 POLYGON ((365541.3 144630.1... #> 3   QT      1 POLYGON ((365538.2 144603.3... #> 4   QT      1 POLYGON ((365992 142465.8, ... #> 5   QT      1 POLYGON ((365472.9 143750.2... #> 6   QT      1 POLYGON ((365615.5 143720.4..."},{"path":"https://ecological-cities.github.io/biodivercity/reference/sampling_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Sampling points where animal surveys were conducted — sampling_points","title":"Sampling points where animal surveys were conducted — sampling_points","text":"Point locations animal surveys conducted within six towns (areas) Singapore, two sampling periods. six towns Punggol (PG), Queenstown (QT), Tampines (TP), Jurong West (JW), Bishan (BS) Woodlands (WL).","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/sampling_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampling points where animal surveys were conducted — sampling_points","text":"","code":"data(sampling_points)"},{"path":"https://ecological-cities.github.io/biodivercity/reference/sampling_points.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sampling points where animal surveys were conducted — sampling_points","text":"Tabular sf object. row geometry type POINT.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/sampling_points.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sampling points where animal surveys were conducted — sampling_points","text":"Development Biodiversity Index Residential Towns using Biodiversity Field Surveys, 2016–2022. Ministry National Development Research Fund (MNDRF) Grant. Awarded National University Singapore Singapore Housing & Development Board.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/sampling_points.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sampling points where animal surveys were conducted — sampling_points","text":"Points randomly generated within town (area), stratified landcover type (either Urban Forest). sampling period stretched across year-long duration; points sampled periods.","code":""},{"path":[]},{"path":"https://ecological-cities.github.io/biodivercity/reference/sampling_points.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sampling points where animal surveys were conducted — sampling_points","text":"","code":"head(sampling_points) #> Simple feature collection with 6 features and 4 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 370417.4 ymin: 149215.1 xmax: 372240.7 ymax: 151033.9 #> Projected CRS: WGS 84 / UTM zone 48N #>   point_id area period landcover                  geometry #> 1 BSa11a_P   BS      1     Urban POINT (372055.5 150110.8) #> 2  BSa13_P   BS      1     Urban POINT (371868.6 150361.7) #> 3   BSa14a   BS      1     Urban POINT (370417.4 151033.9) #> 4    BSa1a   BS      1     Urban POINT (371286.2 149324.7) #> 5     BSa2   BS      1     Urban POINT (372240.7 149215.1) #> 6 BSa20a_E   BS      1     Urban   POINT (371866.1 150478)"},{"path":"https://ecological-cities.github.io/biodivercity/reference/standard_sr.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract site species richness normalised to highest common survey effort. — standard_sr","title":"Extract site species richness normalised to highest common survey effort. — standard_sr","text":"Extract species richness sites supplied highest common survey effort. Wrapper function calculate_sac() filter_observations()","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/standard_sr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract site species richness normalised to highest common survey effort. — standard_sr","text":"","code":"standard_sr(   observations,   survey_ref,   specify_area = NULL,   specify_period = NULL,   specify_taxon = NULL,   survey_id = \"survey_id\",   area = \"area\",   period = \"period\",   taxon = \"taxon\",   species = \"species\",   genus = \"genus\",   family = \"family\",   abundance = \"abundance\" )"},{"path":"https://ecological-cities.github.io/biodivercity/reference/standard_sr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract site species richness normalised to highest common survey effort. — standard_sr","text":"observations Dataframe list dataframes species observations. include columns survey_id, area, period, taxon, species abundance. survey_ref Dataframe list dataframes surveys conducted. Values column survey_id correspond observations. specify_area Specify area. specify_period Specify survey period. specify_taxon Specify taxon taxon. survey_id Column name unique identifier survey observations survey_ref. Defaults survey_id. area Column name area specified observations survey_ref. Defaults area. period Column name sampling period specified observations survey_ref. Defaults period. taxon Column name taxon taxon specified observations survey_ref. Defaults taxon. species Column name species specified observations. Defaults species. genus Column name genus specified observations. Defaults genus.  Used remove genus-level records species column, species within group observed within filtered dataset. family Column name family specified observations. Defaults family. Used remove family-level records species column, species within group observed within filtered dataset. abundance Column name species abundance specified observations. Defaults abundance.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/standard_sr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract site species richness normalised to highest common survey effort. — standard_sr","text":"dataframe columns sites, species richness mean species richness sd (standard deviation) results, well information specified specify_area, specify_period specify_taxon.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/tally_observations.html","id":null,"dir":"Reference","previous_headings":"","what":"Tally number of species observations based on specified criteria — tally_observations","title":"Tally number of species observations based on specified criteria — tally_observations","text":"Wrapper function filter_observations() filters species observations biodiversity surveys, based specified criteria. Subsequently tallies number species per survey/sampling point (similar function specnumber() package vegan), extracts output data. tallied level sampling points (level = 'point'), removes taxon group-level (genus/family) species within group observed point (& period), using function check_taxongrps(). Data biodiversity surveys species observations (respective abundances) must provided.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/tally_observations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tally number of species observations based on specified criteria — tally_observations","text":"","code":"tally_observations(   observations,   survey_ref,   level = \"point\",   specify_taxon = NULL,   specify_area = NULL,   specify_period = NULL,   survey_id = \"survey_id\",   area = \"area\",   period = \"period\",   taxon = \"taxon\",   point_id = \"point_id\",   species = \"species\",   genus = \"genus\",   family = \"family\",   abundance = \"abundance\" )"},{"path":"https://ecological-cities.github.io/biodivercity/reference/tally_observations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tally number of species observations based on specified criteria — tally_observations","text":"observations Dataframe species observations. include columns survey_id, area, period, taxon, species abundance. survey_ref Dataframe surveys conducted. Values column survey_id correspond observations. level Specify whether tally 'survey' 'point' (character). Defaults 'point'. specify_taxon Specify taxon interest (character). Defaults NULL, includes taxa. specify_area Specify area (character). Defaults NULL, includes areas. specify_period Specify survey period (character). Defaults NULL, includes periods. survey_id Column name unique identifier survey observations survey_ref. Defaults survey_id. area Column name area specified observations survey_ref. Defaults area. period Column name sampling period specified observations survey_ref. Defaults period. taxon Column name taxon interest specified observations survey_ref. Defaults taxon. point_id Column name unique identifier sampling point specified observations survey_ref. Defaults point_id. species Column name species specified observations. Defaults species. genus Column name genus specified observations. Defaults genus.  Used remove genus-level records species column, species within group observed within filtered dataset. family Column name family specified observations. Defaults family. Used remove family-level records species column, species within group observed within filtered dataset. abundance Column name species abundance specified observations. Defaults abundance.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/tally_observations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tally number of species observations based on specified criteria — tally_observations","text":"dataframe containing tally species per survey/sampling point (depends level ='survey' 'point').","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/threshold_otsu.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate pixel value threshold of a single-band image via Otsu's method — threshold_otsu","title":"Calculate pixel value threshold of a single-band image via Otsu's method — threshold_otsu","text":"Calculate Otsu's threshold value separates single-band (e.g. greyscale) image two distinct classes. threshold value determined minimizing combined intra-class variance. library(terra) used perform --memory operations.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/threshold_otsu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate pixel value threshold of a single-band image via Otsu's method — threshold_otsu","text":"","code":"threshold_otsu(image, range = NULL, levels = 256)"},{"path":"https://ecological-cities.github.io/biodivercity/reference/threshold_otsu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate pixel value threshold of a single-band image via Otsu's method — threshold_otsu","text":"image Single-band raster classified (SpatRaster object library(terra)), file path image imported (terra::rast() used). range Numeric vector (length 2) specifying histogram range used thresholding. Defaults minimum maximum values imported raster. levels Number histogram bins used calculate threshold value, typically based bit depth image (e.g. 8-bit image 2^8 = 256 levels). Defaults 256.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/threshold_otsu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate pixel value threshold of a single-band image via Otsu's method — threshold_otsu","text":"Otsu's threshold value image (single number), can subsequently used image classification (e.g. convert continuous raster binary raster).","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/threshold_otsu.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate pixel value threshold of a single-band image via Otsu's method — threshold_otsu","text":"Otsu, N. (1979). threshold selection method gray-level histograms. IEEE transactions systems, man, cybernetics, 9(1), 62-66. Pau, G., Fuchs, F., Sklyar, O., Boutros, M., & Huber, W. (2010). EBImage—R package image processing applications cellular phenotypes. Bioinformatics, 26(7), 979-981.","code":""},{"path":[]},{"path":"https://ecological-cities.github.io/biodivercity/reference/threshold_otsu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate pixel value threshold of a single-band image via Otsu's method — threshold_otsu","text":"","code":"if (FALSE) {   ndvi_mosaic <- system.file(\"extdata\", \"ndvi_mosaic.tif\",                               package=\"biodivercity\")   terra::plot(ndvi_mosaic) # examine raster data   threshold_otsu(image = ndvi_mosaic) }"},{"path":"https://ecological-cities.github.io/biodivercity/reference/tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers — tidyeval","title":"Tidy eval helpers — tidyeval","text":"sym() creates symbol string syms() creates list symbols character vector. enquo() enquos() delay execution one several function arguments. enquo() returns single quoted expression, like blueprint delayed computation. enquos() returns list quoted expressions. expr() quotes new expression locally. mostly useful build new expressions around arguments captured enquo() enquos(): expr(mean(!!enquo(arg), na.rm = TRUE)). as_name() transforms quoted variable name string. Supplying something else quoted variable name error. unlike as_label() also returns single string supports kind R object input, including quoted function calls vectors. purpose summarise object single label. label often suitable default name. know quoted expression contains (instance expressions captured enquo() variable name, call function, unquoted constant), use as_label(). know quoted simple variable name, like enforce , use as_name(). learn tidy eval use tools, visit https://tidyeval.tidyverse.org Metaprogramming section Advanced R.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/validate_newdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate the accuracy of provided models using new data from animal surveys — validate_newdata","title":"Validate the accuracy of provided models using new data from animal surveys — validate_newdata","text":"specific animal (taxon) group, predict number species (richness) point location (rows newdata) based landscape predictors (columns newdata) summarised locations. Comparison actual data animal surveys used calculate accuracy (error rate) models provided.","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/validate_newdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate the accuracy of provided models using new data from animal surveys — validate_newdata","text":"","code":"validate_newdata(models, recipe_data, newdata, response_var = \"sprich\")"},{"path":"https://ecological-cities.github.io/biodivercity/reference/validate_newdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate the accuracy of provided models using new data from animal surveys — validate_newdata","text":"models Model objects specific animal (taxon) group used predictions (output MuMIn::get.models()). recipe_data recipe object (recipes::recipe()) containing information transform new data appropriate format, prior making predictions (e.g. scale center variables). newdata New data collected point locations specific taxon group. Used validate accuracy models. contain columns landscape predictors found models. response_var Column name response variable specified newdata. Defaults sprich (species richness).","code":""},{"path":"https://ecological-cities.github.io/biodivercity/reference/validate_newdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate the accuracy of provided models using new data from animal surveys — validate_newdata","text":"dataframe containing predictions (column mod.avg.pred) accuracy metrics compared actual data (column name defined response_var argument).","code":""},{"path":"https://ecological-cities.github.io/biodivercity/news/index.html","id":"biodivercity-development-version","dir":"Changelog","previous_headings":"","what":"biodivercity (development version)","title":"biodivercity (development version)","text":"Use models make pixel-based spatial predictions community (Beta) diversity","code":""},{"path":"https://ecological-cities.github.io/biodivercity/news/index.html","id":"biodivercity-010","dir":"Changelog","previous_headings":"","what":"biodivercity 0.1.0","title":"biodivercity 0.1.0","text":"Key features include: Step--step protocols random point sampling animal group within areas interest Generate data summaries animals surveyed multiple levels (e.g., areas, periods, animal groups, species) Download process landscape predictors within areas interest (e.g., remotely sensed data, OpenStreetMap data, manually generated data) Build predictive models assess local (Alpha), community (Beta) total (Gamma) diversity animal group Use models make pixel-based spatial predictions across new areas time periods (currently available Alpha diversity)","code":""}]
